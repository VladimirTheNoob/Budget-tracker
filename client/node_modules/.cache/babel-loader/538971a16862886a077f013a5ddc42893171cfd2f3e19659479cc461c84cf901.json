{"ast":null,"code":"import _objectSpread from\"C:/Users/belya/Cursor projects/Budget tracker/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import axios from'axios';import{Link}from'react-router-dom';import{ROLES}from'../config/roles';import{Toaster,toast}from'react-hot-toast';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const AdminRoleManager=_ref=>{let{currentUserRole}=_ref;const[userRoles,setUserRoles]=useState([]);const[employees,setEmployees]=useState([]);const[newRole,setNewRole]=useState({employeeId:'',email:'',role:ROLES.EMPLOYEE});const[error,setError]=useState(null);const[authStatus,setAuthStatus]=useState(null);useEffect(()=>{// Check current user's role\nconst checkUserRole=async()=>{try{var _response$data$user;const response=await axios.get('http://localhost:5000/auth/status',{withCredentials:true});console.log('Admin Role Manager - Auth Status:',{authenticated:response.data.authenticated,role:response.data.role,user:response.data.user,passedRole:currentUserRole});// Determine the role to use\nconst resolvedRole=currentUserRole||response.data.role||(((_response$data$user=response.data.user)===null||_response$data$user===void 0?void 0:_response$data$user.email)==='belyakovvladimirs@gmail.com'?ROLES.ADMIN:ROLES.EMPLOYEE);console.log('Resolved Role:',resolvedRole);// Only fetch roles if user is an admin\nif(resolvedRole===ROLES.ADMIN){console.log('Fetching user roles for admin');fetchUserRoles();fetchEmployees();}else{console.log('Not an admin, cannot fetch roles');}setAuthStatus(response.data);}catch(error){console.error('Error checking user role:',error);toast.error('Failed to check user role');}};checkUserRole();},[currentUserRole]);const fetchUserRoles=async()=>{try{const response=await axios.get('http://localhost:5000/api/roles',{withCredentials:true});setUserRoles(response.data);}catch(error){console.error('Error fetching user roles:',error);toast.error('Failed to fetch user roles');}};const fetchEmployees=async()=>{try{const response=await axios.get('http://localhost:5000/api/employees',{withCredentials:true});setEmployees(response.data);}catch(error){console.error('Error fetching employees:',error);toast.error('Failed to fetch employees');}};const handleEmployeeChange=e=>{const employeeId=e.target.value;const selectedEmployee=employees.find(emp=>emp.id===employeeId);setNewRole(prev=>_objectSpread(_objectSpread({},prev),{},{employeeId,email:(selectedEmployee===null||selectedEmployee===void 0?void 0:selectedEmployee.email)||''}));};const handleRoleUpdate=async e=>{e.preventDefault();try{var _authStatus$user,_authStatus$user2,_authStatus$user2$ema,_authStatus$user2$ema2;const{employeeId,role}=newRole;console.log('Attempting to update role:',{employeeId,role});// Validate inputs\nif(!employeeId||!role){toast.error('Please select an employee and a role');return;}// Extract user email safely\nconst userEmail=((_authStatus$user=authStatus.user)===null||_authStatus$user===void 0?void 0:_authStatus$user.email)||((_authStatus$user2=authStatus.user)===null||_authStatus$user2===void 0?void 0:(_authStatus$user2$ema=_authStatus$user2.emails)===null||_authStatus$user2$ema===void 0?void 0:(_authStatus$user2$ema2=_authStatus$user2$ema[0])===null||_authStatus$user2$ema2===void 0?void 0:_authStatus$user2$ema2.value)||null;console.log('User Email for Role Update:',userEmail);// Validate user email\nif(!userEmail){toast.error('Cannot update role: User email is undefined');return;}// Find the employee in the list\nconst employeeToUpdate=employees.find(emp=>emp.id===employeeId);if(!employeeToUpdate){toast.error('Employee not found');return;}// Prevent role change for specific email\nif(employeeToUpdate.email==='belyakovvladimirs@gmail.com'){toast.error('Cannot change role for this user');return;}// Prepare role update payload\nconst updatePayload={employeeId:employeeId,role:role,email:employeeToUpdate.email};console.log('Role Update Payload:',updatePayload);// Make API call to update role\nconst response=await axios.put('http://localhost:5000/api/roles',updatePayload,{withCredentials:true});console.log('Role Update Response:',response.data);// Refetch both roles and employees to ensure consistency\nconst[rolesResponse,employeesResponse]=await Promise.all([axios.get('http://localhost:5000/api/roles',{withCredentials:true}),axios.get('http://localhost:5000/api/employees',{withCredentials:true})]);console.log('Refetched Roles:',rolesResponse.data);console.log('Refetched Employees:',employeesResponse.data);// Update state with latest data\nsetUserRoles(rolesResponse.data);setEmployees(employeesResponse.data);// Reset form\nsetNewRole({employeeId:'',email:'',role:ROLES.EMPLOYEE});// Show success notification\ntoast.success(\"Role updated to \".concat(role,\" for \").concat(employeeToUpdate.name));}catch(error){console.error('Error updating role:',error);// Detailed error logging\nif(error.response){// The request was made and the server responded with a status code\nconsole.error('Server Error Details:',error.response.data);toast.error(error.response.data.message||'Failed to update role');}else if(error.request){// The request was made but no response was received\nconsole.error('No response received:',error.request);toast.error('No response from server');}else{// Something happened in setting up the request\nconsole.error('Error setting up request:',error.message);toast.error('Error updating role');}}};// Prevent non-admin access\nif(![ROLES.ADMIN].includes(currentUserRole)){return/*#__PURE__*/_jsx(\"div\",{className:\"p-4 text-center text-red-600\",children:\"Access Denied: Administrator privileges required\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"container mx-auto p-4 bg-[#f5f5f5]\",children:[/*#__PURE__*/_jsx(Toaster,{position:\"top-right\",toastOptions:{success:{duration:3000},error:{duration:5000}}}),/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-2xl mx-auto bg-white rounded p-6 shadow-md\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold mb-6 text-center\",children:\"Role Management\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleRoleUpdate,className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"employee\",className:\"block text-gray-700 text-sm font-medium mb-2\",children:\"Select Employee\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"employee\",value:newRole.employeeId,onChange:handleEmployeeChange,className:\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select an employee\"}),employees.map(employee=>/*#__PURE__*/_jsx(\"option\",{value:employee.id,children:employee.name},employee.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",className:\"block text-gray-700 text-sm font-medium mb-2\",children:\"User Email\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",value:newRole.email,readOnly:true,className:\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400 bg-gray-100\",placeholder:\"Employee email will appear here\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"role\",className:\"block text-gray-700 text-sm font-medium mb-2\",children:\"Select Role\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"role\",value:newRole.role,onChange:e=>setNewRole(prev=>_objectSpread(_objectSpread({},prev),{},{role:e.target.value})),className:\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:ROLES.EMPLOYEE,children:\"Employee\"}),/*#__PURE__*/_jsx(\"option\",{value:ROLES.MANAGER,children:\"Manager\"}),/*#__PURE__*/_jsx(\"option\",{value:ROLES.ADMIN,children:\"Admin\"})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition duration-300\",children:\"Update Role\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Current User Roles\"}),userRoles.length===0?/*#__PURE__*/_jsx(\"p\",{className:\"text-center text-gray-500\",children:\"No user roles found\"}):/*#__PURE__*/_jsxs(\"table\",{className:\"w-full border-collapse border border-gray-300\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{className:\"bg-gray-100\",children:[/*#__PURE__*/_jsx(\"th\",{className:\"border border-gray-300 p-2\",children:\"User Email\"}),/*#__PURE__*/_jsx(\"th\",{className:\"border border-gray-300 p-2\",children:\"Role\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:userRoles.map((role,index)=>{// Find the employee corresponding to this role\nconst employee=employees.find(emp=>emp.id===role.employeeId||emp.email===role.email);// Add console log to debug role mapping\nconsole.log('Role Mapping Debug:',{roleEntry:role,matchedEmployee:employee,employeesList:employees});return/*#__PURE__*/_jsxs(\"tr\",{className:\"hover:bg-gray-50\",children:[/*#__PURE__*/_jsx(\"td\",{className:\"border border-gray-300 p-2\",children:employee?employee.email:role.email||'Unknown Email'}),/*#__PURE__*/_jsx(\"td\",{className:\"border border-gray-300 p-2\",children:role.role})]},index);})})]})]})]})]});};export default AdminRoleManager;","map":{"version":3,"names":["React","useState","useEffect","axios","Link","ROLES","Toaster","toast","jsx","_jsx","jsxs","_jsxs","AdminRoleManager","_ref","currentUserRole","userRoles","setUserRoles","employees","setEmployees","newRole","setNewRole","employeeId","email","role","EMPLOYEE","error","setError","authStatus","setAuthStatus","checkUserRole","_response$data$user","response","get","withCredentials","console","log","authenticated","data","user","passedRole","resolvedRole","ADMIN","fetchUserRoles","fetchEmployees","handleEmployeeChange","e","target","value","selectedEmployee","find","emp","id","prev","_objectSpread","handleRoleUpdate","preventDefault","_authStatus$user","_authStatus$user2","_authStatus$user2$ema","_authStatus$user2$ema2","userEmail","emails","employeeToUpdate","updatePayload","put","rolesResponse","employeesResponse","Promise","all","success","concat","name","message","request","includes","className","children","position","toastOptions","duration","onSubmit","htmlFor","onChange","required","map","employee","type","readOnly","placeholder","MANAGER","length","index","roleEntry","matchedEmployee","employeesList"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/AdminRoleManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { ROLES } from '../config/roles';\nimport { Toaster, toast } from 'react-hot-toast';\n\nconst AdminRoleManager = ({ currentUserRole }) => {\n  const [userRoles, setUserRoles] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [newRole, setNewRole] = useState({\n    employeeId: '',\n    email: '',\n    role: ROLES.EMPLOYEE\n  });\n  const [error, setError] = useState(null);\n  const [authStatus, setAuthStatus] = useState(null);\n\n  useEffect(() => {\n    // Check current user's role\n    const checkUserRole = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/auth/status', { \n          withCredentials: true \n        });\n        \n        console.log('Admin Role Manager - Auth Status:', {\n          authenticated: response.data.authenticated,\n          role: response.data.role,\n          user: response.data.user,\n          passedRole: currentUserRole\n        });\n        \n        // Determine the role to use\n        const resolvedRole = currentUserRole || \n          response.data.role || \n          (response.data.user?.email === 'belyakovvladimirs@gmail.com' ? ROLES.ADMIN : ROLES.EMPLOYEE);\n        \n        console.log('Resolved Role:', resolvedRole);\n        \n        // Only fetch roles if user is an admin\n        if (resolvedRole === ROLES.ADMIN) {\n          console.log('Fetching user roles for admin');\n          fetchUserRoles();\n          fetchEmployees();\n        } else {\n          console.log('Not an admin, cannot fetch roles');\n        }\n\n        setAuthStatus(response.data);\n      } catch (error) {\n        console.error('Error checking user role:', error);\n        toast.error('Failed to check user role');\n      }\n    };\n\n    checkUserRole();\n  }, [currentUserRole]);\n\n  const fetchUserRoles = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/roles', { \n        withCredentials: true \n      });\n      setUserRoles(response.data);\n    } catch (error) {\n      console.error('Error fetching user roles:', error);\n      toast.error('Failed to fetch user roles');\n    }\n  };\n\n  const fetchEmployees = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/employees', {\n        withCredentials: true\n      });\n      setEmployees(response.data);\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      toast.error('Failed to fetch employees');\n    }\n  };\n\n  const handleEmployeeChange = (e) => {\n    const employeeId = e.target.value;\n    const selectedEmployee = employees.find(emp => emp.id === employeeId);\n    setNewRole(prev => ({\n      ...prev,\n      employeeId,\n      email: selectedEmployee?.email || ''\n    }));\n  };\n\n  const handleRoleUpdate = async (e) => {\n    e.preventDefault();\n    \n    try {\n      const { employeeId, role } = newRole;\n      \n      console.log('Attempting to update role:', { employeeId, role });\n\n      // Validate inputs\n      if (!employeeId || !role) {\n        toast.error('Please select an employee and a role');\n        return;\n      }\n\n      // Extract user email safely\n      const userEmail = \n        authStatus.user?.email || \n        authStatus.user?.emails?.[0]?.value || \n        null;\n\n      console.log('User Email for Role Update:', userEmail);\n\n      // Validate user email\n      if (!userEmail) {\n        toast.error('Cannot update role: User email is undefined');\n        return;\n      }\n\n      // Find the employee in the list\n      const employeeToUpdate = employees.find(emp => emp.id === employeeId);\n\n      if (!employeeToUpdate) {\n        toast.error('Employee not found');\n        return;\n      }\n\n      // Prevent role change for specific email\n      if (employeeToUpdate.email === 'belyakovvladimirs@gmail.com') {\n        toast.error('Cannot change role for this user');\n        return;\n      }\n\n      // Prepare role update payload\n      const updatePayload = {\n        employeeId: employeeId,\n        role: role,\n        email: employeeToUpdate.email\n      };\n\n      console.log('Role Update Payload:', updatePayload);\n\n      // Make API call to update role\n      const response = await axios.put(\n        'http://localhost:5000/api/roles', \n        updatePayload, \n        { withCredentials: true }\n      );\n\n      console.log('Role Update Response:', response.data);\n\n      // Refetch both roles and employees to ensure consistency\n      const [rolesResponse, employeesResponse] = await Promise.all([\n        axios.get('http://localhost:5000/api/roles', { withCredentials: true }),\n        axios.get('http://localhost:5000/api/employees', { withCredentials: true })\n      ]);\n\n      console.log('Refetched Roles:', rolesResponse.data);\n      console.log('Refetched Employees:', employeesResponse.data);\n\n      // Update state with latest data\n      setUserRoles(rolesResponse.data);\n      setEmployees(employeesResponse.data);\n\n      // Reset form\n      setNewRole({\n        employeeId: '',\n        email: '',\n        role: ROLES.EMPLOYEE\n      });\n\n      // Show success notification\n      toast.success(`Role updated to ${role} for ${employeeToUpdate.name}`);\n\n    } catch (error) {\n      console.error('Error updating role:', error);\n      \n      // Detailed error logging\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        console.error('Server Error Details:', error.response.data);\n        toast.error(error.response.data.message || 'Failed to update role');\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response received:', error.request);\n        toast.error('No response from server');\n      } else {\n        // Something happened in setting up the request\n        console.error('Error setting up request:', error.message);\n        toast.error('Error updating role');\n      }\n    }\n  };\n\n  // Prevent non-admin access\n  if (![ROLES.ADMIN].includes(currentUserRole)) {\n    return (\n      <div className=\"p-4 text-center text-red-600\">\n        Access Denied: Administrator privileges required\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      <Toaster \n        position=\"top-right\" \n        toastOptions={{\n          success: { duration: 3000 },\n          error: { duration: 5000 }\n        }} \n      />\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6 shadow-md\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Role Management</h2>\n\n        {/* Role Assignment Form */}\n        <form onSubmit={handleRoleUpdate} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"employee\" className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              value={newRole.employeeId}\n              onChange={handleEmployeeChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {employees.map(employee => (\n                <option key={employee.id} value={employee.id}>\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-gray-700 text-sm font-medium mb-2\">\n              User Email\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={newRole.email}\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400 bg-gray-100\"\n              placeholder=\"Employee email will appear here\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"role\" className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Select Role\n            </label>\n            <select\n              id=\"role\"\n              value={newRole.role}\n              onChange={(e) => setNewRole(prev => ({ ...prev, role: e.target.value }))}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value={ROLES.EMPLOYEE}>Employee</option>\n              <option value={ROLES.MANAGER}>Manager</option>\n              <option value={ROLES.ADMIN}>Admin</option>\n            </select>\n          </div>\n\n          <button \n            type=\"submit\" \n            className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition duration-300\"\n          >\n            Update Role\n          </button>\n        </form>\n\n        {/* User Roles List */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-xl font-semibold mb-4\">Current User Roles</h3>\n          {userRoles.length === 0 ? (\n            <p className=\"text-center text-gray-500\">No user roles found</p>\n          ) : (\n            <table className=\"w-full border-collapse border border-gray-300\">\n              <thead>\n                <tr className=\"bg-gray-100\">\n                  <th className=\"border border-gray-300 p-2\">User Email</th>\n                  <th className=\"border border-gray-300 p-2\">Role</th>\n                </tr>\n              </thead>\n              <tbody>\n                {userRoles.map((role, index) => {\n                  // Find the employee corresponding to this role\n                  const employee = employees.find(emp => \n                    emp.id === role.employeeId || \n                    emp.email === role.email\n                  );\n                  \n                  // Add console log to debug role mapping\n                  console.log('Role Mapping Debug:', {\n                    roleEntry: role,\n                    matchedEmployee: employee,\n                    employeesList: employees\n                  });\n\n                  return (\n                    <tr key={index} className=\"hover:bg-gray-50\">\n                      <td className=\"border border-gray-300 p-2\">\n                        {employee ? employee.email : role.email || 'Unknown Email'}\n                      </td>\n                      <td className=\"border border-gray-300 p-2\">{role.role}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminRoleManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
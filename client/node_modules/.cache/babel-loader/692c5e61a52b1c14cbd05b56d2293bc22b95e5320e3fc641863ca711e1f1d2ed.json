{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find3, _parsedEmployeeDepart, _employees$find4;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const uniqueEmployees = [...new Map(employees.map(emp => [emp.id, emp])).values()];\n\n  // State for checked tasks\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n  const fetchData = async () => {\n    try {\n      // Fetch tasks\n      console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      console.log('Tasks Response:', tasksResponse);\n      if (Array.isArray(tasksResponse.data)) {\n        // Ensure all tasks have IDs\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          id: task.id || `task-${Date.now()}-${index}`,\n          // Generate ID if missing\n          ...task\n        }));\n        console.log(`Setting ${tasksWithIds.length} tasks`);\n        setTasks(tasksWithIds);\n      }\n\n      // Fetch employees\n      console.log('Fetching employees...');\n      const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n      console.log('Employees Response:', employeesResponse);\n      if (Array.isArray(employeesResponse.data)) {\n        console.log('Setting employees:', employeesResponse.data);\n        setEmployees(employeesResponse.data);\n      }\n      console.log('Employees fetched:', employeesResponse.data);\n\n      // Fetch employee-department pairs\n      const employeeDepartmentsResponse = await axios.get('http://localhost:5000/api/employee-departments');\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        console.log('Setting employee-departments:', employeeDepartmentsResponse.data);\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        console.log('No employee-departments data found, setting empty array');\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '').map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    }).filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const {\n      value\n    } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      console.log('=== BULK DATA SUBMISSION STARTED ===');\n      console.log('Parsed employee-department pairs:', parsedEmployeeDepartment);\n\n      // Save employee-department pairs if there are any\n      if (parsedEmployeeDepartment.length > 0) {\n        try {\n          const existingIndex = parsedEmployeeDepartment.findIndex(e => e.employee.toLowerCase() === pair.employee.toLowerCase());\n          const employeeResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: parsedEmployeeDepartment\n          });\n          console.log('Employee-department response:', employeeResponse.data);\n          if (employeeResponse.data.updatedCount > 0) {\n            alert(`Successfully updated ${employeeResponse.data.updatedCount} employee-department entries`);\n          } else {\n            alert('No employee-department entries were updated');\n          }\n\n          // Refresh the data\n          await fetchData();\n\n          // Reset form fields\n          setBulkEmployeeDepartment('');\n          setParsedEmployeeDepartment([]);\n        } catch (error) {\n          var _error$response, _error$response$data;\n          console.error('Error updating employee-departments:', error);\n          alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to update employee-departments');\n          return;\n        }\n      }\n\n      // Reset form fields\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n    } catch (error) {\n      console.error('Error in bulk data submission:', error);\n      alert(`Failed to save data: ${error.message}\\nPlease try again.`);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      var _employees$find, _employees$find2;\n      // Find the selected task from the tasks list\n      const selectedTask = tasks.find(t => t.name === task.taskName);\n\n      // Check for duplicates if this is a new task (case-insensitive)\n      if (!selectedTask) {\n        const isDuplicate = tasks.some(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n        if (isDuplicate) {\n          alert('A task with this name already exists. Please choose a different name.');\n          return;\n        }\n      }\n      const taskData = {\n        id: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.id,\n        // Use the ID of the existing task if found\n        name: task.taskName,\n        employee: task.employee,\n        department: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n        date: task.date,\n        status: (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) || 'pending',\n        comments: task.comments,\n        email: ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || ''\n      };\n      console.log('Submitting task:', taskData);\n      let response;\n      if (selectedTask !== null && selectedTask !== void 0 && selectedTask.id) {\n        // Update existing task\n        response = await axios.put(`http://localhost:5000/api/tasks/${selectedTask.id}`, taskData);\n        console.log('Task updated:', response.data);\n      } else {\n        // Create new task\n        response = await axios.post('http://localhost:5000/api/tasks', taskData);\n        console.log('Task created:', response.data);\n      }\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Show success message\n      alert(selectedTask !== null && selectedTask !== void 0 && selectedTask.id ? 'Task updated successfully!' : 'Task created successfully!');\n\n      // Refresh tasks list\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      if (Array.isArray(tasksResponse.data)) {\n        setTasks(tasksResponse.data);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error saving task:', error);\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message;\n      alert(`Error ${task.id ? 'updating' : 'creating'} task: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n  const handleCheckTask = taskId => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkEmployeeDepartment\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkEmployeeDepartment\",\n            value: bulkEmployeeDepartment,\n            onChange: handleBulkEmployeeDepartmentChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleDeleteAllData,\n          className: \"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\",\n          children: \"Delete All Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 15\n            }, this), tasks.map((taskItem, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id || `new-task-${index}-${taskItem.name}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 15\n            }, this), uniqueEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find3 = employees.find(emp => emp.name === task.employee)) === null || _employees$find3 === void 0 ? void 0 : _employees$find3.department) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find4 = employees.find(emp => emp.name === task.employee)) === null || _employees$find4 === void 0 ? void 0 : _employees$find4.email) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center pt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskInput","_employees$find3","_parsedEmployeeDepart","_employees$find4","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","uniqueEmployees","Map","map","emp","id","values","checkedTasks","setCheckedTasks","Set","fetchData","console","log","tasksResponse","get","Array","isArray","data","tasksWithIds","index","Date","now","length","employeesResponse","employeeDepartmentsResponse","error","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","department","email","item","handleTaskSelection","prev","handleChange","name","selectedEmployee","find","handleBulkDataSubmission","existingIndex","findIndex","toLowerCase","employeeResponse","post","employeeDepartments","updatedCount","alert","_error$response","_error$response$data","response","message","handleDeleteAllData","delete","status","window","location","reload","handleSubmit","preventDefault","_employees$find","_employees$find2","selectedTask","t","isDuplicate","some","taskData","put","_error$response2","_error$response2$data","errorMessage","handleCheckTask","taskId","newChecked","has","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const uniqueEmployees = [...new Map(employees.map(emp => [emp.id, emp])).values()];\n\n  // State for checked tasks\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n\n  const fetchData = async () => {\n    try {\n      // Fetch tasks\n      console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      console.log('Tasks Response:', tasksResponse);\n      \n      if (Array.isArray(tasksResponse.data)) {\n        // Ensure all tasks have IDs\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          id: task.id || `task-${Date.now()}-${index}`, // Generate ID if missing\n          ...task\n        }));\n        console.log(`Setting ${tasksWithIds.length} tasks`);\n        setTasks(tasksWithIds);\n      }\n\n      // Fetch employees\n      console.log('Fetching employees...');\n      const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n      console.log('Employees Response:', employeesResponse);\n      \n      if (Array.isArray(employeesResponse.data)) {\n        console.log('Setting employees:', employeesResponse.data);\n        setEmployees(employeesResponse.data);\n      }\n      \n      console.log('Employees fetched:', employeesResponse.data);\n\n      // Fetch employee-department pairs\n      const employeeDepartmentsResponse = await axios.get('http://localhost:5000/api/employee-departments');\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        console.log('Setting employee-departments:', employeeDepartmentsResponse.data);\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        console.log('No employee-departments data found, setting empty array');\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n')\n      .filter(pair => pair.trim() !== '')\n      .map(pair => {\n        const [employee, department, email] = pair.split(';').map(item => item.trim());\n        return { employee, department, email };\n      })\n      .filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const { value } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    \n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      console.log('=== BULK DATA SUBMISSION STARTED ===');\n      console.log('Parsed employee-department pairs:', parsedEmployeeDepartment);\n\n      // Save employee-department pairs if there are any\n      if (parsedEmployeeDepartment.length > 0) {\n        try {\n          const existingIndex = parsedEmployeeDepartment.findIndex(e => \n            e.employee.toLowerCase() === pair.employee.toLowerCase()\n          );\n          const employeeResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: parsedEmployeeDepartment\n          });\n          \n          console.log('Employee-department response:', employeeResponse.data);\n          \n          if (employeeResponse.data.updatedCount > 0) {\n            alert(`Successfully updated ${employeeResponse.data.updatedCount} employee-department entries`);\n          } else {\n            alert('No employee-department entries were updated');\n          }\n          \n          // Refresh the data\n          await fetchData();\n          \n          // Reset form fields\n          setBulkEmployeeDepartment('');\n          setParsedEmployeeDepartment([]);\n          \n        } catch (error) {\n          console.error('Error updating employee-departments:', error);\n          alert(error.response?.data?.error || 'Failed to update employee-departments');\n          return;\n        }\n      }\n\n      // Reset form fields\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n    } catch (error) {\n      console.error('Error in bulk data submission:', error);\n      alert(`Failed to save data: ${error.message}\\nPlease try again.`);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // Find the selected task from the tasks list\n      const selectedTask = tasks.find(t => t.name === task.taskName);\n\n      // Check for duplicates if this is a new task (case-insensitive)\n      if (!selectedTask) {\n        const isDuplicate = tasks.some(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n        if (isDuplicate) {\n          alert('A task with this name already exists. Please choose a different name.');\n          return;\n        }\n      }\n      \n      const taskData = {\n        id: selectedTask?.id, // Use the ID of the existing task if found\n        name: task.taskName,\n        employee: task.employee,\n        department: employees.find(emp => emp.name === task.employee)?.department || '',\n        date: task.date,\n        status: selectedTask?.status || 'pending',\n        comments: task.comments,\n        email: employees.find(emp => emp.name === task.employee)?.email || ''\n      };\n\n      console.log('Submitting task:', taskData);\n\n      let response;\n      if (selectedTask?.id) {\n        // Update existing task\n        response = await axios.put(`http://localhost:5000/api/tasks/${selectedTask.id}`, taskData);\n        console.log('Task updated:', response.data);\n      } else {\n        // Create new task\n        response = await axios.post('http://localhost:5000/api/tasks', taskData);\n        console.log('Task created:', response.data);\n      }\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Show success message\n      alert(selectedTask?.id ? 'Task updated successfully!' : 'Task created successfully!');\n\n      // Refresh tasks list\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      if (Array.isArray(tasksResponse.data)) {\n        setTasks(tasksResponse.data);\n      }\n    } catch (error) {\n      console.error('Error saving task:', error);\n      const errorMessage = error.response?.data?.error || error.message;\n      alert(`Error ${task.id ? 'updating' : 'creating'} task: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n\n  const handleCheckTask = (taskId) => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Bulk Inputs Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Bulk Data Input</h2>\n        \n        <div className=\"flex space-x-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkEmployeeDepartment\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Employee-Department-Mail Input (format: employee;department;email)\n            </label>\n            <textarea\n              id=\"bulkEmployeeDepartment\"\n              value={bulkEmployeeDepartment}\n              onChange={handleBulkEmployeeDepartmentChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n            </p>\n          </div>\n        </div>\n\n        {/* Save and Delete Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n          \n          <button\n            type=\"button\"\n            onClick={handleDeleteAllData}\n            className=\"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\"\n          >\n            Delete All Items\n          </button>\n        </div>\n      </div>\n\n      {/* Individual Task Form */}\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Create Task</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Selection Dropdown */}\n          <div>\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Task\n            </label>\n            <select\n              id=\"taskName\"\n              name=\"taskName\"\n              value={task.taskName}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select a task</option>\n              {tasks.map((taskItem, index) => (\n                <option \n                  key={taskItem.id || `new-task-${index}-${taskItem.name}`}\n                  value={taskItem.name}\n                >\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div>\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {uniqueEmployees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div>\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div>\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"email\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n                employees.find(emp => emp.name === task.employee)?.email || \n                ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div>\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Due Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div>\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center pt-4\">\n            <button\n              type=\"submit\"\n              className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            >\n              Update Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
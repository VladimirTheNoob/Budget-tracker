{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\AdminRoleManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { ROLES } from '../config/roles';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminRoleManager = ({\n  currentUserRole\n}) => {\n  _s();\n  const [userRoles, setUserRoles] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [newRole, setNewRole] = useState({\n    employeeId: '',\n    email: '',\n    role: ROLES.EMPLOYEE\n  });\n  const [error, setError] = useState(null);\n  const [authStatus, setAuthStatus] = useState(null);\n  useEffect(() => {\n    // Check current user's role\n    const checkUserRole = async () => {\n      try {\n        var _response$data$user;\n        const response = await axios.get('http://localhost:5000/auth/status', {\n          withCredentials: true\n        });\n        console.log('Admin Role Manager - Auth Status:', {\n          authenticated: response.data.authenticated,\n          role: response.data.role,\n          user: response.data.user,\n          passedRole: currentUserRole\n        });\n\n        // Determine the role to use\n        const resolvedRole = currentUserRole || response.data.role || (((_response$data$user = response.data.user) === null || _response$data$user === void 0 ? void 0 : _response$data$user.email) === 'belyakovvladimirs@gmail.com' ? ROLES.ADMIN : ROLES.EMPLOYEE);\n        console.log('Resolved Role:', resolvedRole);\n\n        // Only fetch roles if user is an admin\n        if (resolvedRole === ROLES.ADMIN) {\n          console.log('Fetching user roles for admin');\n          fetchUserRoles();\n          fetchEmployees();\n        } else {\n          console.log('Not an admin, cannot fetch roles');\n        }\n        setAuthStatus(response.data);\n      } catch (error) {\n        console.error('Error checking user role:', error);\n        toast.error('Failed to check user role');\n      }\n    };\n    checkUserRole();\n  }, [currentUserRole]);\n  const fetchUserRoles = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/roles', {\n        withCredentials: true\n      });\n      setUserRoles(response.data);\n    } catch (error) {\n      console.error('Error fetching user roles:', error);\n      toast.error('Failed to fetch user roles');\n    }\n  };\n  const fetchEmployees = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/employees', {\n        withCredentials: true\n      });\n      setEmployees(response.data);\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      toast.error('Failed to fetch employees');\n    }\n  };\n  const handleEmployeeChange = e => {\n    const employeeId = e.target.value;\n    const selectedEmployee = employees.find(emp => emp.id === employeeId);\n    setNewRole(prev => ({\n      ...prev,\n      employeeId,\n      email: (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.email) || ''\n    }));\n  };\n  const handleRoleUpdate = async e => {\n    e.preventDefault();\n    try {\n      var _authStatus$user, _authStatus$user2, _authStatus$user2$ema, _authStatus$user2$ema2;\n      const {\n        employeeId,\n        role\n      } = newRole;\n      console.log('Attempting to update role:', {\n        employeeId,\n        role\n      });\n\n      // Validate inputs\n      if (!employeeId || !role) {\n        toast.error('Please select an employee and a role');\n        return;\n      }\n\n      // Extract user email safely\n      const userEmail = ((_authStatus$user = authStatus.user) === null || _authStatus$user === void 0 ? void 0 : _authStatus$user.email) || ((_authStatus$user2 = authStatus.user) === null || _authStatus$user2 === void 0 ? void 0 : (_authStatus$user2$ema = _authStatus$user2.emails) === null || _authStatus$user2$ema === void 0 ? void 0 : (_authStatus$user2$ema2 = _authStatus$user2$ema[0]) === null || _authStatus$user2$ema2 === void 0 ? void 0 : _authStatus$user2$ema2.value) || null;\n      console.log('User Email for Role Update:', userEmail);\n\n      // Validate user email\n      if (!userEmail) {\n        toast.error('Cannot update role: User email is undefined');\n        return;\n      }\n\n      // Find the employee in the list\n      const employeeToUpdate = employees.find(emp => emp.id === employeeId);\n      if (!employeeToUpdate) {\n        toast.error('Employee not found');\n        return;\n      }\n\n      // Prevent role change for specific email\n      if (employeeToUpdate.email === 'belyakovvladimirs@gmail.com') {\n        toast.error('Cannot change role for this user');\n        return;\n      }\n\n      // Prepare role update payload\n      const updatePayload = {\n        employeeId: employeeId,\n        role: role\n      };\n      console.log('Role Update Payload:', updatePayload);\n\n      // Make API call to update role\n      const response = await axios.put('http://localhost:5000/api/roles', updatePayload, {\n        withCredentials: true\n      });\n      console.log('Role Update Response:', response.data);\n\n      // Refetch the latest roles from the server\n      const rolesResponse = await axios.get('/api/roles');\n      console.log('Refetched User Roles:', rolesResponse.data);\n      setUserRoles(rolesResponse.data);\n\n      // Reset form\n      setNewRole({\n        employeeId: '',\n        email: '',\n        role: ROLES.EMPLOYEE\n      });\n\n      // Show success notification\n      toast.success(`Role updated to ${role} for ${employeeToUpdate.name}`);\n    } catch (error) {\n      console.error('Error updating role:', error);\n\n      // Detailed error logging\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        console.error('Server Error Details:', error.response.data);\n        toast.error(error.response.data.message || 'Failed to update role');\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response received:', error.request);\n        toast.error('No response from server');\n      } else {\n        // Something happened in setting up the request\n        console.error('Error setting up request:', error.message);\n        toast.error('Error updating role');\n      }\n    }\n  };\n\n  // Prevent non-admin access\n  if (![ROLES.ADMIN].includes(currentUserRole)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 text-center text-red-600\",\n      children: \"Access Denied: Administrator privileges required\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"top-right\",\n      toastOptions: {\n        success: {\n          duration: 3000\n        },\n        error: {\n          duration: 5000\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6 shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"Role Management\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleRoleUpdate,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            value: newRole.employeeId,\n            onChange: handleEmployeeChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.id,\n              children: employee.name\n            }, employee.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"User Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            value: newRole.email,\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400 bg-gray-100\",\n            placeholder: \"Employee email will appear here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"role\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"role\",\n            value: newRole.role,\n            onChange: e => setNewRole(prev => ({\n              ...prev,\n              role: e.target.value\n            })),\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: ROLES.EMPLOYEE,\n              children: \"Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: ROLES.MANAGER,\n              children: \"Manager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: ROLES.ADMIN,\n              children: \"Admin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition duration-300\",\n          children: \"Update Role\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Current User Roles\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), userRoles.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-gray-500\",\n          children: \"No user roles found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"w-full border-collapse border border-gray-300\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"bg-gray-100\",\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-300 p-2\",\n                children: \"User Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"border border-gray-300 p-2\",\n                children: \"Role\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: userRoles.map((role, index) => {\n              // Find the employee corresponding to this role\n              const employee = employees.find(emp => emp.id === role.employeeId);\n\n              // Add console log to debug role mapping\n              console.log('Role Mapping Debug:', {\n                roleEntry: role,\n                matchedEmployee: employee,\n                employeesList: employees\n              });\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-50\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"border border-gray-300 p-2\",\n                  children: employee ? employee.email : 'Unknown Email'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"border border-gray-300 p-2\",\n                  children: role.role\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminRoleManager, \"Nkv7lqQ5cipmesH89eSUR+1dU/Q=\");\n_c = AdminRoleManager;\nexport default AdminRoleManager;\nvar _c;\n$RefreshReg$(_c, \"AdminRoleManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","Link","ROLES","Toaster","toast","jsxDEV","_jsxDEV","AdminRoleManager","currentUserRole","_s","userRoles","setUserRoles","employees","setEmployees","newRole","setNewRole","employeeId","email","role","EMPLOYEE","error","setError","authStatus","setAuthStatus","checkUserRole","_response$data$user","response","get","withCredentials","console","log","authenticated","data","user","passedRole","resolvedRole","ADMIN","fetchUserRoles","fetchEmployees","handleEmployeeChange","e","target","value","selectedEmployee","find","emp","id","prev","handleRoleUpdate","preventDefault","_authStatus$user","_authStatus$user2","_authStatus$user2$ema","_authStatus$user2$ema2","userEmail","emails","employeeToUpdate","updatePayload","put","rolesResponse","success","name","message","request","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","position","toastOptions","duration","onSubmit","htmlFor","onChange","required","map","employee","type","readOnly","placeholder","MANAGER","length","index","roleEntry","matchedEmployee","employeesList","_c","$RefreshReg$"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/AdminRoleManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { ROLES } from '../config/roles';\nimport { Toaster, toast } from 'react-hot-toast';\n\nconst AdminRoleManager = ({ currentUserRole }) => {\n  const [userRoles, setUserRoles] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [newRole, setNewRole] = useState({\n    employeeId: '',\n    email: '',\n    role: ROLES.EMPLOYEE\n  });\n  const [error, setError] = useState(null);\n  const [authStatus, setAuthStatus] = useState(null);\n\n  useEffect(() => {\n    // Check current user's role\n    const checkUserRole = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/auth/status', { \n          withCredentials: true \n        });\n        \n        console.log('Admin Role Manager - Auth Status:', {\n          authenticated: response.data.authenticated,\n          role: response.data.role,\n          user: response.data.user,\n          passedRole: currentUserRole\n        });\n        \n        // Determine the role to use\n        const resolvedRole = currentUserRole || \n          response.data.role || \n          (response.data.user?.email === 'belyakovvladimirs@gmail.com' ? ROLES.ADMIN : ROLES.EMPLOYEE);\n        \n        console.log('Resolved Role:', resolvedRole);\n        \n        // Only fetch roles if user is an admin\n        if (resolvedRole === ROLES.ADMIN) {\n          console.log('Fetching user roles for admin');\n          fetchUserRoles();\n          fetchEmployees();\n        } else {\n          console.log('Not an admin, cannot fetch roles');\n        }\n\n        setAuthStatus(response.data);\n      } catch (error) {\n        console.error('Error checking user role:', error);\n        toast.error('Failed to check user role');\n      }\n    };\n\n    checkUserRole();\n  }, [currentUserRole]);\n\n  const fetchUserRoles = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/roles', { \n        withCredentials: true \n      });\n      setUserRoles(response.data);\n    } catch (error) {\n      console.error('Error fetching user roles:', error);\n      toast.error('Failed to fetch user roles');\n    }\n  };\n\n  const fetchEmployees = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/employees', {\n        withCredentials: true\n      });\n      setEmployees(response.data);\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n      toast.error('Failed to fetch employees');\n    }\n  };\n\n  const handleEmployeeChange = (e) => {\n    const employeeId = e.target.value;\n    const selectedEmployee = employees.find(emp => emp.id === employeeId);\n    setNewRole(prev => ({\n      ...prev,\n      employeeId,\n      email: selectedEmployee?.email || ''\n    }));\n  };\n\n  const handleRoleUpdate = async (e) => {\n    e.preventDefault();\n    \n    try {\n      const { employeeId, role } = newRole;\n      \n      console.log('Attempting to update role:', { employeeId, role });\n\n      // Validate inputs\n      if (!employeeId || !role) {\n        toast.error('Please select an employee and a role');\n        return;\n      }\n\n      // Extract user email safely\n      const userEmail = \n        authStatus.user?.email || \n        authStatus.user?.emails?.[0]?.value || \n        null;\n\n      console.log('User Email for Role Update:', userEmail);\n\n      // Validate user email\n      if (!userEmail) {\n        toast.error('Cannot update role: User email is undefined');\n        return;\n      }\n\n      // Find the employee in the list\n      const employeeToUpdate = employees.find(emp => emp.id === employeeId);\n\n      if (!employeeToUpdate) {\n        toast.error('Employee not found');\n        return;\n      }\n\n      // Prevent role change for specific email\n      if (employeeToUpdate.email === 'belyakovvladimirs@gmail.com') {\n        toast.error('Cannot change role for this user');\n        return;\n      }\n\n      // Prepare role update payload\n      const updatePayload = {\n        employeeId: employeeId,\n        role: role\n      };\n\n      console.log('Role Update Payload:', updatePayload);\n\n      // Make API call to update role\n      const response = await axios.put(\n        'http://localhost:5000/api/roles', \n        updatePayload, \n        { withCredentials: true }\n      );\n\n      console.log('Role Update Response:', response.data);\n\n      // Refetch the latest roles from the server\n      const rolesResponse = await axios.get('/api/roles');\n      console.log('Refetched User Roles:', rolesResponse.data);\n      setUserRoles(rolesResponse.data);\n\n      // Reset form\n      setNewRole({\n        employeeId: '',\n        email: '',\n        role: ROLES.EMPLOYEE\n      });\n\n      // Show success notification\n      toast.success(`Role updated to ${role} for ${employeeToUpdate.name}`);\n\n    } catch (error) {\n      console.error('Error updating role:', error);\n      \n      // Detailed error logging\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        console.error('Server Error Details:', error.response.data);\n        toast.error(error.response.data.message || 'Failed to update role');\n      } else if (error.request) {\n        // The request was made but no response was received\n        console.error('No response received:', error.request);\n        toast.error('No response from server');\n      } else {\n        // Something happened in setting up the request\n        console.error('Error setting up request:', error.message);\n        toast.error('Error updating role');\n      }\n    }\n  };\n\n  // Prevent non-admin access\n  if (![ROLES.ADMIN].includes(currentUserRole)) {\n    return (\n      <div className=\"p-4 text-center text-red-600\">\n        Access Denied: Administrator privileges required\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      <Toaster \n        position=\"top-right\" \n        toastOptions={{\n          success: { duration: 3000 },\n          error: { duration: 5000 }\n        }} \n      />\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6 shadow-md\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Role Management</h2>\n\n        {/* Role Assignment Form */}\n        <form onSubmit={handleRoleUpdate} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"employee\" className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              value={newRole.employeeId}\n              onChange={handleEmployeeChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {employees.map(employee => (\n                <option key={employee.id} value={employee.id}>\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-gray-700 text-sm font-medium mb-2\">\n              User Email\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              value={newRole.email}\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400 bg-gray-100\"\n              placeholder=\"Employee email will appear here\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"role\" className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Select Role\n            </label>\n            <select\n              id=\"role\"\n              value={newRole.role}\n              onChange={(e) => setNewRole(prev => ({ ...prev, role: e.target.value }))}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value={ROLES.EMPLOYEE}>Employee</option>\n              <option value={ROLES.MANAGER}>Manager</option>\n              <option value={ROLES.ADMIN}>Admin</option>\n            </select>\n          </div>\n\n          <button \n            type=\"submit\" \n            className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition duration-300\"\n          >\n            Update Role\n          </button>\n        </form>\n\n        {/* User Roles List */}\n        <div className=\"mt-8\">\n          <h3 className=\"text-xl font-semibold mb-4\">Current User Roles</h3>\n          {userRoles.length === 0 ? (\n            <p className=\"text-center text-gray-500\">No user roles found</p>\n          ) : (\n            <table className=\"w-full border-collapse border border-gray-300\">\n              <thead>\n                <tr className=\"bg-gray-100\">\n                  <th className=\"border border-gray-300 p-2\">User Email</th>\n                  <th className=\"border border-gray-300 p-2\">Role</th>\n                </tr>\n              </thead>\n              <tbody>\n                {userRoles.map((role, index) => {\n                  // Find the employee corresponding to this role\n                  const employee = employees.find(emp => emp.id === role.employeeId);\n                  \n                  // Add console log to debug role mapping\n                  console.log('Role Mapping Debug:', {\n                    roleEntry: role,\n                    matchedEmployee: employee,\n                    employeesList: employees\n                  });\n\n                  return (\n                    <tr key={index} className=\"hover:bg-gray-50\">\n                      <td className=\"border border-gray-300 p-2\">\n                        {employee ? employee.email : 'Unknown Email'}\n                      </td>\n                      <td className=\"border border-gray-300 p-2\">{role.role}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminRoleManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
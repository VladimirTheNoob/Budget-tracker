{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    description: '',\n    employee: '',\n    department: '',\n    dueDate: '',\n    status: 'pending'\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000 // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n\n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department pairs (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department\n      };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending bulk tasks:', {\n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response2;\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: (_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.data,\n            status: (_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status,\n            config: apiError.config,\n            requestData: {\n              tasks: tasksData\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending employee-department pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: formattedPairs\n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n\n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          var _apiError$response3, _apiError$response4;\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: (_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.data,\n            status: (_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : _apiError$response4.status,\n            config: apiError.config,\n            requestData: {\n              employeeDepartments: formattedPairs\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        config: error.config,\n        stack: error.stack\n      });\n      alert(`Error saving bulk data: \n        ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}\n        \n        Status: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'Unknown'}\n        Details: ${JSON.stringify((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        description: '',\n        employee: '',\n        department: '',\n        dueDate: '',\n        status: 'pending'\n      });\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response8, _error$response8$data;\n      console.error('Error creating task:', {\n        message: error.message,\n        response: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n        status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status\n      });\n      alert(`Error creating task: ${((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"max-w-md mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-6\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"taskName\",\n          className: \"block mb-2\",\n          children: \"Task Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"taskName\",\n          name: \"taskName\",\n          value: task.taskName,\n          onChange: handleChange,\n          className: \"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          className: \"block mb-2\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          value: task.description,\n          onChange: handleChange,\n          className: \"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          rows: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"employee\",\n          className: \"block mb-2\",\n          children: \"Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"employee\",\n          name: \"employee\",\n          value: task.employee,\n          onChange: handleChange,\n          className: \"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select an employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), employees.map((employee, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: employee.name,\n            children: employee.name\n          }, `employee-${employee.id || index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"department\",\n          className: \"block mb-2\",\n          children: \"Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"department\",\n          name: \"department\",\n          value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n          readOnly: true,\n          className: \"w-full px-3 py-2 border rounded-md bg-gray-100 cursor-not-allowed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dueDate\",\n          className: \"block mb-2\",\n          children: \"Due Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"dueDate\",\n          name: \"dueDate\",\n          value: task.dueDate,\n          onChange: handleChange,\n          className: \"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"status\",\n          className: \"block mb-2\",\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"status\",\n          name: \"status\",\n          value: task.status,\n          onChange: handleChange,\n          className: \"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"pending\",\n            children: \"Pending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"in progress\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"completed\",\n            children: \"Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"w-full px-4 py-2 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskInput","_employees$find","task","setTask","taskName","description","employee","department","dueDate","status","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","fetchData","console","log","tasksResponse","get","timeout","data","headers","Array","isArray","length","error","employeesResponse","response","request","message","alert","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","employeeDepartment","map","item","handleTaskSelection","selectedValue","prev","handleChange","name","selectedEmployee","find","emp","prevTask","handleBulkDataSubmission","tasksData","createdAt","Date","toISOString","requestDetails","url","method","post","apiError","_apiError$response","_apiError$response2","config","requestData","formattedPairs","employeeDepartments","pairsResponse","_apiError$response3","_apiError$response4","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","stack","JSON","stringify","handleSubmit","preventDefault","_error$response6","_error$response7","_error$response8","_error$response8$data","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","required","rows","index","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TaskInput = () => {\r\n  // State to manage form inputs\r\n  const [task, setTask] = useState({\r\n    taskName: '',\r\n    description: '',\r\n    employee: '',\r\n    department: '',\r\n    dueDate: '',\r\n    status: 'pending'\r\n  });\r\n\r\n  // State for bulk tasks\r\n  const [bulkTasks, setBulkTasks] = useState('');\r\n  const [parsedTasks, setParsedTasks] = useState([]);\r\n\r\n  // State for employee-department input\r\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\r\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\r\n\r\n  // State for fetched tasks and employees\r\n  const [tasks, setTasks] = useState([]);\r\n  const [employees, setEmployees] = useState([]);\r\n\r\n  // Fetch tasks and employees data when the component mounts\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\r\n        \r\n        // Fetch tasks\r\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\r\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\r\n          timeout: 10000  // 10-second timeout\r\n        });\r\n        console.log('Tasks Response:', {\r\n          status: tasksResponse.status,\r\n          data: tasksResponse.data,\r\n          headers: tasksResponse.headers\r\n        });\r\n\r\n        // Validate and set tasks\r\n        if (Array.isArray(tasksResponse.data)) {\r\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\r\n          setTasks(tasksResponse.data);\r\n        } else {\r\n          console.error('Tasks response is not an array:', tasksResponse.data);\r\n          setTasks([]);\r\n        }\r\n\r\n        // Fetch employees\r\n        console.log('Fetching employees...');\r\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\r\n          timeout: 10000\r\n        });\r\n        console.log('Employees fetched:', employeesResponse.data);\r\n        if (Array.isArray(employeesResponse.data)) {\r\n          setEmployees(employeesResponse.data);\r\n        } else {\r\n          console.error('Employees response is not an array:', employeesResponse.data);\r\n          setEmployees([]);\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\r\n        \r\n        // Detailed error logging\r\n        if (error.response) {\r\n          console.error('Server Response Error:', {\r\n            status: error.response.status,\r\n            data: error.response.data,\r\n            headers: error.response.headers\r\n          });\r\n        } else if (error.request) {\r\n          console.error('No Response Received:', error.request);\r\n        } else {\r\n          console.error('Request Setup Error:', error.message);\r\n        }\r\n\r\n        // Set empty arrays to prevent undefined errors\r\n        setTasks([]);\r\n        setEmployees([]);\r\n\r\n        // User-friendly error message\r\n        alert(`Failed to fetch tasks or employees: \r\n          ${error.message}\r\n          \r\n          Please check your server connection and try again.\r\n        `);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Handle bulk tasks input\r\n  const handleBulkTasksChange = (e) => {\r\n    const value = e.target.value;\r\n    setBulkTasks(value);\r\n    // Parse tasks (split by new line)\r\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\r\n    setParsedTasks(tasks);\r\n  };\r\n\r\n  // Handle employee-department input\r\n  const handleBulkEmployeeDepartmentChange = (e) => {\r\n    const value = e.target.value;\r\n    setBulkEmployeeDepartment(value);\r\n    // Parse employee-department pairs (split by new line and delimiter)\r\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\r\n    const employeeDepartment = pairs.map(pair => {\r\n      const [employee, department] = pair.split(';').map(item => item.trim());\r\n      return { employee, department };\r\n    });\r\n    setParsedEmployeeDepartment(employeeDepartment);\r\n  };\r\n\r\n  // Handle task selection from parsed tasks\r\n  const handleTaskSelection = (e) => {\r\n    const selectedValue = e.target.value;\r\n    setTask(prev => ({\r\n      ...prev,\r\n      taskName: selectedValue\r\n    }));\r\n  };\r\n\r\n  // Handle input changes\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'employee') {\r\n      // Find the selected employee to get their department\r\n      const selectedEmployee = employees.find(emp => emp.name === value);\r\n      setTask(prevTask => ({\r\n        ...prevTask,\r\n        employee: value,\r\n        department: selectedEmployee ? selectedEmployee.department : ''\r\n      }));\r\n    } else {\r\n      setTask(prevTask => ({\r\n        ...prevTask,\r\n        [name]: value\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Handle bulk data submission\r\n  const handleBulkDataSubmission = async () => {\r\n    try {\r\n      // Save tasks to database\r\n      if (parsedTasks.length > 0) {\r\n        console.log('Preparing bulk tasks data:', parsedTasks);\r\n        const tasksData = parsedTasks.map(taskName => ({ \r\n          name: taskName.trim(),\r\n          status: 'pending',\r\n          createdAt: new Date().toISOString()\r\n        }));\r\n        \r\n        console.log('Sending bulk tasks:', { \r\n          tasks: tasksData,\r\n          requestDetails: {\r\n            url: 'http://localhost:5000/api/bulk-tasks',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            }\r\n          }\r\n        });\r\n\r\n        try {\r\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \r\n            tasks: tasksData \r\n          }, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            }\r\n          });\r\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\r\n        } catch (apiError) {\r\n          console.error('Detailed API Error for Bulk Tasks:', {\r\n            message: apiError.message,\r\n            response: apiError.response?.data,\r\n            status: apiError.response?.status,\r\n            config: apiError.config,\r\n            requestData: { tasks: tasksData }\r\n          });\r\n          throw apiError;\r\n        }\r\n      }\r\n\r\n      // Save employee-department pairs to database\r\n      if (parsedEmployeeDepartment.length > 0) {\r\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\r\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\r\n          employee: pair.employee.trim(),\r\n          department: pair.department.trim(),\r\n          createdAt: new Date().toISOString()\r\n        }));\r\n\r\n        console.log('Sending employee-department pairs:', { \r\n          employeeDepartments: formattedPairs,\r\n          requestDetails: {\r\n            url: 'http://localhost:5000/api/employee-departments',\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Accept': 'application/json'\r\n            }\r\n          }\r\n        });\r\n\r\n        try {\r\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', { \r\n            employeeDepartments: formattedPairs \r\n          });\r\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\r\n          \r\n          // Refresh employees list after successful submission\r\n          console.log('Refreshing employees list...');\r\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\r\n          if (Array.isArray(employeesResponse.data)) {\r\n            console.log('Updated employees list:', employeesResponse.data);\r\n            setEmployees(employeesResponse.data);\r\n          }\r\n        } catch (apiError) {\r\n          console.error('Detailed API Error for Employee-Departments:', {\r\n            message: apiError.message,\r\n            response: apiError.response?.data,\r\n            status: apiError.response?.status,\r\n            config: apiError.config,\r\n            requestData: { employeeDepartments: formattedPairs }\r\n          });\r\n          throw apiError;\r\n        }\r\n      }\r\n\r\n      // Clear bulk input fields after successful submission\r\n      setBulkTasks('');\r\n      setBulkEmployeeDepartment('');\r\n      setParsedTasks([]);\r\n      setParsedEmployeeDepartment([]);\r\n\r\n      // Show success message\r\n      alert('Bulk data saved successfully!');\r\n\r\n    } catch (error) {\r\n      console.error('Comprehensive Error saving bulk data:', {\r\n        message: error.message,\r\n        response: error.response?.data,\r\n        status: error.response?.status,\r\n        config: error.config,\r\n        stack: error.stack\r\n      });\r\n      \r\n      alert(`Error saving bulk data: \r\n        ${error.response?.data?.error || error.message}\r\n        \r\n        Status: ${error.response?.status || 'Unknown'}\r\n        Details: ${JSON.stringify(error.response?.data) || 'No additional details'}\r\n      `);\r\n    }\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // First save bulk data if any exists\r\n      await handleBulkDataSubmission();\r\n\r\n      // Then save the individual task\r\n      console.log('Sending individual task:', task);\r\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n      console.log('Task created:', response.data);\r\n      \r\n      // Reset form after successful submission\r\n      setTask({\r\n        taskName: '',\r\n        description: '',\r\n        employee: '',\r\n        department: '',\r\n        dueDate: '',\r\n        status: 'pending'\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating task:', {\r\n        message: error.message,\r\n        response: error.response?.data,\r\n        status: error.response?.status\r\n      });\r\n      alert(`Error creating task: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mx-auto\">\r\n      <form onSubmit={handleSubmit} className=\"max-w-md mx-auto\">\r\n        <h2 className=\"text-2xl font-semibold mb-6\">Create Task</h2>\r\n\r\n        {/* Task Name */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"taskName\" className=\"block mb-2\">\r\n            Task Name\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"taskName\"\r\n            name=\"taskName\"\r\n            value={task.taskName}\r\n            onChange={handleChange}\r\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        {/* Description */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"description\" className=\"block mb-2\">\r\n            Description\r\n          </label>\r\n          <textarea\r\n            id=\"description\"\r\n            name=\"description\"\r\n            value={task.description}\r\n            onChange={handleChange}\r\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        {/* Employee Dropdown */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"employee\" className=\"block mb-2\">\r\n            Employee\r\n          </label>\r\n          <select\r\n            id=\"employee\"\r\n            name=\"employee\"\r\n            value={task.employee}\r\n            onChange={handleChange}\r\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            required\r\n          >\r\n            <option value=\"\">Select an employee</option>\r\n            {employees.map((employee, index) => (\r\n              <option key={`employee-${employee.id || index}`} value={employee.name}>\r\n                {employee.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Department Display */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"department\" className=\"block mb-2\">\r\n            Department\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"department\"\r\n            name=\"department\"\r\n            value={employees.find(emp => emp.name === task.employee)?.department || ''}\r\n            readOnly\r\n            className=\"w-full px-3 py-2 border rounded-md bg-gray-100 cursor-not-allowed\"\r\n          />\r\n        </div>\r\n\r\n        {/* Due Date */}\r\n        <div className=\"mb-4\">\r\n          <label htmlFor=\"dueDate\" className=\"block mb-2\">\r\n            Due Date\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"dueDate\"\r\n            name=\"dueDate\"\r\n            value={task.dueDate}\r\n            onChange={handleChange}\r\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            required\r\n          />\r\n        </div>\r\n\r\n        {/* Status Dropdown */}\r\n        <div className=\"mb-6\">\r\n          <label htmlFor=\"status\" className=\"block mb-2\">\r\n            Status\r\n          </label>\r\n          <select\r\n            id=\"status\"\r\n            name=\"status\"\r\n            value={task.status}\r\n            onChange={handleChange}\r\n            className=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            required\r\n          >\r\n            <option value=\"pending\">Pending</option>\r\n            <option value=\"in progress\">In Progress</option>\r\n            <option value=\"completed\">Completed</option>\r\n          </select>\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <button\r\n          type=\"submit\"\r\n          className=\"w-full px-4 py-2 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\r\n        >\r\n          Create Task\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskList.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  refreshTrigger,\n  tasks,\n  employees\n}) => {\n  const [filters, setFilters] = useState({\n    status: 'all',\n    employee: 'all',\n    department: 'all'\n  });\n  const [groupBy, setGroupBy] = useState('none'); // none, employee, department\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n  const [notificationText, setNotificationText] = useState('');\n  const [uniqueTasks, setUniqueTasks] = useState([]);\n  const [bulkTaskInput, setBulkTaskInput] = useState('');\n\n  // Add deduplication for employees\n  const uniqueEmployees = [...new Map(employees.map(emp => [emp.id, emp])).values()];\n  useEffect(() => {\n    fetchData();\n  }, [refreshTrigger]);\n  useEffect(() => {\n    const seen = new Set();\n    const filtered = tasks.filter(task => {\n      const duplicate = seen.has(task.taskName);\n      seen.add(task.taskName);\n      return !duplicate;\n    });\n    setUniqueTasks(filtered);\n  }, [tasks]);\n  const fetchData = async () => {\n    try {\n      const [tasksRes, employeesRes] = await Promise.all([axios.get('http://localhost:5000/api/tasks'), axios.get('http://localhost:5000/api/employees')]);\n\n      // Process data but don't set state - it comes from props\n      const tasksWithIds = tasksRes.data.map((task, index) => ({\n        ...task,\n        id: task.id || `task-${Date.now()}-${index}`,\n        taskName: task.name\n      }));\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const getStatusClass = status => {\n    switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n  const filterTasks = tasks => {\n    return tasks.filter(task => {\n      if (filters.status !== 'all' && task.status !== filters.status) return false;\n      if (filters.employee !== 'all' && task.employee !== filters.employee) return false;\n      if (filters.department !== 'all' && task.department !== filters.department) return false;\n      return true;\n    });\n  };\n  const groupTasks = tasks => {\n    if (groupBy === 'none') return {\n      'All Tasks': tasks\n    };\n    return tasks.reduce((groups, task) => {\n      const key = task[groupBy] || 'Unassigned';\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(task);\n      return groups;\n    }, {});\n  };\n  const getUniqueDepartments = () => {\n    return [...new Set(employees.map(emp => emp.department))];\n  };\n  const filteredTasks = filterTasks(tasks);\n  const groupedTasks = groupTasks(filteredTasks);\n  const handleCheckTask = taskId => {\n    setCheckedTasks(prev => {\n      const newChecked = new Set(prev);\n      if (newChecked.has(taskId)) {\n        newChecked.delete(taskId);\n      } else {\n        newChecked.add(taskId);\n      }\n      return newChecked;\n    });\n  };\n  const handleSendNotifications = async () => {\n    if (checkedTasks.size === 0) {\n      alert('Please select at least one task to send notifications');\n      return;\n    }\n    if (!notificationText.trim()) {\n      alert('Please enter notification text');\n      return;\n    }\n    try {\n      var _response$data$result, _response$data$result2;\n      // Check authentication status first\n      const authResponse = await axios.get('http://localhost:5000/auth/status', {\n        withCredentials: true\n      });\n      if (!authResponse.data.authenticated) {\n        alert('Please log in to send notifications');\n        return;\n      }\n\n      // Get selected tasks with their employee emails\n      const selectedTasks = tasks.filter(task => checkedTasks.has(task.id));\n      const notifications = selectedTasks.map(task => {\n        var _employees$find;\n        const employeeEmail = (_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.email;\n        if (!employeeEmail) {\n          throw new Error(`No email found for employee: ${task.employee}`);\n        }\n        return {\n          taskId: task.id,\n          taskName: task.name,\n          employeeName: task.employee,\n          email: employeeEmail,\n          message: notificationText\n        };\n      });\n      console.log('Preparing to send notifications:', notifications);\n\n      // Send notifications to the backend with credentials\n      const response = await axios.post('http://localhost:5000/api/notifications/send', {\n        notifications\n      }, {\n        withCredentials: true,\n        // Include cookies for authentication\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Notifications sent:', response.data);\n\n      // Check response structure and handle accordingly\n      const successCount = ((_response$data$result = response.data.results) === null || _response$data$result === void 0 ? void 0 : _response$data$result.filter(r => r.success).length) || 0;\n      const failedCount = ((_response$data$result2 = response.data.results) === null || _response$data$result2 === void 0 ? void 0 : _response$data$result2.filter(r => !r.success).length) || 0;\n      if (successCount > 0) {\n        const successEmails = response.data.results.filter(r => r.success).map(r => r.email);\n        alert(`Notifications sent successfully:\\n\\n${successEmails.join('\\n')}`);\n\n        // Clear selections and text\n        setCheckedTasks(new Set());\n        setNotificationText('');\n      } else {\n        alert('No notifications were sent. Please check your selection and try again.');\n      }\n\n      // Log any failed notifications\n      if (failedCount > 0) {\n        const failedNotifications = response.data.results.filter(r => !r.success).map(r => `${r.email}: ${r.error}`);\n        console.warn('Failed notifications:', failedNotifications);\n      }\n    } catch (error) {\n      console.error('Error sending notifications:', error);\n\n      // More detailed error handling\n      if (error.response) {\n        var _error$response$data, _error$response$data2;\n        // The request was made and the server responded with a status code\n        const errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Unknown server error';\n        alert(`Failed to send notifications: ${errorMessage}`);\n      } else if (error.request) {\n        // The request was made but no response was received\n        alert('No response received from the server. Please check your network connection.');\n      } else {\n        // Something happened in setting up the request\n        alert(`Error: ${error.message}`);\n      }\n    }\n  };\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Validate and parse bulk tasks\n      const parsedTasks = bulkTaskInput.split('\\n').map(line => line.trim()).filter(line => line !== ''); // Remove empty lines\n\n      // Validate each task name\n      parsedTasks.forEach(taskName => {\n        // Check if task name is a single word (no spaces)\n        if (taskName.includes(' ')) {\n          throw new Error(`Invalid task name: \"${taskName}\". Task name must be a single word without spaces.`);\n        }\n      });\n\n      // Check for duplicate task names (case-sensitive)\n      const uniqueTaskNames = new Set(parsedTasks);\n      if (uniqueTaskNames.size !== parsedTasks.length) {\n        throw new Error('Duplicate task names are not allowed');\n      }\n\n      // Prepare tasks data\n      const tasksData = parsedTasks.map(taskName => ({\n        name: taskName,\n        employee: '',\n        // Empty by default\n        date: new Date().toISOString().split('T')[0],\n        // Current date\n        comments: '',\n        status: 'pending'\n      }));\n\n      // Send to server\n      const response = await axios.post('http://localhost:5000/api/bulk-tasks', {\n        tasks: tasksData\n      }, {\n        withCredentials: true\n      });\n\n      // Success handling\n      alert(`Successfully added ${response.data.tasksCount} tasks`);\n      setBulkTaskInput(''); // Clear input\n    } catch (error) {\n      // Error handling\n      alert(error.message || 'Failed to submit bulk tasks');\n      console.error('Bulk task submission error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-4 gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: filters.status,\n            onChange: e => setFilters({\n              ...filters,\n              status: e.target.value\n            }),\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Statuses\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"pending\",\n              children: \"Pending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"in progress\",\n              children: \"In Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"completed\",\n              children: \"Completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: filters.employee,\n            onChange: e => setFilters({\n              ...filters,\n              employee: e.target.value\n            }),\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Employees\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 15\n            }, this), uniqueEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: filters.department,\n            onChange: e => setFilters({\n              ...filters,\n              department: e.target.value\n            }),\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"all\",\n              children: \"All Departments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this), getUniqueDepartments().map(dept => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dept,\n              children: dept\n            }, dept, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Group By\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: groupBy,\n            onChange: e => setGroupBy(e.target.value),\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"none\",\n              children: \"No Grouping\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"employee\",\n              children: \"Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"department\",\n              children: \"Department\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-4 items-end\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Notification Text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: notificationText,\n            onChange: e => setNotificationText(e.target.value),\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"2\",\n            placeholder: \"Enter notification text to send to selected employees\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendNotifications,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: checkedTasks.size === 0 || !notificationText.trim(),\n          children: \"Send Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), Object.entries(groupedTasks).map(([group, tasks]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 border-b pb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold\",\n          children: group\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-x-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"min-w-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"bg-gray-50\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Department\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Due Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Actual end Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            className: \"bg-white divide-y divide-gray-200\",\n            children: tasks.map((task, index) => {\n              const taskId = task.id || `task-${Date.now()}-${index}`;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"hover:bg-gray-50\",\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: checkedTasks.has(taskId),\n                    onChange: () => handleCheckTask(taskId),\n                    className: \"h-4 w-4 text-black focus:ring-black border-gray-300 rounded\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: task.employee\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: task.department\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: task.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: task.endDate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"px-6 py-4 whitespace-nowrap\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(task.status)}`,\n                    children: task.status || 'Pending'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 423,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 23\n                }, this)]\n              }, `task-${taskId}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this)]\n    }, `group-${group}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskList;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskList","refreshTrigger","tasks","employees","filters","setFilters","status","employee","department","groupBy","setGroupBy","checkedTasks","setCheckedTasks","Set","notificationText","setNotificationText","uniqueTasks","setUniqueTasks","bulkTaskInput","setBulkTaskInput","uniqueEmployees","Map","map","emp","id","values","fetchData","seen","filtered","filter","task","duplicate","has","taskName","add","tasksRes","employeesRes","Promise","all","get","tasksWithIds","data","index","Date","now","name","error","console","getStatusClass","toLowerCase","filterTasks","groupTasks","reduce","groups","key","push","getUniqueDepartments","filteredTasks","groupedTasks","handleCheckTask","taskId","prev","newChecked","delete","handleSendNotifications","size","alert","trim","_response$data$result","_response$data$result2","authResponse","withCredentials","authenticated","selectedTasks","notifications","_employees$find","employeeEmail","find","email","Error","employeeName","message","log","response","post","headers","successCount","results","r","success","length","failedCount","successEmails","join","failedNotifications","warn","_error$response$data","_error$response$data2","errorMessage","request","handleBulkDataSubmission","parsedTasks","split","line","forEach","includes","uniqueTaskNames","tasksData","date","toISOString","comments","tasksCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","dept","rows","placeholder","onClick","disabled","Object","entries","group","type","checked","endDate"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskList = ({ refreshTrigger, tasks, employees }) => {\n  const [filters, setFilters] = useState({\n    status: 'all',\n    employee: 'all',\n    department: 'all',\n  });\n  const [groupBy, setGroupBy] = useState('none'); // none, employee, department\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n  const [notificationText, setNotificationText] = useState('');\n  const [uniqueTasks, setUniqueTasks] = useState([]);\n  const [bulkTaskInput, setBulkTaskInput] = useState('');\n\n  // Add deduplication for employees\n  const uniqueEmployees = [...new Map(employees.map(emp => \n    [emp.id, emp]\n  )).values()];\n\n  useEffect(() => {\n    fetchData();\n  }, [refreshTrigger]);\n\n  useEffect(() => {\n    const seen = new Set();\n    const filtered = tasks.filter(task => {\n      const duplicate = seen.has(task.taskName);\n      seen.add(task.taskName);\n      return !duplicate;\n    });\n    setUniqueTasks(filtered);\n  }, [tasks]);\n\n  const fetchData = async () => {\n    try {\n      const [tasksRes, employeesRes] = await Promise.all([\n        axios.get('http://localhost:5000/api/tasks'),\n        axios.get('http://localhost:5000/api/employees')\n      ]);\n      \n      // Process data but don't set state - it comes from props\n      const tasksWithIds = tasksRes.data.map((task, index) => ({\n        ...task,\n        id: task.id || `task-${Date.now()}-${index}`,\n        taskName: task.name\n      }));\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const getStatusClass = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filterTasks = (tasks) => {\n    return tasks.filter(task => {\n      if (filters.status !== 'all' && task.status !== filters.status) return false;\n      if (filters.employee !== 'all' && task.employee !== filters.employee) return false;\n      if (filters.department !== 'all' && task.department !== filters.department) return false;\n      return true;\n    });\n  };\n\n  const groupTasks = (tasks) => {\n    if (groupBy === 'none') return { 'All Tasks': tasks };\n    \n    return tasks.reduce((groups, task) => {\n      const key = task[groupBy] || 'Unassigned';\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(task);\n      return groups;\n    }, {});\n  };\n\n  const getUniqueDepartments = () => {\n    return [...new Set(employees.map(emp => emp.department))];\n  };\n\n  const filteredTasks = filterTasks(tasks);\n  const groupedTasks = groupTasks(filteredTasks);\n\n  const handleCheckTask = (taskId) => {\n    setCheckedTasks(prev => {\n      const newChecked = new Set(prev);\n      if (newChecked.has(taskId)) {\n        newChecked.delete(taskId);\n      } else {\n        newChecked.add(taskId);\n      }\n      return newChecked;\n    });\n  };\n\n  const handleSendNotifications = async () => {\n    if (checkedTasks.size === 0) {\n      alert('Please select at least one task to send notifications');\n      return;\n    }\n\n    if (!notificationText.trim()) {\n      alert('Please enter notification text');\n      return;\n    }\n\n    try {\n      // Check authentication status first\n      const authResponse = await axios.get('http://localhost:5000/auth/status', { \n        withCredentials: true \n      });\n\n      if (!authResponse.data.authenticated) {\n        alert('Please log in to send notifications');\n        return;\n      }\n\n      // Get selected tasks with their employee emails\n      const selectedTasks = tasks.filter(task => checkedTasks.has(task.id));\n      const notifications = selectedTasks.map(task => {\n        const employeeEmail = employees.find(emp => emp.name === task.employee)?.email;\n        if (!employeeEmail) {\n          throw new Error(`No email found for employee: ${task.employee}`);\n        }\n        return {\n          taskId: task.id,\n          taskName: task.name,\n          employeeName: task.employee,\n          email: employeeEmail,\n          message: notificationText\n        };\n      });\n\n      console.log('Preparing to send notifications:', notifications);\n\n      // Send notifications to the backend with credentials\n      const response = await axios.post(\n        'http://localhost:5000/api/notifications/send', \n        { notifications },\n        { \n          withCredentials: true,  // Include cookies for authentication\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      console.log('Notifications sent:', response.data);\n      \n      // Check response structure and handle accordingly\n      const successCount = response.data.results?.filter(r => r.success).length || 0;\n      const failedCount = response.data.results?.filter(r => !r.success).length || 0;\n\n      if (successCount > 0) {\n        const successEmails = response.data.results\n          .filter(r => r.success)\n          .map(r => r.email);\n        \n        alert(`Notifications sent successfully:\\n\\n${successEmails.join('\\n')}`);\n        \n        // Clear selections and text\n        setCheckedTasks(new Set());\n        setNotificationText('');\n      } else {\n        alert('No notifications were sent. Please check your selection and try again.');\n      }\n\n      // Log any failed notifications\n      if (failedCount > 0) {\n        const failedNotifications = response.data.results\n          .filter(r => !r.success)\n          .map(r => `${r.email}: ${r.error}`);\n        \n        console.warn('Failed notifications:', failedNotifications);\n      }\n    } catch (error) {\n      console.error('Error sending notifications:', error);\n      \n      // More detailed error handling\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        const errorMessage = error.response.data?.error || \n                             error.response.data?.message || \n                             'Unknown server error';\n        \n        alert(`Failed to send notifications: ${errorMessage}`);\n      } else if (error.request) {\n        // The request was made but no response was received\n        alert('No response received from the server. Please check your network connection.');\n      } else {\n        // Something happened in setting up the request\n        alert(`Error: ${error.message}`);\n      }\n    }\n  };\n\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Validate and parse bulk tasks\n      const parsedTasks = bulkTaskInput\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => line !== ''); // Remove empty lines\n\n      // Validate each task name\n      parsedTasks.forEach(taskName => {\n        // Check if task name is a single word (no spaces)\n        if (taskName.includes(' ')) {\n          throw new Error(`Invalid task name: \"${taskName}\". Task name must be a single word without spaces.`);\n        }\n      });\n\n      // Check for duplicate task names (case-sensitive)\n      const uniqueTaskNames = new Set(parsedTasks);\n      \n      if (uniqueTaskNames.size !== parsedTasks.length) {\n        throw new Error('Duplicate task names are not allowed');\n      }\n\n      // Prepare tasks data\n      const tasksData = parsedTasks.map(taskName => ({\n        name: taskName,\n        employee: '', // Empty by default\n        date: new Date().toISOString().split('T')[0], // Current date\n        comments: '',\n        status: 'pending'\n      }));\n\n      // Send to server\n      const response = await axios.post(\n        'http://localhost:5000/api/bulk-tasks', \n        { tasks: tasksData },\n        { withCredentials: true }\n      );\n\n      // Success handling\n      alert(`Successfully added ${response.data.tasksCount} tasks`);\n      setBulkTaskInput(''); // Clear input\n    } catch (error) {\n      // Error handling\n      alert(error.message || 'Failed to submit bulk tasks');\n      console.error('Bulk task submission error:', error);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Filters */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Filters</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div>\n            <label className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Status\n            </label>\n            <select\n              value={filters.status}\n              onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n            >\n              <option value=\"all\">All Statuses</option>\n              <option value=\"pending\">Pending</option>\n              <option value=\"in progress\">In Progress</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Employee\n            </label>\n            <select\n              value={filters.employee}\n              onChange={(e) => setFilters({ ...filters, employee: e.target.value })}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n            >\n              <option value=\"all\">All Employees</option>\n              {uniqueEmployees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Department\n            </label>\n            <select\n              value={filters.department}\n              onChange={(e) => setFilters({ ...filters, department: e.target.value })}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n            >\n              <option value=\"all\">All Departments</option>\n              {getUniqueDepartments().map(dept => (\n                <option key={dept} value={dept}>{dept}</option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Group By\n            </label>\n            <select\n              value={groupBy}\n              onChange={(e) => setGroupBy(e.target.value)}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n            >\n              <option value=\"none\">No Grouping</option>\n              <option value=\"employee\">Employee</option>\n              <option value=\"department\">Department</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Notification Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <div className=\"flex space-x-4 items-end\">\n          <div className=\"flex-grow\">\n            <label className=\"block text-gray-700 text-sm font-medium mb-2\">\n              Notification Text\n            </label>\n            <textarea\n              value={notificationText}\n              onChange={(e) => setNotificationText(e.target.value)}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"2\"\n              placeholder=\"Enter notification text to send to selected employees\"\n            />\n          </div>\n          <button\n            onClick={handleSendNotifications}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={checkedTasks.size === 0 || !notificationText.trim()}\n          >\n            Send Notifications\n          </button>\n        </div>\n      </div>\n\n      {/* Tasks Table */}\n      {Object.entries(groupedTasks).map(([group, tasks]) => (\n        <div key={`group-${group}`} className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n          <div className=\"mb-4 border-b pb-4\">\n            <h3 className=\"text-lg font-semibold\">{group}</h3>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Select\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Task\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Employee\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Department\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Due Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actual end Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {tasks.map((task, index) => {\n                  const taskId = task.id || `task-${Date.now()}-${index}`;\n                  return (\n                    <tr \n                      key={`task-${taskId}`}\n                      className=\"hover:bg-gray-50\"\n                    >\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <input\n                          type=\"checkbox\"\n                          checked={checkedTasks.has(taskId)}\n                          onChange={() => handleCheckTask(taskId)}\n                          className=\"h-4 w-4 text-black focus:ring-black border-gray-300 rounded\"\n                        />\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {task.name}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {task.employee}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {task.department}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {task.date}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {task.endDate}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(task.status)}`}>\n                          {task.status || 'Pending'}\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TaskList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
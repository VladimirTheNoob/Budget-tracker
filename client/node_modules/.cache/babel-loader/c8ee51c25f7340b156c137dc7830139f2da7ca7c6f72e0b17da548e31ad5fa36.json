{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find, _parsedEmployeeDepart, _employees$find2;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    const fetchData = async () => {\n      try {\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n        console.log('Tasks Response:', tasksResponse);\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n        console.log('Employees Response:', employeesResponse);\n        if (Array.isArray(employeesResponse.data)) {\n          console.log('Setting employees:', employeesResponse.data);\n          setEmployees(employeesResponse.data);\n        }\n        console.log('Employees fetched:', employeesResponse.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending bulk tasks:', {\n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response2;\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: (_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.data,\n            status: (_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status,\n            config: apiError.config,\n            requestData: {\n              tasks: tasksData\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending employee-department pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: formattedPairs\n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n\n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          var _apiError$response3, _apiError$response4;\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: (_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.data,\n            status: (_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : _apiError$response4.status,\n            config: apiError.config,\n            requestData: {\n              employeeDepartments: formattedPairs\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        config: error.config,\n        stack: error.stack\n      });\n      alert(`Error saving bulk data: \n        ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}\n        \n        Status: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'Unknown'}\n        Details: ${JSON.stringify((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response8, _error$response8$data;\n      console.error('Error creating task:', {\n        message: error.message,\n        response: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n        status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status\n      });\n      alert(`Error creating task: ${((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-6 text-center\",\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2 mr-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bulkTasks\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Bulk Tasks Input (one task per line)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"bulkTasks\",\n          value: bulkTasks,\n          onChange: handleBulkTasksChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          rows: \"5\",\n          placeholder: \"Enter multiple tasks, one per line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mt-1\",\n          children: [parsedTasks.length, \" tasks ready to be saved\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bulkEmployeeDepartment\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"bulkEmployeeDepartment\",\n          value: bulkEmployeeDepartment,\n          onChange: handleBulkEmployeeDepartmentChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          rows: \"5\",\n          placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mt-1\",\n          children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 flex justify-center space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleBulkDataSubmission,\n        className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n        disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n        children: \"Save Bulk Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleDeleteAllData,\n        className: \"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n        children: \"Delete All Items from Database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"taskName\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Select Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), (() => {\n          console.log('Rendering Tasks Dropdown:', {\n            tasksCount: tasks.length,\n            tasksData: tasks\n          });\n          return /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleTaskSelection,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this), tasks.map(taskItem => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: [taskItem.name, \" - \", taskItem.description]\n            }, `task-${taskItem.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"employee\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), (() => {\n          console.log('=== EMPLOYEE DROPDOWN DEBUG ===');\n          console.log('Current employees state:', employees);\n          console.log('Current task.employee value:', task.employee);\n          console.log('Number of employees:', employees.length);\n          if (employees.length === 0) {\n            console.log('Warning: No employees available in the dropdown');\n          }\n          return /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), employees.map((employee, index) => {\n              console.log(`Rendering employee option ${index}:`, employee);\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: employee.name,\n                children: employee.name\n              }, `employee-${employee.id || index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"department\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"department\",\n          name: \"department\",\n          value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n          readOnly: true,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"mail\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"mail\",\n          name: \"mail\",\n          value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || '',\n          readOnly: true,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: task.date,\n          onChange: handleChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"comments\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"comments\",\n          name: \"comments\",\n          value: task.comments,\n          onChange: handleChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          placeholder: \"Enter any additional comments\",\n          rows: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 293,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskInput","_employees$find","_parsedEmployeeDepart","_employees$find2","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","console","log","fetchData","tasksResponse","get","Array","isArray","data","length","employeesResponse","error","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","employeeDepartment","map","department","email","item","handleTaskSelection","selectedValue","prev","handleChange","name","selectedEmployee","find","emp","prevTask","handleBulkDataSubmission","tasksData","status","createdAt","Date","toISOString","requestDetails","url","method","headers","post","apiError","_apiError$response","_apiError$response2","message","response","config","requestData","formattedPairs","employeeDepartments","pairsResponse","_apiError$response3","_apiError$response4","alert","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","stack","JSON","stringify","handleDeleteAllData","delete","handleSubmit","preventDefault","_error$response6","_error$response7","_error$response8","_error$response8$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","rows","placeholder","type","onClick","disabled","onSubmit","tasksCount","required","taskItem","description","index","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    \n    const fetchData = async () => {\n      try {\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n        console.log('Tasks Response:', tasksResponse);\n        \n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n        console.log('Employees Response:', employeesResponse);\n        \n        if (Array.isArray(employeesResponse.data)) {\n          console.log('Setting employees:', employeesResponse.data);\n          setEmployees(employeesResponse.data);\n        }\n        \n        console.log('Employees fetched:', employeesResponse.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return { employee, department, email };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({ \n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        \n        console.log('Sending bulk tasks:', { \n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \n            tasks: tasksData \n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { tasks: tasksData }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n\n        console.log('Sending employee-department pairs:', { \n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', { \n            employeeDepartments: formattedPairs \n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n          \n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { employeeDepartments: formattedPairs }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n\n    } catch (error) {\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        config: error.config,\n        stack: error.stack\n      });\n      \n      alert(`Error saving bulk data: \n        ${error.response?.data?.error || error.message}\n        \n        Status: ${error.response?.status || 'Unknown'}\n        Details: ${JSON.stringify(error.response?.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      console.error('Error creating task:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      alert(`Error creating task: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold mb-6 text-center\">Create Task</h2>\n      \n      <div className=\"flex mb-6\">\n        {/* Bulk Tasks Input */}\n        <div className=\"w-1/2 mr-4\">\n          <label \n            htmlFor=\"bulkTasks\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Bulk Tasks Input (one task per line)\n          </label>\n          <textarea\n            id=\"bulkTasks\"\n            value={bulkTasks}\n            onChange={handleBulkTasksChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            rows=\"5\"\n            placeholder=\"Enter multiple tasks, one per line\"\n          />\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {parsedTasks.length} tasks ready to be saved\n          </p>\n        </div>\n\n        {/* Employee-Department Input */}\n        <div className=\"w-1/2\">\n          <label \n            htmlFor=\"bulkEmployeeDepartment\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Employee-Department-Mail Input (format: employee;department;email)\n          </label>\n          <textarea\n            id=\"bulkEmployeeDepartment\"\n            value={bulkEmployeeDepartment}\n            onChange={handleBulkEmployeeDepartmentChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            rows=\"5\"\n            placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          />\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n          </p>\n        </div>\n      </div>\n\n      {/* Save and Delete Buttons */}\n      <div className=\"mb-6 flex justify-center space-x-4\">\n        <button\n          type=\"button\"\n          onClick={handleBulkDataSubmission}\n          className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n          disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n        >\n          Save Bulk Data\n        </button>\n        \n        <button\n          type=\"button\"\n          onClick={handleDeleteAllData}\n          className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n        >\n          Delete All Items from Database\n        </button>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        {/* Task Selection Dropdown */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"taskName\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Select Task\n          </label>\n          {(() => {\n            console.log('Rendering Tasks Dropdown:', {\n              tasksCount: tasks.length,\n              tasksData: tasks\n            });\n            return (\n              <select\n                id=\"taskName\"\n                name=\"taskName\"\n                value={task.taskName}\n                onChange={handleTaskSelection}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              >\n                <option value=\"\">Select a task</option>\n                {tasks.map((taskItem) => (\n                  <option \n                    key={`task-${taskItem.id}`} \n                    value={taskItem.name}\n                  >\n                    {taskItem.name} - {taskItem.description}\n                  </option>\n                ))}\n              </select>\n            );\n          })()}\n        </div>\n\n        {/* Employee Dropdown */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"employee\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Employee\n          </label>\n          {(() => {\n            console.log('=== EMPLOYEE DROPDOWN DEBUG ===');\n            console.log('Current employees state:', employees);\n            console.log('Current task.employee value:', task.employee);\n            console.log('Number of employees:', employees.length);\n            \n            if (employees.length === 0) {\n              console.log('Warning: No employees available in the dropdown');\n            }\n\n            return (\n              <select\n                id=\"employee\"\n                name=\"employee\"\n                value={task.employee}\n                onChange={handleChange}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              >\n                <option value=\"\">Select an employee</option>\n                {employees.map((employee, index) => {\n                  console.log(`Rendering employee option ${index}:`, employee);\n                  return (\n                    <option \n                      key={`employee-${employee.id || index}`} \n                      value={employee.name}\n                    >\n                      {employee.name}\n                    </option>\n                  );\n                })}\n              </select>\n            );\n          })()}\n        </div>\n\n        {/* Department Display */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"department\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Department\n          </label>\n          <input\n            type=\"text\"\n            id=\"department\"\n            name=\"department\"\n            value={\n              employees.find(emp => emp.name === task.employee)?.department || ''\n            }\n            readOnly\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          />\n        </div>\n\n        {/* Mail Display */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"mail\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Mail\n          </label>\n          <input\n            type=\"email\"\n            id=\"mail\"\n            name=\"mail\"\n            value={\n              parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n              employees.find(emp => emp.name === task.employee)?.email || \n              ''\n            }\n            readOnly\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          />\n        </div>\n\n        {/* Date Input */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"date\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Date\n          </label>\n          <input\n            type=\"date\"\n            id=\"date\"\n            name=\"date\"\n            value={task.date}\n            onChange={handleChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            required\n          />\n        </div>\n\n        {/* Comments Input */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"comments\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Comments\n          </label>\n          <textarea\n            id=\"comments\"\n            name=\"comments\"\n            value={task.comments}\n            onChange={handleChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            placeholder=\"Enter any additional comments\"\n            rows=\"4\"\n          />\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"flex items-center justify-center\">\n          <button\n            type=\"submit\"\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n          >\n            Create Task\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default TaskInput; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAA,IAAAC,eAAA,EAAAC,qBAAA,EAAAC,gBAAA;EACtB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAC/BW,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAM,CAACoB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxE,MAAM,CAACsB,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;;EAE5E;EACA,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd2B,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAExD,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACAF,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE,iCAAiC,CAAC;QACjF,MAAME,aAAa,GAAG,MAAM7B,KAAK,CAAC8B,GAAG,CAAC,iCAAiC,CAAC;QACxEJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEE,aAAa,CAAC;QAE7C,IAAIE,KAAK,CAACC,OAAO,CAACH,aAAa,CAACI,IAAI,CAAC,EAAE;UACrCP,OAAO,CAACC,GAAG,CAAC,WAAWE,aAAa,CAACI,IAAI,CAACC,MAAM,QAAQ,CAAC;UACzDX,QAAQ,CAACM,aAAa,CAACI,IAAI,CAAC;QAC9B;;QAEA;QACAP,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpC,MAAMQ,iBAAiB,GAAG,MAAMnC,KAAK,CAAC8B,GAAG,CAAC,qCAAqC,CAAC;QAChFJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEQ,iBAAiB,CAAC;QAErD,IAAIJ,KAAK,CAACC,OAAO,CAACG,iBAAiB,CAACF,IAAI,CAAC,EAAE;UACzCP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEQ,iBAAiB,CAACF,IAAI,CAAC;UACzDR,YAAY,CAACU,iBAAiB,CAACF,IAAI,CAAC;QACtC;QAEAP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEQ,iBAAiB,CAACF,IAAI,CAAC;MAC3D,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDR,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,qBAAqB,GAAIC,CAAC,IAAK;IACnC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BxB,YAAY,CAACwB,KAAK,CAAC;IACnB;IACA,MAAMjB,KAAK,GAAGiB,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACnC,IAAI,IAAIA,IAAI,CAACoC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IAClE1B,cAAc,CAACK,KAAK,CAAC;EACvB,CAAC;;EAED;EACA,MAAMsB,kCAAkC,GAAIN,CAAC,IAAK;IAChD,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BpB,yBAAyB,CAACoB,KAAK,CAAC;IAChC;IACA,MAAMM,KAAK,GAAGN,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACI,IAAI,IAAIA,IAAI,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IAClE,MAAMI,kBAAkB,GAAGF,KAAK,CAACG,GAAG,CAACF,IAAI,IAAI;MAC3C,MAAM,CAACpC,QAAQ,EAAEuC,UAAU,EAAEC,KAAK,CAAC,GAAGJ,IAAI,CAACL,KAAK,CAAC,GAAG,CAAC,CAACO,GAAG,CAACG,IAAI,IAAIA,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC;MAC9E,OAAO;QAAEjC,QAAQ;QAAEuC,UAAU;QAAEC;MAAM,CAAC;IACxC,CAAC,CAAC;IACF7B,2BAA2B,CAAC0B,kBAAkB,CAAC;EACjD,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAId,CAAC,IAAK;IACjC,MAAMe,aAAa,GAAGf,CAAC,CAACE,MAAM,CAACD,KAAK;IACpC/B,OAAO,CAAC8C,IAAI,KAAK;MACf,GAAGA,IAAI;MACP7C,QAAQ,EAAE4C;IACZ,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,YAAY,GAAIjB,CAAC,IAAK;IAC1B,MAAM;MAAEkB,IAAI;MAAEjB;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChC,IAAIgB,IAAI,KAAK,UAAU,EAAE;MACvB;MACA,MAAMC,gBAAgB,GAAGjC,SAAS,CAACkC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,IAAI,KAAKjB,KAAK,CAAC;MAClE/B,OAAO,CAACoD,QAAQ,KAAK;QACnB,GAAGA,QAAQ;QACXlD,QAAQ,EAAE6B,KAAK;QACfU,UAAU,EAAEQ,gBAAgB,GAAGA,gBAAgB,CAACR,UAAU,GAAG,EAAE;QAC/DtC,IAAI,EAAE8C,gBAAgB,GAAGA,gBAAgB,CAACP,KAAK,GAAG;MACpD,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACL1C,OAAO,CAACoD,QAAQ,KAAK;QACnB,GAAGA,QAAQ;QACX,CAACJ,IAAI,GAAGjB;MACV,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAMsB,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACF;MACA,IAAI7C,WAAW,CAACkB,MAAM,GAAG,CAAC,EAAE;QAC1BR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEX,WAAW,CAAC;QACtD,MAAM8C,SAAS,GAAG9C,WAAW,CAACgC,GAAG,CAACvC,QAAQ,KAAK;UAC7C+C,IAAI,EAAE/C,QAAQ,CAACkC,IAAI,CAAC,CAAC;UACrBoB,MAAM,EAAE,SAAS;UACjBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC,CAAC;QAEHxC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;UACjCL,KAAK,EAAEwC,SAAS;UAChBK,cAAc,EAAE;YACdC,GAAG,EAAE,sCAAsC;YAC3CC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,QAAQ,EAAE;YACZ;UACF;QACF,CAAC,CAAC;QAEF,IAAI;UACF,MAAMzC,aAAa,GAAG,MAAM7B,KAAK,CAACuE,IAAI,CAAC,sCAAsC,EAAE;YAC7EjD,KAAK,EAAEwC;UACT,CAAC,EAAE;YACDQ,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,QAAQ,EAAE;YACZ;UACF,CAAC,CAAC;UACF5C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEE,aAAa,CAACI,IAAI,CAAC;QACnE,CAAC,CAAC,OAAOuC,QAAQ,EAAE;UAAA,IAAAC,kBAAA,EAAAC,mBAAA;UACjBhD,OAAO,CAACU,KAAK,CAAC,oCAAoC,EAAE;YAClDuC,OAAO,EAAEH,QAAQ,CAACG,OAAO;YACzBC,QAAQ,GAAAH,kBAAA,GAAED,QAAQ,CAACI,QAAQ,cAAAH,kBAAA,uBAAjBA,kBAAA,CAAmBxC,IAAI;YACjC8B,MAAM,GAAAW,mBAAA,GAAEF,QAAQ,CAACI,QAAQ,cAAAF,mBAAA,uBAAjBA,mBAAA,CAAmBX,MAAM;YACjCc,MAAM,EAAEL,QAAQ,CAACK,MAAM;YACvBC,WAAW,EAAE;cAAExD,KAAK,EAAEwC;YAAU;UAClC,CAAC,CAAC;UACF,MAAMU,QAAQ;QAChB;MACF;;MAEA;MACA,IAAIpD,wBAAwB,CAACc,MAAM,GAAG,CAAC,EAAE;QACvCR,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEP,wBAAwB,CAAC;QAC5E,MAAM2D,cAAc,GAAG3D,wBAAwB,CAAC4B,GAAG,CAACF,IAAI,KAAK;UAC3DpC,QAAQ,EAAEoC,IAAI,CAACpC,QAAQ,CAACiC,IAAI,CAAC,CAAC;UAC9BM,UAAU,EAAEH,IAAI,CAACG,UAAU,CAACN,IAAI,CAAC,CAAC;UAClCqB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CAAC,CAAC;QAEHxC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE;UAChDqD,mBAAmB,EAAED,cAAc;UACnCZ,cAAc,EAAE;YACdC,GAAG,EAAE,gDAAgD;YACrDC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,QAAQ,EAAE;YACZ;UACF;QACF,CAAC,CAAC;QAEF,IAAI;UACF,MAAMW,aAAa,GAAG,MAAMjF,KAAK,CAACuE,IAAI,CAAC,gDAAgD,EAAE;YACvFS,mBAAmB,EAAED;UACvB,CAAC,CAAC;UACFrD,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEsD,aAAa,CAAChD,IAAI,CAAC;;UAEhF;UACAP,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;UAC3C,MAAMQ,iBAAiB,GAAG,MAAMnC,KAAK,CAAC8B,GAAG,CAAC,qCAAqC,CAAC;UAChF,IAAIC,KAAK,CAACC,OAAO,CAACG,iBAAiB,CAACF,IAAI,CAAC,EAAE;YACzCP,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEQ,iBAAiB,CAACF,IAAI,CAAC;YAC9DR,YAAY,CAACU,iBAAiB,CAACF,IAAI,CAAC;UACtC;QACF,CAAC,CAAC,OAAOuC,QAAQ,EAAE;UAAA,IAAAU,mBAAA,EAAAC,mBAAA;UACjBzD,OAAO,CAACU,KAAK,CAAC,8CAA8C,EAAE;YAC5DuC,OAAO,EAAEH,QAAQ,CAACG,OAAO;YACzBC,QAAQ,GAAAM,mBAAA,GAAEV,QAAQ,CAACI,QAAQ,cAAAM,mBAAA,uBAAjBA,mBAAA,CAAmBjD,IAAI;YACjC8B,MAAM,GAAAoB,mBAAA,GAAEX,QAAQ,CAACI,QAAQ,cAAAO,mBAAA,uBAAjBA,mBAAA,CAAmBpB,MAAM;YACjCc,MAAM,EAAEL,QAAQ,CAACK,MAAM;YACvBC,WAAW,EAAE;cAAEE,mBAAmB,EAAED;YAAe;UACrD,CAAC,CAAC;UACF,MAAMP,QAAQ;QAChB;MACF;;MAEA;MACAzD,YAAY,CAAC,EAAE,CAAC;MAChBI,yBAAyB,CAAC,EAAE,CAAC;MAC7BF,cAAc,CAAC,EAAE,CAAC;MAClBI,2BAA2B,CAAC,EAAE,CAAC;;MAE/B;MACA+D,KAAK,CAAC,+BAA+B,CAAC;IAExC,CAAC,CAAC,OAAOhD,KAAK,EAAE;MAAA,IAAAiD,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,gBAAA;MACdhE,OAAO,CAACU,KAAK,CAAC,uCAAuC,EAAE;QACrDuC,OAAO,EAAEvC,KAAK,CAACuC,OAAO;QACtBC,QAAQ,GAAAS,eAAA,GAAEjD,KAAK,CAACwC,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBpD,IAAI;QAC9B8B,MAAM,GAAAuB,gBAAA,GAAElD,KAAK,CAACwC,QAAQ,cAAAU,gBAAA,uBAAdA,gBAAA,CAAgBvB,MAAM;QAC9Bc,MAAM,EAAEzC,KAAK,CAACyC,MAAM;QACpBc,KAAK,EAAEvD,KAAK,CAACuD;MACf,CAAC,CAAC;MAEFP,KAAK,CAAC;AACZ,UAAU,EAAAG,gBAAA,GAAAnD,KAAK,CAACwC,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtD,IAAI,cAAAuD,qBAAA,uBAApBA,qBAAA,CAAsBpD,KAAK,KAAIA,KAAK,CAACuC,OAAO;AACtD;AACA,kBAAkB,EAAAc,gBAAA,GAAArD,KAAK,CAACwC,QAAQ,cAAAa,gBAAA,uBAAdA,gBAAA,CAAgB1B,MAAM,KAAI,SAAS;AACrD,mBAAmB6B,IAAI,CAACC,SAAS,EAAAH,gBAAA,GAACtD,KAAK,CAACwC,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBzD,IAAI,CAAC,IAAI,uBAAuB;AAClF,OAAO,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAM6D,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAM5E,KAAK,CAAC+F,MAAM,CAAC,qCAAqC,CAAC;MAC1E,IAAInB,QAAQ,CAACb,MAAM,KAAK,GAAG,EAAE;QAC3BqB,KAAK,CAAC,wCAAwC,CAAC;QAC/C;QACAnE,cAAc,CAAC,EAAE,CAAC;QAClBI,2BAA2B,CAAC,EAAE,CAAC;QAC/BN,YAAY,CAAC,EAAE,CAAC;QAChBI,yBAAyB,CAAC,EAAE,CAAC;QAC7BX,OAAO,CAAC;UACNC,QAAQ,EAAE,EAAE;UACZC,QAAQ,EAAE,EAAE;UACZuC,UAAU,EAAE,EAAE;UACdtC,IAAI,EAAE,EAAE;UACRC,IAAI,EAAE,EAAE;UACRC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOuB,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CgD,KAAK,CAAC,0CAA0C,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMY,YAAY,GAAG,MAAO1D,CAAC,IAAK;IAChCA,CAAC,CAAC2D,cAAc,CAAC,CAAC;IAClB,IAAI;MACF;MACA,MAAMpC,wBAAwB,CAAC,CAAC;;MAEhC;MACAnC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEpB,IAAI,CAAC;MAC7C,MAAMqE,QAAQ,GAAG,MAAM5E,KAAK,CAACuE,IAAI,CAAC,iCAAiC,EAAEhE,IAAI,EAAE;QACzE+D,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;MACF5C,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEiD,QAAQ,CAAC3C,IAAI,CAAC;;MAE3C;MACAzB,OAAO,CAAC;QACNC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZuC,UAAU,EAAE,EAAE;QACdrC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOuB,KAAK,EAAE;MAAA,IAAA8D,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACd3E,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAE;QACpCuC,OAAO,EAAEvC,KAAK,CAACuC,OAAO;QACtBC,QAAQ,GAAAsB,gBAAA,GAAE9D,KAAK,CAACwC,QAAQ,cAAAsB,gBAAA,uBAAdA,gBAAA,CAAgBjE,IAAI;QAC9B8B,MAAM,GAAAoC,gBAAA,GAAE/D,KAAK,CAACwC,QAAQ,cAAAuB,gBAAA,uBAAdA,gBAAA,CAAgBpC;MAC1B,CAAC,CAAC;MACFqB,KAAK,CAAC,wBAAwB,EAAAgB,gBAAA,GAAAhE,KAAK,CAACwC,QAAQ,cAAAwB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnE,IAAI,cAAAoE,qBAAA,uBAApBA,qBAAA,CAAsB1B,OAAO,KAAIvC,KAAK,CAACuC,OAAO,EAAE,CAAC;IACjF;EACF,CAAC;EAED,oBACEzE,OAAA;IAAKoG,SAAS,EAAC,0DAA0D;IAAAC,QAAA,gBACvErG,OAAA;MAAIoG,SAAS,EAAC,qCAAqC;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEpEzG,OAAA;MAAKoG,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAExBrG,OAAA;QAAKoG,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBrG,OAAA;UACE0G,OAAO,EAAC,WAAW;UACnBN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRzG,OAAA;UACE2G,EAAE,EAAC,WAAW;UACdtE,KAAK,EAAEzB,SAAU;UACjBgG,QAAQ,EAAEzE,qBAAsB;UAChCiE,SAAS,EAAC,4HAA4H;UACtIS,IAAI,EAAC,GAAG;UACRC,WAAW,EAAC;QAAoC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,eACFzG,OAAA;UAAGoG,SAAS,EAAC,4BAA4B;UAAAC,QAAA,GACtCvF,WAAW,CAACkB,MAAM,EAAC,0BACtB;QAAA;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,OAAO;QAAAC,QAAA,gBACpBrG,OAAA;UACE0G,OAAO,EAAC,wBAAwB;UAChCN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRzG,OAAA;UACE2G,EAAE,EAAC,wBAAwB;UAC3BtE,KAAK,EAAErB,sBAAuB;UAC9B4F,QAAQ,EAAElE,kCAAmC;UAC7C0D,SAAS,EAAC,4HAA4H;UACtIS,IAAI,EAAC,GAAG;UACRC,WAAW,EAAC;QAAgG;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7G,CAAC,eACFzG,OAAA;UAAGoG,SAAS,EAAC,4BAA4B;UAAAC,QAAA,GACtCnF,wBAAwB,CAACc,MAAM,EAAC,qDACnC;QAAA;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNzG,OAAA;MAAKoG,SAAS,EAAC,oCAAoC;MAAAC,QAAA,gBACjDrG,OAAA;QACE+G,IAAI,EAAC,QAAQ;QACbC,OAAO,EAAErD,wBAAyB;QAClCyC,SAAS,EAAC,gHAAgH;QAC1Ha,QAAQ,EAAEnG,WAAW,CAACkB,MAAM,KAAK,CAAC,IAAId,wBAAwB,CAACc,MAAM,KAAK,CAAE;QAAAqE,QAAA,EAC7E;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAETzG,OAAA;QACE+G,IAAI,EAAC,QAAQ;QACbC,OAAO,EAAEpB,mBAAoB;QAC7BQ,SAAS,EAAC,4GAA4G;QAAAC,QAAA,EACvH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENzG,OAAA;MAAMkH,QAAQ,EAAEpB,YAAa;MAAAO,QAAA,gBAE3BrG,OAAA;QAAKoG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBrG,OAAA;UACE0G,OAAO,EAAC,UAAU;UAClBN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EACP,CAAC,MAAM;UACNjF,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE;YACvC0F,UAAU,EAAE/F,KAAK,CAACY,MAAM;YACxB4B,SAAS,EAAExC;UACb,CAAC,CAAC;UACF,oBACEpB,OAAA;YACE2G,EAAE,EAAC,UAAU;YACbrD,IAAI,EAAC,UAAU;YACfjB,KAAK,EAAEhC,IAAI,CAACE,QAAS;YACrBqG,QAAQ,EAAE1D,mBAAoB;YAC9BkD,SAAS,EAAC,4HAA4H;YACtIgB,QAAQ;YAAAf,QAAA,gBAERrG,OAAA;cAAQqC,KAAK,EAAC,EAAE;cAAAgE,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACtCrF,KAAK,CAAC0B,GAAG,CAAEuE,QAAQ,iBAClBrH,OAAA;cAEEqC,KAAK,EAAEgF,QAAQ,CAAC/D,IAAK;cAAA+C,QAAA,GAEpBgB,QAAQ,CAAC/D,IAAI,EAAC,KAAG,EAAC+D,QAAQ,CAACC,WAAW;YAAA,GAHlC,QAAQD,QAAQ,CAACV,EAAE,EAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIpB,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAEb,CAAC,EAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBrG,OAAA;UACE0G,OAAO,EAAC,UAAU;UAClBN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EACP,CAAC,MAAM;UACNjF,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9CD,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,SAAS,CAAC;UAClDE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEpB,IAAI,CAACG,QAAQ,CAAC;UAC1DgB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,SAAS,CAACU,MAAM,CAAC;UAErD,IAAIV,SAAS,CAACU,MAAM,KAAK,CAAC,EAAE;YAC1BR,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;UAChE;UAEA,oBACEzB,OAAA;YACE2G,EAAE,EAAC,UAAU;YACbrD,IAAI,EAAC,UAAU;YACfjB,KAAK,EAAEhC,IAAI,CAACG,QAAS;YACrBoG,QAAQ,EAAEvD,YAAa;YACvB+C,SAAS,EAAC,4HAA4H;YACtIgB,QAAQ;YAAAf,QAAA,gBAERrG,OAAA;cAAQqC,KAAK,EAAC,EAAE;cAAAgE,QAAA,EAAC;YAAkB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC3CnF,SAAS,CAACwB,GAAG,CAAC,CAACtC,QAAQ,EAAE+G,KAAK,KAAK;cAClC/F,OAAO,CAACC,GAAG,CAAC,6BAA6B8F,KAAK,GAAG,EAAE/G,QAAQ,CAAC;cAC5D,oBACER,OAAA;gBAEEqC,KAAK,EAAE7B,QAAQ,CAAC8C,IAAK;gBAAA+C,QAAA,EAEpB7F,QAAQ,CAAC8C;cAAI,GAHT,YAAY9C,QAAQ,CAACmG,EAAE,IAAIY,KAAK,EAAE;gBAAAjB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAIjC,CAAC;YAEb,CAAC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAEb,CAAC,EAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBrG,OAAA;UACE0G,OAAO,EAAC,YAAY;UACpBN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRzG,OAAA;UACE+G,IAAI,EAAC,MAAM;UACXJ,EAAE,EAAC,YAAY;UACfrD,IAAI,EAAC,YAAY;UACjBjB,KAAK,EACH,EAAAnC,eAAA,GAAAoB,SAAS,CAACkC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,IAAI,KAAKjD,IAAI,CAACG,QAAQ,CAAC,cAAAN,eAAA,uBAAjDA,eAAA,CAAmD6C,UAAU,KAAI,EAClE;UACDyE,QAAQ;UACRpB,SAAS,EAAC;QAA4H;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBrG,OAAA;UACE0G,OAAO,EAAC,MAAM;UACdN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRzG,OAAA;UACE+G,IAAI,EAAC,OAAO;UACZJ,EAAE,EAAC,MAAM;UACTrD,IAAI,EAAC,MAAM;UACXjB,KAAK,EACH,EAAAlC,qBAAA,GAAAe,wBAAwB,CAACsC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACjD,QAAQ,KAAKH,IAAI,CAACG,QAAQ,CAAC,cAAAL,qBAAA,uBAApEA,qBAAA,CAAsE6C,KAAK,OAAA5C,gBAAA,GAC3EkB,SAAS,CAACkC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,IAAI,KAAKjD,IAAI,CAACG,QAAQ,CAAC,cAAAJ,gBAAA,uBAAjDA,gBAAA,CAAmD4C,KAAK,KACxD,EACD;UACDwE,QAAQ;UACRpB,SAAS,EAAC;QAA4H;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBrG,OAAA;UACE0G,OAAO,EAAC,MAAM;UACdN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRzG,OAAA;UACE+G,IAAI,EAAC,MAAM;UACXJ,EAAE,EAAC,MAAM;UACTrD,IAAI,EAAC,MAAM;UACXjB,KAAK,EAAEhC,IAAI,CAACK,IAAK;UACjBkG,QAAQ,EAAEvD,YAAa;UACvB+C,SAAS,EAAC,4HAA4H;UACtIgB,QAAQ;QAAA;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBrG,OAAA;UACE0G,OAAO,EAAC,UAAU;UAClBN,SAAS,EAAC,4CAA4C;UAAAC,QAAA,EACvD;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACRzG,OAAA;UACE2G,EAAE,EAAC,UAAU;UACbrD,IAAI,EAAC,UAAU;UACfjB,KAAK,EAAEhC,IAAI,CAACM,QAAS;UACrBiG,QAAQ,EAAEvD,YAAa;UACvB+C,SAAS,EAAC,4HAA4H;UACtIU,WAAW,EAAC,+BAA+B;UAC3CD,IAAI,EAAC;QAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNzG,OAAA;QAAKoG,SAAS,EAAC,kCAAkC;QAAAC,QAAA,eAC/CrG,OAAA;UACE+G,IAAI,EAAC,QAAQ;UACbX,SAAS,EAAC,8GAA8G;UAAAC,QAAA,EACzH;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAED,eAAexG,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
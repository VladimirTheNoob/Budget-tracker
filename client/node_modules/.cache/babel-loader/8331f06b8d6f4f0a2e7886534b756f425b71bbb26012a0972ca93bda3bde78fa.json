{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find3, _parsedEmployeeDepart, _employees$find4;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // State for checked tasks\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n  const fetchData = async () => {\n    try {\n      // Fetch tasks\n      console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      console.log('Tasks Response:', tasksResponse);\n      if (Array.isArray(tasksResponse.data)) {\n        // Ensure all tasks have IDs\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          id: task.id || `task-${Date.now()}-${index}`,\n          // Generate ID if missing\n          ...task\n        }));\n        console.log(`Setting ${tasksWithIds.length} tasks`);\n        setTasks(tasksWithIds);\n      }\n\n      // Fetch employees\n      console.log('Fetching employees...');\n      const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n      console.log('Employees Response:', employeesResponse);\n      if (Array.isArray(employeesResponse.data)) {\n        console.log('Setting employees:', employeesResponse.data);\n        setEmployees(employeesResponse.data);\n      }\n      console.log('Employees fetched:', employeesResponse.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const {\n      value\n    } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      console.log('=== BULK DATA SUBMISSION STARTED ===');\n\n      // Check for duplicates in parsedTasks\n      const taskDuplicates = parsedTasks.filter((task, index) => parsedTasks.indexOf(task) !== index);\n\n      // Check for duplicates in the existing tasks\n      const existingTaskNames = tasks.map(task => task.name.toLowerCase());\n      const newTaskNames = parsedTasks.map(task => task.trim().toLowerCase());\n      const duplicateTasks = newTaskNames.filter(name => existingTaskNames.includes(name));\n      if (taskDuplicates.length > 0 || duplicateTasks.length > 0) {\n        let errorMessage = 'Duplicates found:\\n';\n        if (taskDuplicates.length > 0) {\n          errorMessage += `Tasks in bulk input: ${taskDuplicates.join(', ')}\\n`;\n        }\n        if (duplicateTasks.length > 0) {\n          errorMessage += `Tasks already exist: ${duplicateTasks.join(', ')}\\n`;\n        }\n        alert(errorMessage);\n        return;\n      }\n\n      // Save tasks to database if there are any\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (error) {\n          var _error$response, _error$response$data;\n          if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.duplicates) {\n            const duplicates = error.response.data.duplicates;\n            alert(`Cannot create duplicate tasks:\\n${duplicates.join('\\n')}`);\n            return;\n          }\n          throw error;\n        }\n      }\n\n      // Save employee-department pairs if there are any\n      if (parsedEmployeeDepartment.length > 0) {\n        try {\n          // Fetch existing employee-department pairs\n          const existingEmployeeDepartmentsResponse = await axios.get('http://localhost:5000/api/employee-departments');\n          const existingEmployeeDepartments = existingEmployeeDepartmentsResponse.data || [];\n\n          // Combine existing pairs with new pairs\n          const combinedEmployeeDepartments = [...existingEmployeeDepartments, ...parsedEmployeeDepartment];\n\n          // Send combined data to the server\n          const employeeResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: combinedEmployeeDepartments\n          });\n          console.log('Employee-department pairs saved:', employeeResponse.data);\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.duplicates) {\n            const duplicates = error.response.data.duplicates;\n            alert(`Cannot create duplicate entries:\\n${duplicates.join('\\n')}`);\n            return;\n          }\n          throw error;\n        }\n      }\n\n      // Reset form fields\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('All data has been successfully saved!');\n\n      // Refresh the data\n      await fetchData();\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error in bulk data submission:', error);\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message;\n      alert(`Failed to save data: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      var _employees$find, _employees$find2;\n      // Find the selected task from the tasks list\n      const selectedTask = tasks.find(t => t.name === task.taskName);\n\n      // Check for duplicates if this is a new task (case-insensitive)\n      if (!selectedTask) {\n        const isDuplicate = tasks.some(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n        if (isDuplicate) {\n          alert('A task with this name already exists. Please choose a different name.');\n          return;\n        }\n      }\n      const taskData = {\n        id: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.id,\n        // Use the ID of the existing task if found\n        name: task.taskName,\n        employee: task.employee,\n        department: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n        date: task.date,\n        status: (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) || 'pending',\n        comments: task.comments,\n        email: ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || ''\n      };\n      console.log('Submitting task:', taskData);\n\n      // Use PUT for updates and POST for new tasks\n      const endpoint = selectedTask !== null && selectedTask !== void 0 && selectedTask.id ? `http://localhost:5000/api/tasks/${selectedTask.id}` : 'http://localhost:5000/api/tasks';\n      const method = selectedTask !== null && selectedTask !== void 0 && selectedTask.id ? 'put' : 'post';\n      const response = await axios[method](endpoint, taskData);\n      console.log('Task operation successful:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Show success message\n      alert(selectedTask !== null && selectedTask !== void 0 && selectedTask.id ? 'Task updated successfully!' : 'Task created successfully!');\n\n      // Refresh tasks list\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      if (Array.isArray(tasksResponse.data)) {\n        setTasks(tasksResponse.data);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Error saving task:', error);\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message;\n      alert(`Error ${task.id ? 'updating' : 'creating'} task: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n  const handleCheckTask = taskId => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkEmployeeDepartment\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkEmployeeDepartment\",\n            value: bulkEmployeeDepartment,\n            onChange: handleBulkEmployeeDepartmentChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleDeleteAllData,\n          className: \"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\",\n          children: \"Delete All Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this), tasks.map((taskItem, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id || `new-task-${index}-${taskItem.name}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find3 = employees.find(emp => emp.name === task.employee)) === null || _employees$find3 === void 0 ? void 0 : _employees$find3.department) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find4 = employees.find(emp => emp.name === task.employee)) === null || _employees$find4 === void 0 ? void 0 : _employees$find4.email) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center pt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskInput","_employees$find3","_parsedEmployeeDepart","_employees$find4","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","checkedTasks","setCheckedTasks","Set","fetchData","console","log","tasksResponse","get","Array","isArray","data","tasksWithIds","map","index","id","Date","now","length","employeesResponse","error","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","employeeDepartment","department","email","item","handleTaskSelection","prev","handleChange","name","selectedEmployee","find","emp","handleBulkDataSubmission","taskDuplicates","indexOf","existingTaskNames","toLowerCase","newTaskNames","duplicateTasks","includes","errorMessage","join","alert","tasksData","status","createdAt","toISOString","post","_error$response","_error$response$data","response","duplicates","existingEmployeeDepartmentsResponse","existingEmployeeDepartments","combinedEmployeeDepartments","employeeResponse","employeeDepartments","_error$response2","_error$response2$data","_error$response3","_error$response3$data","message","handleDeleteAllData","delete","window","location","reload","handleSubmit","preventDefault","_employees$find","_employees$find2","selectedTask","t","isDuplicate","some","taskData","endpoint","method","_error$response4","_error$response4$data","handleCheckTask","taskId","newChecked","has","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // State for checked tasks\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n\n  const fetchData = async () => {\n    try {\n      // Fetch tasks\n      console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      console.log('Tasks Response:', tasksResponse);\n      \n      if (Array.isArray(tasksResponse.data)) {\n        // Ensure all tasks have IDs\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          id: task.id || `task-${Date.now()}-${index}`, // Generate ID if missing\n          ...task\n        }));\n        console.log(`Setting ${tasksWithIds.length} tasks`);\n        setTasks(tasksWithIds);\n      }\n\n      // Fetch employees\n      console.log('Fetching employees...');\n      const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n      console.log('Employees Response:', employeesResponse);\n      \n      if (Array.isArray(employeesResponse.data)) {\n        console.log('Setting employees:', employeesResponse.data);\n        setEmployees(employeesResponse.data);\n      }\n      \n      console.log('Employees fetched:', employeesResponse.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return { employee, department, email };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const { value } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    \n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      console.log('=== BULK DATA SUBMISSION STARTED ===');\n\n      // Check for duplicates in parsedTasks\n      const taskDuplicates = parsedTasks.filter((task, index) => \n        parsedTasks.indexOf(task) !== index\n      );\n\n      // Check for duplicates in the existing tasks\n      const existingTaskNames = tasks.map(task => task.name.toLowerCase());\n      const newTaskNames = parsedTasks.map(task => task.trim().toLowerCase());\n      const duplicateTasks = newTaskNames.filter(name => existingTaskNames.includes(name));\n\n      if (taskDuplicates.length > 0 || duplicateTasks.length > 0) {\n        let errorMessage = 'Duplicates found:\\n';\n        if (taskDuplicates.length > 0) {\n          errorMessage += `Tasks in bulk input: ${taskDuplicates.join(', ')}\\n`;\n        }\n        if (duplicateTasks.length > 0) {\n          errorMessage += `Tasks already exist: ${duplicateTasks.join(', ')}\\n`;\n        }\n        alert(errorMessage);\n        return;\n      }\n\n      // Save tasks to database if there are any\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({ \n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        \n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \n            tasks: tasksData \n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (error) {\n          if (error.response?.data?.duplicates) {\n            const duplicates = error.response.data.duplicates;\n            alert(`Cannot create duplicate tasks:\\n${duplicates.join('\\n')}`);\n            return;\n          }\n          throw error;\n        }\n      }\n\n      // Save employee-department pairs if there are any\n      if (parsedEmployeeDepartment.length > 0) {\n        try {\n          // Fetch existing employee-department pairs\n          const existingEmployeeDepartmentsResponse = await axios.get('http://localhost:5000/api/employee-departments');\n          const existingEmployeeDepartments = existingEmployeeDepartmentsResponse.data || [];\n\n          // Combine existing pairs with new pairs\n          const combinedEmployeeDepartments = [...existingEmployeeDepartments, ...parsedEmployeeDepartment];\n\n          // Send combined data to the server\n          const employeeResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: combinedEmployeeDepartments\n          });\n          console.log('Employee-department pairs saved:', employeeResponse.data);\n        } catch (error) {\n          if (error.response?.data?.duplicates) {\n            const duplicates = error.response.data.duplicates;\n            alert(`Cannot create duplicate entries:\\n${duplicates.join('\\n')}`);\n            return;\n          }\n          throw error;\n        }\n      }\n\n      // Reset form fields\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('All data has been successfully saved!');\n\n      // Refresh the data\n      await fetchData();\n\n    } catch (error) {\n      console.error('Error in bulk data submission:', error);\n      const errorMessage = error.response?.data?.error || error.message;\n      alert(`Failed to save data: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // Find the selected task from the tasks list\n      const selectedTask = tasks.find(t => t.name === task.taskName);\n\n      // Check for duplicates if this is a new task (case-insensitive)\n      if (!selectedTask) {\n        const isDuplicate = tasks.some(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n        if (isDuplicate) {\n          alert('A task with this name already exists. Please choose a different name.');\n          return;\n        }\n      }\n      \n      const taskData = {\n        id: selectedTask?.id, // Use the ID of the existing task if found\n        name: task.taskName,\n        employee: task.employee,\n        department: employees.find(emp => emp.name === task.employee)?.department || '',\n        date: task.date,\n        status: selectedTask?.status || 'pending',\n        comments: task.comments,\n        email: employees.find(emp => emp.name === task.employee)?.email || ''\n      };\n\n      console.log('Submitting task:', taskData);\n\n      // Use PUT for updates and POST for new tasks\n      const endpoint = selectedTask?.id \n        ? `http://localhost:5000/api/tasks/${selectedTask.id}` \n        : 'http://localhost:5000/api/tasks';\n      const method = selectedTask?.id ? 'put' : 'post';\n\n      const response = await axios[method](endpoint, taskData);\n      \n      console.log('Task operation successful:', response.data);\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Show success message\n      alert(selectedTask?.id ? 'Task updated successfully!' : 'Task created successfully!');\n\n      // Refresh tasks list\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      if (Array.isArray(tasksResponse.data)) {\n        setTasks(tasksResponse.data);\n      }\n    } catch (error) {\n      console.error('Error saving task:', error);\n      const errorMessage = error.response?.data?.error || error.message;\n      alert(`Error ${task.id ? 'updating' : 'creating'} task: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n\n  const handleCheckTask = (taskId) => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Bulk Inputs Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Bulk Data Input</h2>\n        \n        <div className=\"flex space-x-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkEmployeeDepartment\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Employee-Department-Mail Input (format: employee;department;email)\n            </label>\n            <textarea\n              id=\"bulkEmployeeDepartment\"\n              value={bulkEmployeeDepartment}\n              onChange={handleBulkEmployeeDepartmentChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n            </p>\n          </div>\n        </div>\n\n        {/* Save and Delete Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n          \n          <button\n            type=\"button\"\n            onClick={handleDeleteAllData}\n            className=\"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\"\n          >\n            Delete All Items\n          </button>\n        </div>\n      </div>\n\n      {/* Individual Task Form */}\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Create Task</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Selection Dropdown */}\n          <div>\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Task\n            </label>\n            <select\n              id=\"taskName\"\n              name=\"taskName\"\n              value={task.taskName}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select a task</option>\n              {tasks.map((taskItem, index) => (\n                <option \n                  key={taskItem.id || `new-task-${index}-${taskItem.name}`}\n                  value={taskItem.name}\n                >\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div>\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {employees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div>\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div>\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"email\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n                employees.find(emp => emp.name === task.employee)?.email || \n                ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div>\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Due Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div>\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center pt-4\">\n            <button\n              type=\"submit\"\n              className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            >\n              Update Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
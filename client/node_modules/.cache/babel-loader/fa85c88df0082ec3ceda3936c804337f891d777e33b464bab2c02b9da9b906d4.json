{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find3, _parsedEmployeeDepart, _employees$find4;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    const fetchData = async () => {\n      try {\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n        console.log('Tasks Response:', tasksResponse);\n        if (Array.isArray(tasksResponse.data)) {\n          // Ensure all tasks have IDs\n          const tasksWithIds = tasksResponse.data.map((task, index) => ({\n            id: task.id || `task-${Date.now()}-${index}`,\n            // Generate ID if missing\n            ...task\n          }));\n          console.log(`Setting ${tasksWithIds.length} tasks`);\n          setTasks(tasksWithIds);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n        console.log('Employees Response:', employeesResponse);\n        if (Array.isArray(employeesResponse.data)) {\n          console.log('Setting employees:', employeesResponse.data);\n          setEmployees(employeesResponse.data);\n        }\n        console.log('Employees fetched:', employeesResponse.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const {\n      value\n    } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending bulk tasks:', {\n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response2;\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: (_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.data,\n            status: (_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status,\n            config: apiError.config,\n            requestData: {\n              tasks: tasksData\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Format employee-department pairs if they exist\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n\n        // Format the pairs for the API\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee,\n          department: pair.department,\n          email: pair.email\n        }));\n        console.log('Sending employee-department pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST'\n          }\n        });\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: formattedPairs\n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n\n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          console.error('Error saving employee-department pairs:', apiError);\n          throw new Error(`Failed to save employee-department pairs: ${apiError.message}`);\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n\n      // Refresh the page\n      window.location.reload();\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        config: error.config,\n        stack: error.stack\n      });\n      alert(`Error saving bulk data: \n        ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}\n        \n        Status: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'Unknown'}\n        Details: ${JSON.stringify((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      var _employees$find, _employees$find2;\n      const taskData = {\n        id: task.id,\n        // Include ID if it exists (for updates)\n        name: task.taskName,\n        employee: task.employee,\n        department: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n        date: task.date,\n        status: task.status || 'pending',\n        comments: task.comments,\n        email: ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || ''\n      };\n      console.log('Submitting task:', taskData);\n\n      // Use the same endpoint for both create and update\n      const response = await axios.post('http://localhost:5000/api/tasks', taskData);\n      console.log('Task operation successful:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Show success message\n      alert(task.id ? 'Task updated successfully!' : 'Task created successfully!');\n\n      // Refresh tasks list\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      if (Array.isArray(tasksResponse.data)) {\n        setTasks(tasksResponse.data);\n      }\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      console.error('Error saving task:', error);\n      const errorMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || error.message;\n      alert(`Error ${task.id ? 'updating' : 'creating'} task: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkEmployeeDepartment\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkEmployeeDepartment\",\n            value: bulkEmployeeDepartment,\n            onChange: handleBulkEmployeeDepartmentChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleDeleteAllData,\n          className: \"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\",\n          children: \"Delete All Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), tasks.map((taskItem, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id || `new-task-${index}-${taskItem.name}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this), employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find3 = employees.find(emp => emp.name === task.employee)) === null || _employees$find3 === void 0 ? void 0 : _employees$find3.department) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find4 = employees.find(emp => emp.name === task.employee)) === null || _employees$find4 === void 0 ? void 0 : _employees$find4.email) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center pt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskInput","_employees$find3","_parsedEmployeeDepart","_employees$find4","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","console","log","fetchData","tasksResponse","get","Array","isArray","data","tasksWithIds","map","index","id","Date","now","length","employeesResponse","error","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","employeeDepartment","department","email","item","handleTaskSelection","prev","handleChange","name","selectedEmployee","find","emp","handleBulkDataSubmission","tasksData","status","createdAt","toISOString","requestDetails","url","method","headers","post","apiError","_apiError$response","_apiError$response2","message","response","config","requestData","formattedPairs","employeeDepartments","pairsResponse","Error","alert","window","location","reload","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","stack","JSON","stringify","handleDeleteAllData","delete","handleSubmit","preventDefault","_employees$find","_employees$find2","taskData","_error$response6","_error$response6$data","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    \n    const fetchData = async () => {\n      try {\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n        console.log('Tasks Response:', tasksResponse);\n        \n        if (Array.isArray(tasksResponse.data)) {\n          // Ensure all tasks have IDs\n          const tasksWithIds = tasksResponse.data.map((task, index) => ({\n            id: task.id || `task-${Date.now()}-${index}`, // Generate ID if missing\n            ...task\n          }));\n          console.log(`Setting ${tasksWithIds.length} tasks`);\n          setTasks(tasksWithIds);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n        console.log('Employees Response:', employeesResponse);\n        \n        if (Array.isArray(employeesResponse.data)) {\n          console.log('Setting employees:', employeesResponse.data);\n          setEmployees(employeesResponse.data);\n        }\n        \n        console.log('Employees fetched:', employeesResponse.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return { employee, department, email };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const { value } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    \n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({ \n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        \n        console.log('Sending bulk tasks:', { \n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \n            tasks: tasksData \n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { tasks: tasksData }\n          });\n          throw apiError;\n        }\n      }\n\n      // Format employee-department pairs if they exist\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        \n        // Format the pairs for the API\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee,\n          department: pair.department,\n          email: pair.email\n        }));\n\n        console.log('Sending employee-department pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST'\n          }\n        });\n\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', { \n            employeeDepartments: formattedPairs \n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n          \n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          console.error('Error saving employee-department pairs:', apiError);\n          throw new Error(`Failed to save employee-department pairs: ${apiError.message}`);\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n\n      // Refresh the page\n      window.location.reload();\n\n    } catch (error) {\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        config: error.config,\n        stack: error.stack\n      });\n      \n      alert(`Error saving bulk data: \n        ${error.response?.data?.error || error.message}\n        \n        Status: ${error.response?.status || 'Unknown'}\n        Details: ${JSON.stringify(error.response?.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const taskData = {\n        id: task.id, // Include ID if it exists (for updates)\n        name: task.taskName,\n        employee: task.employee,\n        department: employees.find(emp => emp.name === task.employee)?.department || '',\n        date: task.date,\n        status: task.status || 'pending',\n        comments: task.comments,\n        email: employees.find(emp => emp.name === task.employee)?.email || ''\n      };\n\n      console.log('Submitting task:', taskData);\n\n      // Use the same endpoint for both create and update\n      const response = await axios.post('http://localhost:5000/api/tasks', taskData);\n      \n      console.log('Task operation successful:', response.data);\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Show success message\n      alert(task.id ? 'Task updated successfully!' : 'Task created successfully!');\n\n      // Refresh tasks list\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      if (Array.isArray(tasksResponse.data)) {\n        setTasks(tasksResponse.data);\n      }\n    } catch (error) {\n      console.error('Error saving task:', error);\n      const errorMessage = error.response?.data?.error || error.message;\n      alert(`Error ${task.id ? 'updating' : 'creating'} task: ${errorMessage}\\nPlease try again.`);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Bulk Inputs Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Bulk Data Input</h2>\n        \n        <div className=\"flex space-x-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkEmployeeDepartment\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Employee-Department-Mail Input (format: employee;department;email)\n            </label>\n            <textarea\n              id=\"bulkEmployeeDepartment\"\n              value={bulkEmployeeDepartment}\n              onChange={handleBulkEmployeeDepartmentChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n            </p>\n          </div>\n        </div>\n\n        {/* Save and Delete Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n          \n          <button\n            type=\"button\"\n            onClick={handleDeleteAllData}\n            className=\"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\"\n          >\n            Delete All Items\n          </button>\n        </div>\n      </div>\n\n      {/* Individual Task Form */}\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Create Task</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Selection Dropdown */}\n          <div>\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Task\n            </label>\n            <select\n              id=\"taskName\"\n              name=\"taskName\"\n              value={task.taskName}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select a task</option>\n              {tasks.map((taskItem, index) => (\n                <option \n                  key={taskItem.id || `new-task-${index}-${taskItem.name}`}\n                  value={taskItem.name}\n                >\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div>\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {employees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div>\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div>\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"email\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n                employees.find(emp => emp.name === task.employee)?.email || \n                ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div>\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Due Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div>\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center pt-4\">\n            <button\n              type=\"submit\"\n              className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            >\n              Update Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
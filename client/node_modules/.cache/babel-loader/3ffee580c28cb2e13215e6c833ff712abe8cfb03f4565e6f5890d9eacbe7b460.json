{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = props => {\n  var _employees$find, _parsedEmployeeDepart, _employees$find2;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // Replace local state with props\n  const {\n    tasks,\n    employees,\n    setTasks,\n    setEmployees,\n    onDataSaved\n  } = props;\n  const uniqueEmployees = [...new Map(employees.map(emp => [emp.id, emp])).values()];\n\n  // State for checked tasks\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n  const fetchData = async () => {\n    try {\n      // Fetch tasks\n      console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      console.log('Tasks Response:', tasksResponse);\n      if (Array.isArray(tasksResponse.data)) {\n        // Ensure all tasks have IDs\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          ...task,\n          id: task.id || `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          taskName: task.name\n        }));\n        console.log(`Setting ${tasksWithIds.length} tasks`);\n        setTasks(tasksWithIds);\n      }\n\n      // Fetch employees\n      console.log('Fetching employees...');\n      const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n      console.log('Employees Response:', employeesResponse);\n      if (Array.isArray(employeesResponse.data)) {\n        console.log('Setting employees:', employeesResponse.data);\n        setEmployees(employeesResponse.data);\n      }\n      console.log('Employees fetched:', employeesResponse.data);\n\n      // Fetch employee-department pairs\n      const employeeDepartmentsResponse = await axios.get('http://localhost:5000/api/employee-departments');\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        console.log('Setting employee-departments:', employeeDepartmentsResponse.data);\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        console.log('No employee-departments data found, setting empty array');\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '').map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    }).filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const {\n      value\n    } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      console.log('=== BULK DATA SUBMISSION STARTED ===');\n\n      // Process employee-department updates first\n      if (parsedEmployeeDepartment.length > 0) {\n        try {\n          // Create valid pairs with proper scoping\n          const validPairs = parsedEmployeeDepartment.map(pair => {\n            var _pair$employee, _pair$department, _pair$email;\n            return {\n              employee: ((_pair$employee = pair.employee) === null || _pair$employee === void 0 ? void 0 : _pair$employee.trim()) || '',\n              department: ((_pair$department = pair.department) === null || _pair$department === void 0 ? void 0 : _pair$department.trim()) || '',\n              email: (_pair$email = pair.email) === null || _pair$email === void 0 ? void 0 : _pair$email.trim().toLowerCase()\n            };\n          }).filter(pair => pair.employee && pair.department && pair.email);\n          console.log('Sending employee updates:', validPairs);\n\n          // Send updates using PUT request\n          const employeeResponse = await axios.put('http://localhost:5000/api/employee-departments', {\n            updates: validPairs\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (employeeResponse.status === 200) {\n            console.log('Successfully updated employee-departments');\n            // Refresh employee data after update\n            await fetchData();\n          }\n        } catch (error) {\n          var _error$response, _error$response$data;\n          console.error('Update error:', error);\n          alert(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Update failed');\n          return;\n        }\n      }\n\n      // Process task updates\n      if (parsedTasks.length > 0) {\n        try {\n          // Update the task processing logic\n          const parsedTasks = bulkTasks.split('\\n').map(line => line.trim()).filter(line => line !== '');\n\n          // Validate task names\n          parsedTasks.forEach(taskText => {\n            if (/\\s/.test(taskText)) {\n              throw new Error(`Invalid task name: \"${taskText}\". Must be a single word without spaces.`);\n            }\n          });\n\n          // Check for duplicates\n          const uniqueNames = new Set(parsedTasks);\n          if (uniqueNames.size !== parsedTasks.length) {\n            throw new Error('Duplicate task names detected');\n          }\n          const taskUpdates = parsedTasks.map(taskText => {\n            return {\n              name: taskText,\n              employee: '',\n              date: new Date().toISOString().split('T')[0],\n              comments: '',\n              status: 'pending',\n              department: '',\n              email: ''\n            };\n          });\n          console.log('Sending task updates:', taskUpdates);\n          const taskResponse = await axios.post('http://localhost:5000/api/tasks/bulk', {\n            tasks: taskUpdates\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if (taskResponse.status === 201) {\n            console.log('Successfully updated tasks');\n            // Refresh task data after update\n            await fetchData();\n          }\n        } catch (error) {\n          var _error$response2, _error$response2$data;\n          console.error('Task update error:', error);\n          alert(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Task update failed');\n          return;\n        }\n      }\n\n      // Reset form state\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Data saved successfully!');\n\n      // Trigger refresh in parent component\n      onDataSaved();\n    } catch (error) {\n      console.error('Submission error:', error);\n      alert('Bulk submission failed');\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Find if task already exists (use case-insensitive name matching)\n      const selectedTask = tasks.find(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n\n      // Prepare task data\n      const taskData = {\n        name: task.taskName,\n        employee: task.employee,\n        date: task.date,\n        comments: task.comments,\n        status: (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) || 'pending',\n        department: task.department,\n        email: task.mail\n      };\n      console.log('Submitting task data:', taskData);\n      console.log('Selected task:', selectedTask);\n      if (selectedTask) {\n        console.log('Updating existing task:', selectedTask.id);\n        // Update existing task\n        const response = await axios.put(`http://localhost:5000/api/tasks/${selectedTask.id}`, {\n          ...taskData,\n          id: selectedTask.id // Explicitly include the ID\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          console.log('Task updated successfully:', response.data);\n          alert('Task updated successfully!');\n        }\n      } else {\n        // Create new task\n        const response = await axios.post('http://localhost:5000/api/tasks', taskData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 201) {\n          console.log('Task created successfully:', response.data);\n          alert('Task created successfully!');\n        }\n      }\n\n      // Reset form\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Refresh data\n      await fetchData();\n\n      // Notify parent component\n      onDataSaved();\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error saving task:', error);\n      alert(`Failed to save task: ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}`);\n    }\n  };\n  const handleCheckTask = taskId => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkEmployeeDepartment\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkEmployeeDepartment\",\n            value: bulkEmployeeDepartment,\n            onChange: handleBulkEmployeeDepartmentChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleDeleteAllData,\n          className: \"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\",\n          children: \"Delete All Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this), tasks.map((taskItem, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id || `new-task-${index}-${taskItem.name}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), uniqueEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center pt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 362,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskInput","props","_employees$find","_parsedEmployeeDepart","_employees$find2","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","employees","setTasks","setEmployees","onDataSaved","uniqueEmployees","Map","map","emp","id","values","checkedTasks","setCheckedTasks","Set","fetchData","console","log","tasksResponse","get","Array","isArray","data","tasksWithIds","index","Date","now","Math","random","toString","substr","name","length","employeesResponse","employeeDepartmentsResponse","error","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","department","email","item","handleTaskSelection","prev","handleChange","selectedEmployee","find","handleBulkDataSubmission","validPairs","_pair$employee","_pair$department","_pair$email","toLowerCase","employeeResponse","put","updates","headers","status","_error$response","_error$response$data","alert","response","line","forEach","taskText","test","Error","uniqueNames","size","taskUpdates","toISOString","taskResponse","post","_error$response2","_error$response2$data","handleDeleteAllData","delete","window","location","reload","handleSubmit","preventDefault","selectedTask","t","taskData","_error$response3","_error$response3$data","message","handleCheckTask","taskId","newChecked","has","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = (props) => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // Replace local state with props\n  const { tasks, employees, setTasks, setEmployees, onDataSaved } = props;\n  const uniqueEmployees = [...new Map(employees.map(emp => [emp.id, emp])).values()];\n\n  // State for checked tasks\n  const [checkedTasks, setCheckedTasks] = useState(new Set());\n\n  const fetchData = async () => {\n    try {\n      // Fetch tasks\n      console.log('Attempting to fetch tasks from:', 'http://localhost:5000/api/tasks');\n      const tasksResponse = await axios.get('http://localhost:5000/api/tasks');\n      console.log('Tasks Response:', tasksResponse);\n      \n      if (Array.isArray(tasksResponse.data)) {\n        // Ensure all tasks have IDs\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          ...task,\n          id: task.id || `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          taskName: task.name\n        }));\n        console.log(`Setting ${tasksWithIds.length} tasks`);\n        setTasks(tasksWithIds);\n      }\n\n      // Fetch employees\n      console.log('Fetching employees...');\n      const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n      console.log('Employees Response:', employeesResponse);\n      \n      if (Array.isArray(employeesResponse.data)) {\n        console.log('Setting employees:', employeesResponse.data);\n        setEmployees(employeesResponse.data);\n      }\n      \n      console.log('Employees fetched:', employeesResponse.data);\n\n      // Fetch employee-department pairs\n      const employeeDepartmentsResponse = await axios.get('http://localhost:5000/api/employee-departments');\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        console.log('Setting employee-departments:', employeeDepartmentsResponse.data);\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        console.log('No employee-departments data found, setting empty array');\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department-email triplets (split by new line and delimiter)\n    const pairs = value.split('\\n')\n      .filter(pair => pair.trim() !== '')\n      .map(pair => {\n        const [employee, department, email] = pair.split(';').map(item => item.trim());\n        return { employee, department, email };\n      })\n      .filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const { value } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    \n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      console.log('=== BULK DATA SUBMISSION STARTED ===');\n      \n      // Process employee-department updates first\n      if (parsedEmployeeDepartment.length > 0) {\n        try {\n          // Create valid pairs with proper scoping\n          const validPairs = parsedEmployeeDepartment.map(pair => ({\n            employee: pair.employee?.trim() || '',\n            department: pair.department?.trim() || '',\n            email: pair.email?.trim().toLowerCase()\n          })).filter(pair => pair.employee && pair.department && pair.email);\n\n          console.log('Sending employee updates:', validPairs);\n          \n          // Send updates using PUT request\n          const employeeResponse = await axios.put(\n            'http://localhost:5000/api/employee-departments',\n            { updates: validPairs },\n            { headers: { 'Content-Type': 'application/json' } }\n          );\n\n          if (employeeResponse.status === 200) {\n            console.log('Successfully updated employee-departments');\n            // Refresh employee data after update\n            await fetchData();\n          }\n\n        } catch (error) {\n          console.error('Update error:', error);\n          alert(error.response?.data?.error || 'Update failed');\n          return;\n        }\n      }\n\n      // Process task updates\n      if (parsedTasks.length > 0) {\n        try {\n          // Update the task processing logic\n          const parsedTasks = bulkTasks\n            .split('\\n')\n            .map(line => line.trim())\n            .filter(line => line !== '');\n\n          // Validate task names\n          parsedTasks.forEach(taskText => {\n            if (/\\s/.test(taskText)) {\n              throw new Error(`Invalid task name: \"${taskText}\". Must be a single word without spaces.`);\n            }\n          });\n\n          // Check for duplicates\n          const uniqueNames = new Set(parsedTasks);\n          if (uniqueNames.size !== parsedTasks.length) {\n            throw new Error('Duplicate task names detected');\n          }\n\n          const taskUpdates = parsedTasks.map(taskText => {\n            return {\n              name: taskText,\n              employee: '',\n              date: new Date().toISOString().split('T')[0],\n              comments: '',\n              status: 'pending',\n              department: '',\n              email: ''\n            };\n          });\n\n          console.log('Sending task updates:', taskUpdates);\n\n          const taskResponse = await axios.post(\n            'http://localhost:5000/api/tasks/bulk', \n            { tasks: taskUpdates },\n            { headers: { 'Content-Type': 'application/json' } }\n          );\n\n          if (taskResponse.status === 201) {\n            console.log('Successfully updated tasks');\n            // Refresh task data after update\n            await fetchData();\n          }\n        } catch (error) {\n          console.error('Task update error:', error);\n          alert(error.response?.data?.error || 'Task update failed');\n          return;\n        }\n      }\n\n      // Reset form state\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Data saved successfully!');\n\n      // Trigger refresh in parent component\n      onDataSaved();\n\n    } catch (error) {\n      console.error('Submission error:', error);\n      alert('Bulk submission failed');\n    }\n  };\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      // Find if task already exists (use case-insensitive name matching)\n      const selectedTask = tasks.find(t => \n        t.name.toLowerCase() === task.taskName.toLowerCase()\n      );\n      \n      // Prepare task data\n      const taskData = {\n        name: task.taskName,\n        employee: task.employee,\n        date: task.date,\n        comments: task.comments,\n        status: selectedTask?.status || 'pending',\n        department: task.department,\n        email: task.mail\n      };\n\n      console.log('Submitting task data:', taskData);\n      console.log('Selected task:', selectedTask);\n\n      if (selectedTask) {\n        console.log('Updating existing task:', selectedTask.id);\n        // Update existing task\n        const response = await axios.put(\n          `http://localhost:5000/api/tasks/${selectedTask.id}`,\n          {\n            ...taskData,\n            id: selectedTask.id  // Explicitly include the ID\n          },\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        if (response.status === 200) {\n          console.log('Task updated successfully:', response.data);\n          alert('Task updated successfully!');\n        }\n      } else {\n        // Create new task\n        const response = await axios.post(\n          'http://localhost:5000/api/tasks',\n          taskData,\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        if (response.status === 201) {\n          console.log('Task created successfully:', response.data);\n          alert('Task created successfully!');\n        }\n      }\n\n      // Reset form\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Refresh data\n      await fetchData();\n      \n      // Notify parent component\n      onDataSaved();\n\n    } catch (error) {\n      console.error('Error saving task:', error);\n      alert(`Failed to save task: ${error.response?.data?.error || error.message}`);\n    }\n  };\n\n  const handleCheckTask = (taskId) => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Bulk Inputs Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Bulk Data Input</h2>\n        \n        <div className=\"flex space-x-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkEmployeeDepartment\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Employee-Department-Mail Input (format: employee;department;email)\n            </label>\n            <textarea\n              id=\"bulkEmployeeDepartment\"\n              value={bulkEmployeeDepartment}\n              onChange={handleBulkEmployeeDepartmentChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n            </p>\n          </div>\n        </div>\n\n        {/* Save and Delete Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n          \n          <button\n            type=\"button\"\n            onClick={handleDeleteAllData}\n            className=\"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\"\n          >\n            Delete All Items\n          </button>\n        </div>\n      </div>\n\n      {/* Individual Task Form */}\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Create Task</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Selection Dropdown */}\n          <div>\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Task\n            </label>\n            <select\n              id=\"taskName\"\n              name=\"taskName\"\n              value={task.taskName}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select a task</option>\n              {tasks.map((taskItem, index) => (\n                <option \n                  key={taskItem.id || `new-task-${index}-${taskItem.name}`}\n                  value={taskItem.name}\n                >\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div>\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {uniqueEmployees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div>\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div>\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"email\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n                employees.find(emp => emp.name === task.employee)?.email || \n                ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div>\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Due Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div>\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center pt-4\">\n            <button\n              type=\"submit\"\n              className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            >\n              Update Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskInput; "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAA,IAAAC,eAAA,EAAAC,qBAAA,EAAAC,gBAAA;EAC3B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC;IAC/BY,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAM,CAACqB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACxE,MAAM,CAACuB,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAE5E;EACA,MAAM;IAAEyB,KAAK;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,YAAY;IAAEC;EAAY,CAAC,GAAGvB,KAAK;EACvE,MAAMwB,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACL,SAAS,CAACM,GAAG,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,EAAE,EAAED,GAAG,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC;;EAElF;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGrC,QAAQ,CAAC,IAAIsC,GAAG,CAAC,CAAC,CAAC;EAE3D,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF;MACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE,iCAAiC,CAAC;MACjF,MAAMC,aAAa,GAAG,MAAMxC,KAAK,CAACyC,GAAG,CAAC,iCAAiC,CAAC;MACxEH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,aAAa,CAAC;MAE7C,IAAIE,KAAK,CAACC,OAAO,CAACH,aAAa,CAACI,IAAI,CAAC,EAAE;QACrC;QACA,MAAMC,YAAY,GAAGL,aAAa,CAACI,IAAI,CAACd,GAAG,CAAC,CAACtB,IAAI,EAAEsC,KAAK,MAAM;UAC5D,GAAGtC,IAAI;UACPwB,EAAE,EAAExB,IAAI,CAACwB,EAAE,IAAI,QAAQe,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UAC9E1C,QAAQ,EAAEF,IAAI,CAAC6C;QACjB,CAAC,CAAC,CAAC;QACHf,OAAO,CAACC,GAAG,CAAC,WAAWM,YAAY,CAACS,MAAM,QAAQ,CAAC;QACnD7B,QAAQ,CAACoB,YAAY,CAAC;MACxB;;MAEA;MACAP,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAMgB,iBAAiB,GAAG,MAAMvD,KAAK,CAACyC,GAAG,CAAC,qCAAqC,CAAC;MAChFH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEgB,iBAAiB,CAAC;MAErD,IAAIb,KAAK,CAACC,OAAO,CAACY,iBAAiB,CAACX,IAAI,CAAC,EAAE;QACzCN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEgB,iBAAiB,CAACX,IAAI,CAAC;QACzDlB,YAAY,CAAC6B,iBAAiB,CAACX,IAAI,CAAC;MACtC;MAEAN,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEgB,iBAAiB,CAACX,IAAI,CAAC;;MAEzD;MACA,MAAMY,2BAA2B,GAAG,MAAMxD,KAAK,CAACyC,GAAG,CAAC,gDAAgD,CAAC;MACrG,IAAIC,KAAK,CAACC,OAAO,CAACa,2BAA2B,CAACZ,IAAI,CAAC,EAAE;QACnDN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEiB,2BAA2B,CAACZ,IAAI,CAAC;QAC9EtB,2BAA2B,CAACkC,2BAA2B,CAACZ,IAAI,CAAC;MAC/D,CAAC,MAAM;QACLN,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;QACtEjB,2BAA2B,CAAC,EAAE,CAAC;MACjC;IACF,CAAC,CAAC,OAAOmC,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED1D,SAAS,CAAC,MAAM;IACduC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IACxDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMqB,qBAAqB,GAAIC,CAAC,IAAK;IACnC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5B5C,YAAY,CAAC4C,KAAK,CAAC;IACnB;IACA,MAAMrC,KAAK,GAAGqC,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACvD,IAAI,IAAIA,IAAI,CAACwD,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IAClE9C,cAAc,CAACK,KAAK,CAAC;EACvB,CAAC;;EAED;EACA,MAAM0C,kCAAkC,GAAIN,CAAC,IAAK;IAChD,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BxC,yBAAyB,CAACwC,KAAK,CAAC;IAChC;IACA,MAAMM,KAAK,GAAGN,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,CAC5BC,MAAM,CAACI,IAAI,IAAIA,IAAI,CAACH,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAClClC,GAAG,CAACqC,IAAI,IAAI;MACX,MAAM,CAACxD,QAAQ,EAAEyD,UAAU,EAAEC,KAAK,CAAC,GAAGF,IAAI,CAACL,KAAK,CAAC,GAAG,CAAC,CAAChC,GAAG,CAACwC,IAAI,IAAIA,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC;MAC9E,OAAO;QAAErD,QAAQ;QAAEyD,UAAU;QAAEC;MAAM,CAAC;IACxC,CAAC,CAAC,CACDN,MAAM,CAACI,IAAI,IAAIA,IAAI,CAACxD,QAAQ,IAAIwD,IAAI,CAACC,UAAU,IAAID,IAAI,CAACE,KAAK,CAAC;IACjE/C,2BAA2B,CAAC4C,KAAK,CAAC;EACpC,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAIZ,CAAC,IAAK;IACjC,MAAM;MAAEC;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAC1BpD,OAAO,CAAC+D,IAAI,KAAK;MACf,GAAGA,IAAI;MACP9D,QAAQ,EAAEkD;IACZ,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMa,YAAY,GAAId,CAAC,IAAK;IAC1B,MAAM;MAAEN,IAAI;MAAEO;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAEhC,IAAIR,IAAI,KAAK,UAAU,EAAE;MACvB5C,OAAO,CAAC+D,IAAI,KAAK;QACf,GAAGA,IAAI;QACP9D,QAAQ,EAAEkD;MACZ,CAAC,CAAC,CAAC;IACL,CAAC,MAAM,IAAIP,IAAI,KAAK,UAAU,EAAE;MAC9B;MACA,MAAMqB,gBAAgB,GAAGlD,SAAS,CAACmD,IAAI,CAAC5C,GAAG,IAAIA,GAAG,CAACsB,IAAI,KAAKO,KAAK,CAAC;MAClEnD,OAAO,CAAC+D,IAAI,KAAK;QACf,GAAGA,IAAI;QACP7D,QAAQ,EAAEiD,KAAK;QACfQ,UAAU,EAAEM,gBAAgB,GAAGA,gBAAgB,CAACN,UAAU,GAAG,EAAE;QAC/DxD,IAAI,EAAE8D,gBAAgB,GAAGA,gBAAgB,CAACL,KAAK,GAAG;MACpD,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACL5D,OAAO,CAAC+D,IAAI,KAAK;QACf,GAAGA,IAAI;QACP,CAACnB,IAAI,GAAGO;MACV,CAAC,CAAC,CAAC;IACL;EACF,CAAC;;EAED;EACA,MAAMgB,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,IAAI;MACFtC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;;MAEnD;MACA,IAAIlB,wBAAwB,CAACiC,MAAM,GAAG,CAAC,EAAE;QACvC,IAAI;UACF;UACA,MAAMuB,UAAU,GAAGxD,wBAAwB,CAACS,GAAG,CAACqC,IAAI;YAAA,IAAAW,cAAA,EAAAC,gBAAA,EAAAC,WAAA;YAAA,OAAK;cACvDrE,QAAQ,EAAE,EAAAmE,cAAA,GAAAX,IAAI,CAACxD,QAAQ,cAAAmE,cAAA,uBAAbA,cAAA,CAAed,IAAI,CAAC,CAAC,KAAI,EAAE;cACrCI,UAAU,EAAE,EAAAW,gBAAA,GAAAZ,IAAI,CAACC,UAAU,cAAAW,gBAAA,uBAAfA,gBAAA,CAAiBf,IAAI,CAAC,CAAC,KAAI,EAAE;cACzCK,KAAK,GAAAW,WAAA,GAAEb,IAAI,CAACE,KAAK,cAAAW,WAAA,uBAAVA,WAAA,CAAYhB,IAAI,CAAC,CAAC,CAACiB,WAAW,CAAC;YACxC,CAAC;UAAA,CAAC,CAAC,CAAClB,MAAM,CAACI,IAAI,IAAIA,IAAI,CAACxD,QAAQ,IAAIwD,IAAI,CAACC,UAAU,IAAID,IAAI,CAACE,KAAK,CAAC;UAElE/B,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEsC,UAAU,CAAC;;UAEpD;UACA,MAAMK,gBAAgB,GAAG,MAAMlF,KAAK,CAACmF,GAAG,CACtC,gDAAgD,EAChD;YAAEC,OAAO,EAAEP;UAAW,CAAC,EACvB;YAAEQ,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB;UAAE,CACpD,CAAC;UAED,IAAIH,gBAAgB,CAACI,MAAM,KAAK,GAAG,EAAE;YACnChD,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;YACxD;YACA,MAAMF,SAAS,CAAC,CAAC;UACnB;QAEF,CAAC,CAAC,OAAOoB,KAAK,EAAE;UAAA,IAAA8B,eAAA,EAAAC,oBAAA;UACdlD,OAAO,CAACmB,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;UACrCgC,KAAK,CAAC,EAAAF,eAAA,GAAA9B,KAAK,CAACiC,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgB3C,IAAI,cAAA4C,oBAAA,uBAApBA,oBAAA,CAAsB/B,KAAK,KAAI,eAAe,CAAC;UACrD;QACF;MACF;;MAEA;MACA,IAAIxC,WAAW,CAACqC,MAAM,GAAG,CAAC,EAAE;QAC1B,IAAI;UACF;UACA,MAAMrC,WAAW,GAAGF,SAAS,CAC1B+C,KAAK,CAAC,IAAI,CAAC,CACXhC,GAAG,CAAC6D,IAAI,IAAIA,IAAI,CAAC3B,IAAI,CAAC,CAAC,CAAC,CACxBD,MAAM,CAAC4B,IAAI,IAAIA,IAAI,KAAK,EAAE,CAAC;;UAE9B;UACA1E,WAAW,CAAC2E,OAAO,CAACC,QAAQ,IAAI;YAC9B,IAAI,IAAI,CAACC,IAAI,CAACD,QAAQ,CAAC,EAAE;cACvB,MAAM,IAAIE,KAAK,CAAC,uBAAuBF,QAAQ,0CAA0C,CAAC;YAC5F;UACF,CAAC,CAAC;;UAEF;UACA,MAAMG,WAAW,GAAG,IAAI5D,GAAG,CAACnB,WAAW,CAAC;UACxC,IAAI+E,WAAW,CAACC,IAAI,KAAKhF,WAAW,CAACqC,MAAM,EAAE;YAC3C,MAAM,IAAIyC,KAAK,CAAC,+BAA+B,CAAC;UAClD;UAEA,MAAMG,WAAW,GAAGjF,WAAW,CAACa,GAAG,CAAC+D,QAAQ,IAAI;YAC9C,OAAO;cACLxC,IAAI,EAAEwC,QAAQ;cACdlF,QAAQ,EAAE,EAAE;cACZE,IAAI,EAAE,IAAIkC,IAAI,CAAC,CAAC,CAACoD,WAAW,CAAC,CAAC,CAACrC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;cAC5ChD,QAAQ,EAAE,EAAE;cACZwE,MAAM,EAAE,SAAS;cACjBlB,UAAU,EAAE,EAAE;cACdC,KAAK,EAAE;YACT,CAAC;UACH,CAAC,CAAC;UAEF/B,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE2D,WAAW,CAAC;UAEjD,MAAME,YAAY,GAAG,MAAMpG,KAAK,CAACqG,IAAI,CACnC,sCAAsC,EACtC;YAAE9E,KAAK,EAAE2E;UAAY,CAAC,EACtB;YAAEb,OAAO,EAAE;cAAE,cAAc,EAAE;YAAmB;UAAE,CACpD,CAAC;UAED,IAAIe,YAAY,CAACd,MAAM,KAAK,GAAG,EAAE;YAC/BhD,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;YACzC;YACA,MAAMF,SAAS,CAAC,CAAC;UACnB;QACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;UAAA,IAAA6C,gBAAA,EAAAC,qBAAA;UACdjE,OAAO,CAACmB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1CgC,KAAK,CAAC,EAAAa,gBAAA,GAAA7C,KAAK,CAACiC,QAAQ,cAAAY,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB1D,IAAI,cAAA2D,qBAAA,uBAApBA,qBAAA,CAAsB9C,KAAK,KAAI,oBAAoB,CAAC;UAC1D;QACF;MACF;;MAEA;MACAzC,YAAY,CAAC,EAAE,CAAC;MAChBI,yBAAyB,CAAC,EAAE,CAAC;MAC7BF,cAAc,CAAC,EAAE,CAAC;MAClBI,2BAA2B,CAAC,EAAE,CAAC;;MAE/B;MACAmE,KAAK,CAAC,0BAA0B,CAAC;;MAEjC;MACA9D,WAAW,CAAC,CAAC;IAEf,CAAC,CAAC,OAAO8B,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCgC,KAAK,CAAC,wBAAwB,CAAC;IACjC;EACF,CAAC;;EAED;EACA,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAM1F,KAAK,CAACyG,MAAM,CAAC,qCAAqC,CAAC;MAC1E,IAAIf,QAAQ,CAACJ,MAAM,KAAK,GAAG,EAAE;QAC3BG,KAAK,CAAC,wCAAwC,CAAC;QAC/C;QACAvE,cAAc,CAAC,EAAE,CAAC;QAClBI,2BAA2B,CAAC,EAAE,CAAC;QAC/BN,YAAY,CAAC,EAAE,CAAC;QAChBI,yBAAyB,CAAC,EAAE,CAAC;QAC7BX,OAAO,CAAC;UACNC,QAAQ,EAAE,EAAE;UACZC,QAAQ,EAAE,EAAE;UACZyD,UAAU,EAAE,EAAE;UACdxD,IAAI,EAAE,EAAE;UACRC,IAAI,EAAE,EAAE;UACRC,QAAQ,EAAE;QACZ,CAAC,CAAC;;QAEF;QACA4F,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC1B;IACF,CAAC,CAAC,OAAOnD,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CgC,KAAK,CAAC,0CAA0C,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAMoB,YAAY,GAAG,MAAOlD,CAAC,IAAK;IAChCA,CAAC,CAACmD,cAAc,CAAC,CAAC;IAElB,IAAI;MACF;MACA,MAAMC,YAAY,GAAGxF,KAAK,CAACoD,IAAI,CAACqC,CAAC,IAC/BA,CAAC,CAAC3D,IAAI,CAAC4B,WAAW,CAAC,CAAC,KAAKzE,IAAI,CAACE,QAAQ,CAACuE,WAAW,CAAC,CACrD,CAAC;;MAED;MACA,MAAMgC,QAAQ,GAAG;QACf5D,IAAI,EAAE7C,IAAI,CAACE,QAAQ;QACnBC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;QACvBE,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,QAAQ,EAAEN,IAAI,CAACM,QAAQ;QACvBwE,MAAM,EAAE,CAAAyB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEzB,MAAM,KAAI,SAAS;QACzClB,UAAU,EAAE5D,IAAI,CAAC4D,UAAU;QAC3BC,KAAK,EAAE7D,IAAI,CAACI;MACd,CAAC;MAED0B,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE0E,QAAQ,CAAC;MAC9C3E,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEwE,YAAY,CAAC;MAE3C,IAAIA,YAAY,EAAE;QAChBzE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEwE,YAAY,CAAC/E,EAAE,CAAC;QACvD;QACA,MAAM0D,QAAQ,GAAG,MAAM1F,KAAK,CAACmF,GAAG,CAC9B,mCAAmC4B,YAAY,CAAC/E,EAAE,EAAE,EACpD;UACE,GAAGiF,QAAQ;UACXjF,EAAE,EAAE+E,YAAY,CAAC/E,EAAE,CAAE;QACvB,CAAC,EACD;UAAEqD,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB;QAAE,CACpD,CAAC;QAED,IAAIK,QAAQ,CAACJ,MAAM,KAAK,GAAG,EAAE;UAC3BhD,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEmD,QAAQ,CAAC9C,IAAI,CAAC;UACxD6C,KAAK,CAAC,4BAA4B,CAAC;QACrC;MACF,CAAC,MAAM;QACL;QACA,MAAMC,QAAQ,GAAG,MAAM1F,KAAK,CAACqG,IAAI,CAC/B,iCAAiC,EACjCY,QAAQ,EACR;UAAE5B,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB;QAAE,CACpD,CAAC;QAED,IAAIK,QAAQ,CAACJ,MAAM,KAAK,GAAG,EAAE;UAC3BhD,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEmD,QAAQ,CAAC9C,IAAI,CAAC;UACxD6C,KAAK,CAAC,4BAA4B,CAAC;QACrC;MACF;;MAEA;MACAhF,OAAO,CAAC;QACNC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZyD,UAAU,EAAE,EAAE;QACdxD,IAAI,EAAE,EAAE;QACRC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE;MACZ,CAAC,CAAC;;MAEF;MACA,MAAMuB,SAAS,CAAC,CAAC;;MAEjB;MACAV,WAAW,CAAC,CAAC;IAEf,CAAC,CAAC,OAAO8B,KAAK,EAAE;MAAA,IAAAyD,gBAAA,EAAAC,qBAAA;MACd7E,OAAO,CAACmB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CgC,KAAK,CAAC,wBAAwB,EAAAyB,gBAAA,GAAAzD,KAAK,CAACiC,QAAQ,cAAAwB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtE,IAAI,cAAAuE,qBAAA,uBAApBA,qBAAA,CAAsB1D,KAAK,KAAIA,KAAK,CAAC2D,OAAO,EAAE,CAAC;IAC/E;EACF,CAAC;EAED,MAAMC,eAAe,GAAIC,MAAM,IAAK;IAClC,MAAMC,UAAU,GAAG,IAAInF,GAAG,CAACF,YAAY,CAAC;IACxC,IAAIqF,UAAU,CAACC,GAAG,CAACF,MAAM,CAAC,EAAE;MAC1BC,UAAU,CAACd,MAAM,CAACa,MAAM,CAAC;IAC3B,CAAC,MAAM;MACLC,UAAU,CAACE,GAAG,CAACH,MAAM,CAAC;IACxB;IACAnF,eAAe,CAACoF,UAAU,CAAC;EAC7B,CAAC;EAED,oBACErH,OAAA;IAAKwH,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAEjDzH,OAAA;MAAKwH,SAAS,EAAC,6CAA6C;MAAAC,QAAA,gBAC1DzH,OAAA;QAAIwH,SAAS,EAAC,wCAAwC;QAAAC,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE3E7H,OAAA;QAAKwH,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAE7BzH,OAAA;UAAKwH,SAAS,EAAC,OAAO;UAAAC,QAAA,gBACpBzH,OAAA;YACE8H,OAAO,EAAC,WAAW;YACnBN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACE8B,EAAE,EAAC,WAAW;YACd4B,KAAK,EAAE7C,SAAU;YACjBkH,QAAQ,EAAEvE,qBAAsB;YAChCgE,SAAS,EAAC,oFAAoF;YAC9FQ,IAAI,EAAC,GAAG;YACRC,WAAW,EAAC;UAAoC;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC,eACF7H,OAAA;YAAGwH,SAAS,EAAC,4BAA4B;YAAAC,QAAA,GACtC1G,WAAW,CAACqC,MAAM,EAAC,0BACtB;UAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAGN7H,OAAA;UAAKwH,SAAS,EAAC,OAAO;UAAAC,QAAA,gBACpBzH,OAAA;YACE8H,OAAO,EAAC,wBAAwB;YAChCN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACE8B,EAAE,EAAC,wBAAwB;YAC3B4B,KAAK,EAAEzC,sBAAuB;YAC9B8G,QAAQ,EAAEhE,kCAAmC;YAC7CyD,SAAS,EAAC,oFAAoF;YAC9FQ,IAAI,EAAC,GAAG;YACRC,WAAW,EAAC;UAAgG;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7G,CAAC,eACF7H,OAAA;YAAGwH,SAAS,EAAC,4BAA4B;YAAAC,QAAA,GACtCtG,wBAAwB,CAACiC,MAAM,EAAC,qDACnC;UAAA;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGN7H,OAAA;QAAKwH,SAAS,EAAC,oCAAoC;QAAAC,QAAA,gBACjDzH,OAAA;UACEkI,IAAI,EAAC,QAAQ;UACbC,OAAO,EAAEzD,wBAAyB;UAClC8C,SAAS,EAAC,0EAA0E;UACpFY,QAAQ,EAAErH,WAAW,CAACqC,MAAM,KAAK,CAAC,IAAIjC,wBAAwB,CAACiC,MAAM,KAAK,CAAE;UAAAqE,QAAA,EAC7E;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAET7H,OAAA;UACEkI,IAAI,EAAC,QAAQ;UACbC,OAAO,EAAE7B,mBAAoB;UAC7BkB,SAAS,EAAC,+EAA+E;UAAAC,QAAA,EAC1F;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGN7H,OAAA;MAAKwH,SAAS,EAAC,wCAAwC;MAAAC,QAAA,gBACrDzH,OAAA;QAAIwH,SAAS,EAAC,wCAAwC;QAAAC,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvE7H,OAAA;QAAMqI,QAAQ,EAAE1B,YAAa;QAACa,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAEjDzH,OAAA;UAAAyH,QAAA,gBACEzH,OAAA;YACE8H,OAAO,EAAC,UAAU;YAClBN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACE8B,EAAE,EAAC,UAAU;YACbqB,IAAI,EAAC,UAAU;YACfO,KAAK,EAAEpD,IAAI,CAACE,QAAS;YACrBuH,QAAQ,EAAExD,YAAa;YACvBiD,SAAS,EAAC,oFAAoF;YAC9Fc,QAAQ;YAAAb,QAAA,gBAERzH,OAAA;cAAQ0D,KAAK,EAAC,EAAE;cAAA+D,QAAA,EAAC;YAAa;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACtCxG,KAAK,CAACO,GAAG,CAAC,CAAC2G,QAAQ,EAAE3F,KAAK,kBACzB5C,OAAA;cAEE0D,KAAK,EAAE6E,QAAQ,CAACpF,IAAK;cAAAsE,QAAA,EAEpBc,QAAQ,CAACpF;YAAI,GAHToF,QAAQ,CAACzG,EAAE,IAAI,YAAYc,KAAK,IAAI2F,QAAQ,CAACpF,IAAI,EAAE;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIlD,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGN7H,OAAA;UAAAyH,QAAA,gBACEzH,OAAA;YACE8H,OAAO,EAAC,UAAU;YAClBN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACE8B,EAAE,EAAC,UAAU;YACbqB,IAAI,EAAC,UAAU;YACfO,KAAK,EAAEpD,IAAI,CAACG,QAAS;YACrBsH,QAAQ,EAAExD,YAAa;YACvBiD,SAAS,EAAC,oFAAoF;YAC9Fc,QAAQ;YAAAb,QAAA,gBAERzH,OAAA;cAAQ0D,KAAK,EAAC,EAAE;cAAA+D,QAAA,EAAC;YAAkB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC3CnG,eAAe,CAACE,GAAG,CAAEnB,QAAQ,iBAC5BT,OAAA;cAEE0D,KAAK,EAAEjD,QAAQ,CAAC0C,IAAK;cAAAsE,QAAA,EAEpBhH,QAAQ,CAAC0C;YAAI,GAHT,YAAY1C,QAAQ,CAACqB,EAAE,EAAE;cAAA4F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAIxB,CACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAGN7H,OAAA;UAAAyH,QAAA,gBACEzH,OAAA;YACE8H,OAAO,EAAC,YAAY;YACpBN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACEkI,IAAI,EAAC,MAAM;YACXpG,EAAE,EAAC,YAAY;YACfqB,IAAI,EAAC,YAAY;YACjBO,KAAK,EACH,EAAAvD,eAAA,GAAAmB,SAAS,CAACmD,IAAI,CAAC5C,GAAG,IAAIA,GAAG,CAACsB,IAAI,KAAK7C,IAAI,CAACG,QAAQ,CAAC,cAAAN,eAAA,uBAAjDA,eAAA,CAAmD+D,UAAU,KAAI,EAClE;YACDsE,QAAQ;YACRhB,SAAS,EAAC;UAAsD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN7H,OAAA;UAAAyH,QAAA,gBACEzH,OAAA;YACE8H,OAAO,EAAC,MAAM;YACdN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACEkI,IAAI,EAAC,OAAO;YACZpG,EAAE,EAAC,MAAM;YACTqB,IAAI,EAAC,MAAM;YACXO,KAAK,EACH,EAAAtD,qBAAA,GAAAe,wBAAwB,CAACsD,IAAI,CAAC5C,GAAG,IAAIA,GAAG,CAACpB,QAAQ,KAAKH,IAAI,CAACG,QAAQ,CAAC,cAAAL,qBAAA,uBAApEA,qBAAA,CAAsE+D,KAAK,OAAA9D,gBAAA,GAC3EiB,SAAS,CAACmD,IAAI,CAAC5C,GAAG,IAAIA,GAAG,CAACsB,IAAI,KAAK7C,IAAI,CAACG,QAAQ,CAAC,cAAAJ,gBAAA,uBAAjDA,gBAAA,CAAmD8D,KAAK,KACxD,EACD;YACDqE,QAAQ;YACRhB,SAAS,EAAC;UAAsD;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN7H,OAAA;UAAAyH,QAAA,gBACEzH,OAAA;YACE8H,OAAO,EAAC,MAAM;YACdN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACEkI,IAAI,EAAC,MAAM;YACXpG,EAAE,EAAC,MAAM;YACTqB,IAAI,EAAC,MAAM;YACXO,KAAK,EAAEpD,IAAI,CAACK,IAAK;YACjBoH,QAAQ,EAAExD,YAAa;YACvBiD,SAAS,EAAC,oFAAoF;YAC9Fc,QAAQ;UAAA;YAAAZ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN7H,OAAA;UAAAyH,QAAA,gBACEzH,OAAA;YACE8H,OAAO,EAAC,UAAU;YAClBN,SAAS,EAAC,8CAA8C;YAAAC,QAAA,EACzD;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR7H,OAAA;YACE8B,EAAE,EAAC,UAAU;YACbqB,IAAI,EAAC,UAAU;YACfO,KAAK,EAAEpD,IAAI,CAACM,QAAS;YACrBmH,QAAQ,EAAExD,YAAa;YACvBiD,SAAS,EAAC,oFAAoF;YAC9FS,WAAW,EAAC,+BAA+B;YAC3CD,IAAI,EAAC;UAAG;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN7H,OAAA;UAAKwH,SAAS,EAAC,0BAA0B;UAAAC,QAAA,eACvCzH,OAAA;YACEkI,IAAI,EAAC,QAAQ;YACbV,SAAS,EAAC,0EAA0E;YAAAC,QAAA,EACrF;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAED,eAAe5H,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
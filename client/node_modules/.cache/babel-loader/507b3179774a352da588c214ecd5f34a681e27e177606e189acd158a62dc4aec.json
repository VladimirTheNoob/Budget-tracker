{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000 // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n\n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department pairs (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department\n      };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending bulk tasks:', {\n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response2;\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: (_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.data,\n            status: (_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status,\n            config: apiError.config,\n            requestData: {\n              tasks: tasksData\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending employee-department pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: formattedPairs\n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n\n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          var _apiError$response3, _apiError$response4;\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: (_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.data,\n            status: (_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : _apiError$response4.status,\n            config: apiError.config,\n            requestData: {\n              employeeDepartments: formattedPairs\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        config: error.config,\n        stack: error.stack\n      });\n      alert(`Error saving bulk data: \n        ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}\n        \n        Status: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'Unknown'}\n        Details: ${JSON.stringify((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response8, _error$response8$data;\n      console.error('Error creating task:', {\n        message: error.message,\n        response: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n        status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status\n      });\n      alert(`Error creating task: ${((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bulkTasks\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Bulk Tasks Input (one task per line)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"bulkTasks\",\n          value: bulkTasks,\n          onChange: handleBulkTasksChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          rows: \"5\",\n          placeholder: \"Enter multiple tasks, one per line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mt-1\",\n          children: [parsedTasks.length, \" tasks ready to be saved\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"bulkEmployeeDepartment\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Employee-Department Input (format: employee;department)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"bulkEmployeeDepartment\",\n          value: bulkEmployeeDepartment,\n          onChange: handleBulkEmployeeDepartmentChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          rows: \"5\",\n          placeholder: \"Enter employee and department pairs, one per line (e.g., John Doe;Sales)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600 mt-1\",\n          children: [parsedEmployeeDepartment.length, \" employee-department pairs ready to be saved\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-4\",\n          disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"my-8 border-t border-gray-300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), (() => {\n            console.log('Rendering Tasks Dropdown:', {\n              tasksCount: tasks.length,\n              tasksData: tasks\n            });\n            return /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"taskName\",\n              name: \"taskName\",\n              value: task.taskName,\n              onChange: handleTaskSelection,\n              className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this), tasks.map(taskItem => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: taskItem.name,\n                children: [taskItem.name, \" - \", taskItem.description]\n              }, `task-${taskItem.id}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), (() => {\n            console.log('=== EMPLOYEE DROPDOWN DEBUG ===');\n            console.log('Current employees state:', employees);\n            console.log('Current task.employee value:', task.employee);\n            console.log('Number of employees:', employees.length);\n            if (employees.length === 0) {\n              console.log('Warning: No employees available in the dropdown');\n            }\n            return /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"employee\",\n              name: \"employee\",\n              value: task.employee,\n              onChange: handleChange,\n              className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select an employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this), employees.map((employee, index) => {\n                console.log(`Rendering employee option ${index}:`, employee);\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: employee.name,\n                  children: employee.name\n                }, `employee-${employee.id || index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this);\n          })()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n            readOnly: true,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Create Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskInput","_employees$find","task","setTask","taskName","employee","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","fetchData","console","log","tasksResponse","get","timeout","status","data","headers","Array","isArray","length","error","employeesResponse","response","request","message","alert","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","employeeDepartment","map","department","item","handleTaskSelection","selectedValue","prev","handleChange","name","selectedEmployee","find","emp","prevTask","handleBulkDataSubmission","tasksData","createdAt","Date","toISOString","requestDetails","url","method","post","apiError","_apiError$response","_apiError$response2","config","requestData","formattedPairs","employeeDepartments","pairsResponse","_apiError$response3","_apiError$response4","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","stack","JSON","stringify","handleSubmit","preventDefault","_error$response6","_error$response7","_error$response8","_error$response8$data","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","rows","placeholder","type","onClick","disabled","onSubmit","tasksCount","required","taskItem","description","index","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n        \n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000  // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n        \n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department pairs (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department] = pair.split(';').map(item => item.trim());\n      return { employee, department };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({ \n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        \n        console.log('Sending bulk tasks:', { \n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \n            tasks: tasksData \n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { tasks: tasksData }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n\n        console.log('Sending employee-department pairs:', { \n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', { \n            employeeDepartments: formattedPairs \n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n          \n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { employeeDepartments: formattedPairs }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n\n    } catch (error) {\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        config: error.config,\n        stack: error.stack\n      });\n      \n      alert(`Error saving bulk data: \n        ${error.response?.data?.error || error.message}\n        \n        Status: ${error.response?.status || 'Unknown'}\n        Details: ${JSON.stringify(error.response?.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      console.error('Error creating task:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      alert(`Error creating task: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"max-w-3xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Bulk Data Input</h2>\n\n        {/* Bulk Tasks Input */}\n        <div className=\"mb-6\">\n          <label \n            htmlFor=\"bulkTasks\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Bulk Tasks Input (one task per line)\n          </label>\n          <textarea\n            id=\"bulkTasks\"\n            value={bulkTasks}\n            onChange={handleBulkTasksChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            rows=\"5\"\n            placeholder=\"Enter multiple tasks, one per line\"\n          />\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {parsedTasks.length} tasks ready to be saved\n          </p>\n        </div>\n\n        {/* Employee-Department Input */}\n        <div className=\"mb-6\">\n          <label \n            htmlFor=\"bulkEmployeeDepartment\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Employee-Department Input (format: employee;department)\n          </label>\n          <textarea\n            id=\"bulkEmployeeDepartment\"\n            value={bulkEmployeeDepartment}\n            onChange={handleBulkEmployeeDepartmentChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            rows=\"5\"\n            placeholder=\"Enter employee and department pairs, one per line (e.g., John Doe;Sales)\"\n          />\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {parsedEmployeeDepartment.length} employee-department pairs ready to be saved\n          </p>\n        </div>\n\n        {/* Save Bulk Data Button */}\n        <div className=\"mb-6 flex justify-center\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-4\"\n            disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n        </div>\n      </div>\n\n      <hr className=\"my-8 border-t border-gray-300\" />\n\n      <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Create Task</h2>\n        \n        <form onSubmit={handleSubmit}>\n          {/* Task Selection Dropdown */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Select Task\n            </label>\n            {(() => {\n              console.log('Rendering Tasks Dropdown:', {\n                tasksCount: tasks.length,\n                tasksData: tasks\n              });\n              return (\n                <select\n                  id=\"taskName\"\n                  name=\"taskName\"\n                  value={task.taskName}\n                  onChange={handleTaskSelection}\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  required\n                >\n                  <option value=\"\">Select a task</option>\n                  {tasks.map((taskItem) => (\n                    <option \n                      key={`task-${taskItem.id}`} \n                      value={taskItem.name}\n                    >\n                      {taskItem.name} - {taskItem.description}\n                    </option>\n                  ))}\n                </select>\n              );\n            })()}\n          </div>\n\n          {/* Employee Dropdown */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Employee\n            </label>\n            {(() => {\n              console.log('=== EMPLOYEE DROPDOWN DEBUG ===');\n              console.log('Current employees state:', employees);\n              console.log('Current task.employee value:', task.employee);\n              console.log('Number of employees:', employees.length);\n              \n              if (employees.length === 0) {\n                console.log('Warning: No employees available in the dropdown');\n              }\n\n              return (\n                <select\n                  id=\"employee\"\n                  name=\"employee\"\n                  value={task.employee}\n                  onChange={handleChange}\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  required\n                >\n                  <option value=\"\">Select an employee</option>\n                  {employees.map((employee, index) => {\n                    console.log(`Rendering employee option ${index}:`, employee);\n                    return (\n                      <option \n                        key={`employee-${employee.id || index}`} \n                        value={employee.name}\n                      >\n                        {employee.name}\n                      </option>\n                    );\n                  })}\n                </select>\n              );\n            })()}\n          </div>\n\n          {/* Department Display */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex items-center justify-center\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Create Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
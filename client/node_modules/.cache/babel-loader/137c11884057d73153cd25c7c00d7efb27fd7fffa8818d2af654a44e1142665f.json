{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find, _employees$find2;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    department: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department-mail input\n  const [bulkEmployeeDepartmentMail, setBulkEmployeeDepartmentMail] = useState('');\n  const [parsedEmployeeDepartmentMail, setParsedEmployeeDepartmentMail] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000 // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n\n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle bulk employee-department-mail input\n  const handleBulkEmployeeDepartmentMailChange = e => {\n    setBulkEmployeeDepartmentMail(e.target.value);\n  };\n  const parseBulkEmployeeDepartmentMail = () => {\n    const lines = bulkEmployeeDepartmentMail.split('\\n');\n    const parsed = lines.map(line => {\n      const [employee, department, email] = line.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    });\n    setParsedEmployeeDepartmentMail(parsed);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Parse employee-department-mail data if input exists\n      if (bulkEmployeeDepartmentMail.trim() !== '') {\n        const lines = bulkEmployeeDepartmentMail.split('\\n');\n        const parsed = lines.map(line => {\n          const [employee, department, email] = line.split(';').map(item => item.trim());\n          return {\n            employee,\n            department,\n            email\n          };\n        });\n        setParsedEmployeeDepartmentMail(parsed);\n      }\n\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending bulk tasks:', {\n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response2;\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: (_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.data,\n            status: (_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status,\n            config: apiError.config,\n            requestData: {\n              tasks: tasksData\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department-mail pairs to database\n      if (parsedEmployeeDepartmentMail.length > 0) {\n        console.log('Preparing employee-department-mail data:', parsedEmployeeDepartmentMail);\n        const formattedPairs = parsedEmployeeDepartmentMail.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          email: pair.email.trim(),\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending employee-department-mail pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments-mail',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments-mail', {\n            employeeDepartments: formattedPairs\n          });\n          console.log('Employee-department-mail pairs saved successfully:', pairsResponse.data);\n\n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          var _apiError$response3, _apiError$response4;\n          console.error('Detailed API Error for Employee-Departments-Mail:', {\n            message: apiError.message,\n            response: (_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.data,\n            status: (_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : _apiError$response4.status,\n            config: apiError.config,\n            requestData: {\n              employeeDepartments: formattedPairs\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartmentMail('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartmentMail([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n    } catch (error) {\n      console.error('Error in bulk data submission:', error);\n      alert(`Error saving bulk data: ${error.message}`);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data;\n      console.error('Error creating task:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n      alert(`Error creating task: ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2 mr-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            rows: \"5\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-600 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee-department-mail\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Employee-Department-Mail Input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"employee-department-mail\",\n            name: \"employee-department-mail\",\n            value: bulkEmployeeDepartmentMail,\n            onChange: handleBulkEmployeeDepartmentMailChange,\n            placeholder: \"Enter employee;department;e-mail (one per line)\",\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-4\",\n          disabled: bulkTasks.trim() === '' && bulkEmployeeDepartmentMail.trim() === '',\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      className: \"my-8 border-t border-gray-300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-bold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"task\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"task\",\n            name: \"task\",\n            value: task.taskName,\n            onChange: handleTaskSelection,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this), tasks.map(taskItem => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this), employees.map(emp => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: emp.name,\n              children: emp.name\n            }, emp.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n            readOnly: true,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || '',\n            readOnly: true,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-bold mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n            children: \"Create Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskInput","_employees$find","_employees$find2","task","setTask","taskName","employee","department","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartmentMail","setBulkEmployeeDepartmentMail","parsedEmployeeDepartmentMail","setParsedEmployeeDepartmentMail","tasks","setTasks","employees","setEmployees","fetchData","console","log","tasksResponse","get","timeout","status","data","headers","Array","isArray","length","error","employeesResponse","response","request","message","alert","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentMailChange","parseBulkEmployeeDepartmentMail","lines","parsed","map","line","email","item","handleTaskSelection","selectedValue","prev","handleChange","name","selectedEmployee","find","emp","prevTask","handleBulkDataSubmission","tasksData","createdAt","Date","toISOString","requestDetails","url","method","post","apiError","_apiError$response","_apiError$response2","config","requestData","formattedPairs","pair","employeeDepartments","pairsResponse","_apiError$response3","_apiError$response4","handleSubmit","preventDefault","_error$response","_error$response2","_error$response3","_error$response3$data","children","className","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    department: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department-mail input\n  const [bulkEmployeeDepartmentMail, setBulkEmployeeDepartmentMail] = useState('');\n  const [parsedEmployeeDepartmentMail, setParsedEmployeeDepartmentMail] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n        \n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000  // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n        \n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle bulk employee-department-mail input\n  const handleBulkEmployeeDepartmentMailChange = (e) => {\n    setBulkEmployeeDepartmentMail(e.target.value);\n  };\n\n  const parseBulkEmployeeDepartmentMail = () => {\n    const lines = bulkEmployeeDepartmentMail.split('\\n');\n    const parsed = lines.map(line => {\n      const [employee, department, email] = line.split(';').map(item => item.trim());\n      return { employee, department, email };\n    });\n    setParsedEmployeeDepartmentMail(parsed);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department and email\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : '',\n        mail: selectedEmployee ? selectedEmployee.email : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Parse employee-department-mail data if input exists\n      if (bulkEmployeeDepartmentMail.trim() !== '') {\n        const lines = bulkEmployeeDepartmentMail.split('\\n');\n        const parsed = lines.map(line => {\n          const [employee, department, email] = line.split(';').map(item => item.trim());\n          return { employee, department, email };\n        });\n        setParsedEmployeeDepartmentMail(parsed);\n      }\n\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({ \n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        \n        console.log('Sending bulk tasks:', { \n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \n            tasks: tasksData \n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { tasks: tasksData }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department-mail pairs to database\n      if (parsedEmployeeDepartmentMail.length > 0) {\n        console.log('Preparing employee-department-mail data:', parsedEmployeeDepartmentMail);\n        const formattedPairs = parsedEmployeeDepartmentMail.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          email: pair.email.trim(),\n          createdAt: new Date().toISOString()\n        }));\n\n        console.log('Sending employee-department-mail pairs:', { \n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments-mail',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments-mail', { \n            employeeDepartments: formattedPairs \n          });\n          console.log('Employee-department-mail pairs saved successfully:', pairsResponse.data);\n          \n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          console.error('Detailed API Error for Employee-Departments-Mail:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { employeeDepartments: formattedPairs }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartmentMail('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartmentMail([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n\n    } catch (error) {\n      console.error('Error in bulk data submission:', error);\n      alert(`Error saving bulk data: ${error.message}`);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      console.error('Error creating task:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      alert(`Error creating task: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"max-w-3xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Bulk Data Input</h2>\n\n        <div className=\"flex mb-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2 mr-4\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              rows=\"5\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-600 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department-Mail Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"employee-department-mail\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Employee-Department-Mail Input\n            </label>\n            <textarea\n              id=\"employee-department-mail\"\n              name=\"employee-department-mail\"\n              value={bulkEmployeeDepartmentMail}\n              onChange={handleBulkEmployeeDepartmentMailChange}\n              placeholder=\"Enter employee;department;e-mail (one per line)\"\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n        </div>\n\n        {/* Save Bulk Data Button */}\n        <div className=\"mb-6 flex justify-center\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-4\"\n            disabled={bulkTasks.trim() === '' && bulkEmployeeDepartmentMail.trim() === ''}\n          >\n            Save Bulk Data\n          </button>\n        </div>\n      </div>\n\n      <hr className=\"my-8 border-t border-gray-300\" />\n\n      <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\n        <h2 className=\"text-2xl font-bold mb-6 text-center\">Create Task</h2>\n        \n        <form onSubmit={handleSubmit}>\n          {/* Task Dropdown */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"task\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Task\n            </label>\n            <select\n              id=\"task\"\n              name=\"task\"\n              value={task.taskName}\n              onChange={handleTaskSelection}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            >\n              <option value=\"\">Select Task</option>\n              {tasks.map(taskItem => (\n                <option key={taskItem.id} value={taskItem.name}>\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            >\n              <option value=\"\">Select Employee</option>\n              {employees.map(emp => (\n                <option key={emp.id} value={emp.name}>\n                  {emp.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"text\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.email || ''\n              }\n              readOnly\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div className=\"mb-4\">\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-bold mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex items-center justify-center\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              Create Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button } from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = () => {\n  var _employees$find;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n\n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000 // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n\n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department pairs (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department\n      };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = e => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({\n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending bulk tasks:', {\n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', {\n            tasks: tasksData\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          var _apiError$response, _apiError$response2;\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: (_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.data,\n            status: (_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status,\n            config: apiError.config,\n            requestData: {\n              tasks: tasksData\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n        console.log('Sending employee-department pairs:', {\n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', {\n            employeeDepartments: formattedPairs\n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n\n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          var _apiError$response3, _apiError$response4;\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: (_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.data,\n            status: (_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : _apiError$response4.status,\n            config: apiError.config,\n            requestData: {\n              employeeDepartments: formattedPairs\n            }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response5;\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status,\n        config: error.config,\n        stack: error.stack\n      });\n      alert(`Error saving bulk data: \n        ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message}\n        \n        Status: ${((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'Unknown'}\n        Details: ${JSON.stringify((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n\n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response8, _error$response8$data;\n      console.error('Error creating task:', {\n        message: error.message,\n        response: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n        status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status\n      });\n      alert(`Error creating task: ${((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-6 text-center\",\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bulkTasks\",\n        className: \"block text-gray-700 text-sm font-bold mb-2\",\n        children: \"Bulk Tasks Input (one task per line)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"bulkTasks\",\n        value: bulkTasks,\n        onChange: handleBulkTasksChange,\n        className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n        rows: \"5\",\n        placeholder: \"Enter multiple tasks, one per line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600 mt-1\",\n        children: [parsedTasks.length, \" tasks ready to be saved\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"bulkEmployeeDepartment\",\n        className: \"block text-gray-700 text-sm font-bold mb-2\",\n        children: \"Employee-Department Input (format: employee;department)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"bulkEmployeeDepartment\",\n        value: bulkEmployeeDepartment,\n        onChange: handleBulkEmployeeDepartmentChange,\n        className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n        rows: \"5\",\n        placeholder: \"Enter employee and department pairs, one per line (e.g., John Doe;Sales)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600 mt-1\",\n        children: [parsedEmployeeDepartment.length, \" employee-department pairs ready to be saved\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleBulkDataSubmission,\n        disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n        variant: \"default\",\n        size: \"lg\",\n        className: \"mr-4\",\n        children: \"Save Bulk Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"taskName\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Select Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), (() => {\n          console.log('Rendering Tasks Dropdown:', {\n            tasksCount: tasks.length,\n            tasksData: tasks\n          });\n          return /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleTaskSelection,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this), tasks.map(taskItem => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: [taskItem.name, \" - \", taskItem.description]\n            }, `task-${taskItem.id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"employee\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Employee\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), (() => {\n          console.log('=== EMPLOYEE DROPDOWN DEBUG ===');\n          console.log('Current employees state:', employees);\n          console.log('Current task.employee value:', task.employee);\n          console.log('Number of employees:', employees.length);\n          if (employees.length === 0) {\n            console.log('Warning: No employees available in the dropdown');\n          }\n          return /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), employees.map((employee, index) => {\n              console.log(`Rendering employee option ${index}:`, employee);\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: employee.name,\n                children: employee.name\n              }, `employee-${employee.id || index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"department\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"department\",\n          name: \"department\",\n          value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n          readOnly: true,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"date\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"date\",\n          name: \"date\",\n          value: task.date,\n          onChange: handleChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"comments\",\n          className: \"block text-gray-700 text-sm font-bold mb-2\",\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"comments\",\n          name: \"comments\",\n          value: task.comments,\n          onChange: handleChange,\n          className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n          placeholder: \"Enter any additional comments\",\n          rows: \"4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          size: \"lg\",\n          children: \"Create Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\nexport default TaskInput;","map":{"version":3,"names":["React","useState","useEffect","axios","Button","jsxDEV","_jsxDEV","TaskInput","_employees$find","task","setTask","taskName","employee","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","setTasks","employees","setEmployees","fetchData","console","log","tasksResponse","get","timeout","status","data","headers","Array","isArray","length","error","employeesResponse","response","request","message","alert","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","employeeDepartment","map","department","item","handleTaskSelection","selectedValue","prev","handleChange","name","selectedEmployee","find","emp","prevTask","handleBulkDataSubmission","tasksData","createdAt","Date","toISOString","requestDetails","url","method","post","apiError","_apiError$response","_apiError$response2","config","requestData","formattedPairs","employeeDepartments","pairsResponse","_apiError$response3","_apiError$response4","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response5","stack","JSON","stringify","handleSubmit","preventDefault","_error$response6","_error$response7","_error$response8","_error$response8$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","rows","placeholder","onClick","disabled","variant","size","onSubmit","tasksCount","required","taskItem","description","index","type","readOnly"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button } from './Button';\n\nconst TaskInput = () => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // State for fetched tasks and employees\n  const [tasks, setTasks] = useState([]);\n  const [employees, setEmployees] = useState([]);\n\n  // Fetch tasks and employees data when the component mounts\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        console.log('=== FETCHING TASKS AND EMPLOYEES DATA ===');\n        \n        // Fetch tasks\n        console.log('Attempting to fetch tasks from: http://localhost:5000/api/tasks');\n        const tasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          timeout: 10000  // 10-second timeout\n        });\n        console.log('Tasks Response:', {\n          status: tasksResponse.status,\n          data: tasksResponse.data,\n          headers: tasksResponse.headers\n        });\n\n        // Validate and set tasks\n        if (Array.isArray(tasksResponse.data)) {\n          console.log(`Setting ${tasksResponse.data.length} tasks`);\n          setTasks(tasksResponse.data);\n        } else {\n          console.error('Tasks response is not an array:', tasksResponse.data);\n          setTasks([]);\n        }\n\n        // Fetch employees\n        console.log('Fetching employees...');\n        const employeesResponse = await axios.get('http://localhost:5000/api/employees', {\n          timeout: 10000\n        });\n        console.log('Employees fetched:', employeesResponse.data);\n        if (Array.isArray(employeesResponse.data)) {\n          setEmployees(employeesResponse.data);\n        } else {\n          console.error('Employees response is not an array:', employeesResponse.data);\n          setEmployees([]);\n        }\n\n      } catch (error) {\n        console.error('=== COMPREHENSIVE DATA FETCH ERROR ===', error);\n        \n        // Detailed error logging\n        if (error.response) {\n          console.error('Server Response Error:', {\n            status: error.response.status,\n            data: error.response.data,\n            headers: error.response.headers\n          });\n        } else if (error.request) {\n          console.error('No Response Received:', error.request);\n        } else {\n          console.error('Request Setup Error:', error.message);\n        }\n\n        // Set empty arrays to prevent undefined errors\n        setTasks([]);\n        setEmployees([]);\n\n        // User-friendly error message\n        alert(`Failed to fetch tasks or employees: \n          ${error.message}\n          \n          Please check your server connection and try again.\n        `);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Handle bulk tasks input\n  const handleBulkTasksChange = (e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    // Parse tasks (split by new line)\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  };\n\n  // Handle employee-department input\n  const handleBulkEmployeeDepartmentChange = (e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    // Parse employee-department pairs (split by new line and delimiter)\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '');\n    const employeeDepartment = pairs.map(pair => {\n      const [employee, department] = pair.split(';').map(item => item.trim());\n      return { employee, department };\n    });\n    setParsedEmployeeDepartment(employeeDepartment);\n  };\n\n  // Handle task selection from parsed tasks\n  const handleTaskSelection = (e) => {\n    const selectedValue = e.target.value;\n    setTask(prev => ({\n      ...prev,\n      taskName: selectedValue\n    }));\n  };\n\n  // Handle input changes\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    if (name === 'employee') {\n      // Find the selected employee to get their department\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prevTask => ({\n        ...prevTask,\n        employee: value,\n        department: selectedEmployee ? selectedEmployee.department : ''\n      }));\n    } else {\n      setTask(prevTask => ({\n        ...prevTask,\n        [name]: value\n      }));\n    }\n  };\n\n  // Handle bulk data submission\n  const handleBulkDataSubmission = async () => {\n    try {\n      // Save tasks to database\n      if (parsedTasks.length > 0) {\n        console.log('Preparing bulk tasks data:', parsedTasks);\n        const tasksData = parsedTasks.map(taskName => ({ \n          name: taskName.trim(),\n          status: 'pending',\n          createdAt: new Date().toISOString()\n        }));\n        \n        console.log('Sending bulk tasks:', { \n          tasks: tasksData,\n          requestDetails: {\n            url: 'http://localhost:5000/api/bulk-tasks',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const tasksResponse = await axios.post('http://localhost:5000/api/bulk-tasks', { \n            tasks: tasksData \n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          });\n          console.log('Bulk tasks saved successfully:', tasksResponse.data);\n        } catch (apiError) {\n          console.error('Detailed API Error for Bulk Tasks:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { tasks: tasksData }\n          });\n          throw apiError;\n        }\n      }\n\n      // Save employee-department pairs to database\n      if (parsedEmployeeDepartment.length > 0) {\n        console.log('Preparing employee-department data:', parsedEmployeeDepartment);\n        const formattedPairs = parsedEmployeeDepartment.map(pair => ({\n          employee: pair.employee.trim(),\n          department: pair.department.trim(),\n          createdAt: new Date().toISOString()\n        }));\n\n        console.log('Sending employee-department pairs:', { \n          employeeDepartments: formattedPairs,\n          requestDetails: {\n            url: 'http://localhost:5000/api/employee-departments',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            }\n          }\n        });\n\n        try {\n          const pairsResponse = await axios.post('http://localhost:5000/api/employee-departments', { \n            employeeDepartments: formattedPairs \n          });\n          console.log('Employee-department pairs saved successfully:', pairsResponse.data);\n          \n          // Refresh employees list after successful submission\n          console.log('Refreshing employees list...');\n          const employeesResponse = await axios.get('http://localhost:5000/api/employees');\n          if (Array.isArray(employeesResponse.data)) {\n            console.log('Updated employees list:', employeesResponse.data);\n            setEmployees(employeesResponse.data);\n          }\n        } catch (apiError) {\n          console.error('Detailed API Error for Employee-Departments:', {\n            message: apiError.message,\n            response: apiError.response?.data,\n            status: apiError.response?.status,\n            config: apiError.config,\n            requestData: { employeeDepartments: formattedPairs }\n          });\n          throw apiError;\n        }\n      }\n\n      // Clear bulk input fields after successful submission\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Show success message\n      alert('Bulk data saved successfully!');\n\n    } catch (error) {\n      console.error('Comprehensive Error saving bulk data:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status,\n        config: error.config,\n        stack: error.stack\n      });\n      \n      alert(`Error saving bulk data: \n        ${error.response?.data?.error || error.message}\n        \n        Status: ${error.response?.status || 'Unknown'}\n        Details: ${JSON.stringify(error.response?.data) || 'No additional details'}\n      `);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // First save bulk data if any exists\n      await handleBulkDataSubmission();\n\n      // Then save the individual task\n      console.log('Sending individual task:', task);\n      const response = await axios.post('http://localhost:5000/api/tasks', task, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      console.log('Task created:', response.data);\n      \n      // Reset form after successful submission\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        date: '',\n        comments: ''\n      });\n    } catch (error) {\n      console.error('Error creating task:', {\n        message: error.message,\n        response: error.response?.data,\n        status: error.response?.status\n      });\n      alert(`Error creating task: ${error.response?.data?.message || error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-10 p-6 bg-white rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold mb-6 text-center\">Create Task</h2>\n      \n      {/* Bulk Tasks Input */}\n      <div className=\"mb-6\">\n        <label \n          htmlFor=\"bulkTasks\" \n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n        >\n          Bulk Tasks Input (one task per line)\n        </label>\n        <textarea\n          id=\"bulkTasks\"\n          value={bulkTasks}\n          onChange={handleBulkTasksChange}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          rows=\"5\"\n          placeholder=\"Enter multiple tasks, one per line\"\n        />\n        <p className=\"text-sm text-gray-600 mt-1\">\n          {parsedTasks.length} tasks ready to be saved\n        </p>\n      </div>\n\n      {/* Employee-Department Input */}\n      <div className=\"mb-6\">\n        <label \n          htmlFor=\"bulkEmployeeDepartment\" \n          className=\"block text-gray-700 text-sm font-bold mb-2\"\n        >\n          Employee-Department Input (format: employee;department)\n        </label>\n        <textarea\n          id=\"bulkEmployeeDepartment\"\n          value={bulkEmployeeDepartment}\n          onChange={handleBulkEmployeeDepartmentChange}\n          className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          rows=\"5\"\n          placeholder=\"Enter employee and department pairs, one per line (e.g., John Doe;Sales)\"\n        />\n        <p className=\"text-sm text-gray-600 mt-1\">\n          {parsedEmployeeDepartment.length} employee-department pairs ready to be saved\n        </p>\n      </div>\n\n      {/* Save Bulk Data Button */}\n      <div className=\"mb-6 flex justify-center\">\n        <Button\n          onClick={handleBulkDataSubmission}\n          disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          variant=\"default\"\n          size=\"lg\"\n          className=\"mr-4\"\n        >\n          Save Bulk Data\n        </Button>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        {/* Task Selection Dropdown */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"taskName\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Select Task\n          </label>\n          {(() => {\n            console.log('Rendering Tasks Dropdown:', {\n              tasksCount: tasks.length,\n              tasksData: tasks\n            });\n            return (\n              <select\n                id=\"taskName\"\n                name=\"taskName\"\n                value={task.taskName}\n                onChange={handleTaskSelection}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              >\n                <option value=\"\">Select a task</option>\n                {tasks.map((taskItem) => (\n                  <option \n                    key={`task-${taskItem.id}`} \n                    value={taskItem.name}\n                  >\n                    {taskItem.name} - {taskItem.description}\n                  </option>\n                ))}\n              </select>\n            );\n          })()}\n        </div>\n\n        {/* Employee Dropdown */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"employee\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Employee\n          </label>\n          {(() => {\n            console.log('=== EMPLOYEE DROPDOWN DEBUG ===');\n            console.log('Current employees state:', employees);\n            console.log('Current task.employee value:', task.employee);\n            console.log('Number of employees:', employees.length);\n            \n            if (employees.length === 0) {\n              console.log('Warning: No employees available in the dropdown');\n            }\n\n            return (\n              <select\n                id=\"employee\"\n                name=\"employee\"\n                value={task.employee}\n                onChange={handleChange}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              >\n                <option value=\"\">Select an employee</option>\n                {employees.map((employee, index) => {\n                  console.log(`Rendering employee option ${index}:`, employee);\n                  return (\n                    <option \n                      key={`employee-${employee.id || index}`} \n                      value={employee.name}\n                    >\n                      {employee.name}\n                    </option>\n                  );\n                })}\n              </select>\n            );\n          })()}\n        </div>\n\n        {/* Department Display */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"department\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Department\n          </label>\n          <input\n            type=\"text\"\n            id=\"department\"\n            name=\"department\"\n            value={\n              employees.find(emp => emp.name === task.employee)?.department || ''\n            }\n            readOnly\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          />\n        </div>\n\n        {/* Date Input */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"date\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Date\n          </label>\n          <input\n            type=\"date\"\n            id=\"date\"\n            name=\"date\"\n            value={task.date}\n            onChange={handleChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            required\n          />\n        </div>\n\n        {/* Comments Input */}\n        <div className=\"mb-4\">\n          <label \n            htmlFor=\"comments\" \n            className=\"block text-gray-700 text-sm font-bold mb-2\"\n          >\n            Comments\n          </label>\n          <textarea\n            id=\"comments\"\n            name=\"comments\"\n            value={task.comments}\n            onChange={handleChange}\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            placeholder=\"Enter any additional comments\"\n            rows=\"4\"\n          />\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"flex items-center justify-center\">\n          <Button type=\"submit\" variant=\"primary\" size=\"lg\">\n            Create Task\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default TaskInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
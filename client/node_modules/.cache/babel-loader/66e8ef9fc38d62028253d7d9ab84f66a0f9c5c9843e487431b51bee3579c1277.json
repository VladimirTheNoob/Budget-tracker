{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = props => {\n  var _employees$find, _parsedEmployeeDepart, _employees$find2;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // Destructure props with default values\n  const {\n    tasks = [],\n    employees = [],\n    setTasks,\n    setEmployees,\n    onDataSaved = () => {}\n  } = props;\n\n  // Memoized unique employees to prevent unnecessary re-renders\n  const uniqueEmployees = useMemo(() => [...new Map(employees.map(emp => [emp.id, emp])).values()], [employees]);\n\n  // Memoized data fetching function\n  const fetchData = useCallback(async () => {\n    try {\n      const [tasksResponse, employeesResponse, employeeDepartmentsResponse] = await Promise.all([axios.get('http://localhost:5000/api/tasks'), axios.get('http://localhost:5000/api/employees'), axios.get('http://localhost:5000/api/employee-departments')]);\n\n      // Process tasks\n      if (Array.isArray(tasksResponse.data)) {\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          ...task,\n          id: task.id || `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          taskName: task.name\n        }));\n        setTasks(tasksWithIds);\n      }\n\n      // Process employees\n      if (Array.isArray(employeesResponse.data)) {\n        setEmployees(employeesResponse.data);\n      }\n\n      // Process employee departments\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      alert('Failed to fetch data. Please try again.');\n    }\n  }, [setTasks, setEmployees]);\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleBulkTasksChange = useCallback(e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  }, []);\n  const handleBulkEmployeeDepartmentChange = useCallback(e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '').map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    }).filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  }, []);\n  const handleTaskSelection = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  }, []);\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.department) || '',\n        mail: (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.email) || ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  }, [employees]);\n  const handleBulkDataSubmission = useCallback(async () => {\n    try {\n      // Employee Department Updates\n      if (parsedEmployeeDepartment.length > 0) {\n        const validPairs = parsedEmployeeDepartment.map(pair => {\n          var _pair$employee, _pair$department, _pair$email;\n          return {\n            employee: ((_pair$employee = pair.employee) === null || _pair$employee === void 0 ? void 0 : _pair$employee.trim()) || '',\n            department: ((_pair$department = pair.department) === null || _pair$department === void 0 ? void 0 : _pair$department.trim()) || '',\n            email: (_pair$email = pair.email) === null || _pair$email === void 0 ? void 0 : _pair$email.trim().toLowerCase()\n          };\n        }).filter(pair => pair.employee && pair.department && pair.email);\n        if (validPairs.length > 0) {\n          await axios.put('http://localhost:5000/api/employee-departments', {\n            updates: validPairs\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        }\n      }\n\n      // Task Updates\n      if (parsedTasks.length > 0) {\n        // Add validation before creating taskUpdates\n        const uniqueNames = new Set(parsedTasks);\n        if (uniqueNames.size !== parsedTasks.length) {\n          throw new Error('Duplicate task names detected in input');\n        }\n        parsedTasks.forEach(taskName => {\n          if (!/^[\\p{L}\\d_-]+$/u.test(taskName)) {\n            throw new Error(`Invalid task name: \"${taskName}\". Must be a single word without spaces/special chars`);\n          }\n        });\n        const taskUpdates = parsedTasks.map(taskText => ({\n          name: taskText,\n          employee: '',\n          date: new Date().toISOString().split('T')[0],\n          comments: '',\n          status: 'pending',\n          department: '',\n          email: ''\n        }));\n        const response = await axios.post('http://localhost:5000/api/tasks/bulk', {\n          tasks: taskUpdates\n        }, {\n          withCredentials: true,\n          validateStatus: status => status === 200 || status === 201\n        });\n\n        // Handle response with user-friendly messages\n        if (response.status === 201) {\n          const {\n            addedCount,\n            duplicates\n          } = response.data;\n          alert(duplicates > 0 ? `Added ${addedCount} tasks. ${duplicates} duplicates skipped.` : `Successfully added ${addedCount} tasks`);\n        }\n      }\n\n      // Reset form state\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Trigger data refresh\n      fetchData();\n      onDataSaved();\n    } catch (error) {\n      console.error('Bulk submission error:', error);\n      alert(error.message || 'Bulk submission failed');\n    }\n  }, [parsedEmployeeDepartment, parsedTasks, fetchData, onDataSaved]);\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Find if task already exists (use case-insensitive name matching)\n      const selectedTask = tasks.find(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n\n      // Prepare task data\n      const taskData = {\n        name: task.taskName,\n        employee: task.employee,\n        date: task.date,\n        comments: task.comments,\n        status: (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) || 'pending',\n        department: task.department,\n        email: task.mail\n      };\n      console.log('Submitting task data:', taskData);\n      console.log('Selected task:', selectedTask);\n      if (selectedTask) {\n        console.log('Updating existing task:', selectedTask.id);\n        // Update existing task\n        const response = await axios.put(`http://localhost:5000/api/tasks/${selectedTask.id}`, {\n          ...taskData,\n          id: selectedTask.id // Explicitly include the ID\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          console.log('Task updated successfully:', response.data);\n          alert('Task updated successfully!');\n        }\n      } else {\n        // Create new task\n        const response = await axios.post('http://localhost:5000/api/tasks', taskData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 201) {\n          console.log('Task created successfully:', response.data);\n          alert('Task created successfully!');\n        }\n      }\n\n      // Reset form\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Refresh data\n      await fetchData();\n\n      // Notify parent component\n      onDataSaved();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error saving task:', error);\n      alert(`Failed to save task: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message}`);\n    }\n  };\n  const handleCheckTask = taskId => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkEmployeeDepartment\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkEmployeeDepartment\",\n            value: bulkEmployeeDepartment,\n            onChange: handleBulkEmployeeDepartmentChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleDeleteAllData,\n          className: \"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\",\n          children: \"Delete All Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this), tasks.map((taskItem, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id || `new-task-${index}-${taskItem.name}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 15\n            }, this), uniqueEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center pt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this);\n};\nexport default /*#__PURE__*/React.memo(TaskInput);","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","axios","jsxDEV","_jsxDEV","TaskInput","props","_employees$find","_parsedEmployeeDepart","_employees$find2","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","employees","setTasks","setEmployees","onDataSaved","uniqueEmployees","Map","map","emp","id","values","fetchData","tasksResponse","employeesResponse","employeeDepartmentsResponse","Promise","all","get","Array","isArray","data","tasksWithIds","index","Date","now","Math","random","toString","substr","name","error","console","alert","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","department","email","item","handleTaskSelection","prev","handleChange","selectedEmployee","find","handleBulkDataSubmission","length","validPairs","_pair$employee","_pair$department","_pair$email","toLowerCase","put","updates","headers","uniqueNames","Set","size","Error","forEach","test","taskUpdates","taskText","toISOString","status","response","post","withCredentials","validateStatus","addedCount","duplicates","message","handleDeleteAllData","delete","window","location","reload","handleSubmit","preventDefault","selectedTask","t","taskData","log","_error$response","_error$response$data","handleCheckTask","taskId","newChecked","checkedTasks","has","add","setCheckedTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly","memo"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = (props) => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // Destructure props with default values\n  const { \n    tasks = [], \n    employees = [], \n    setTasks, \n    setEmployees, \n    onDataSaved = () => {} \n  } = props;\n\n  // Memoized unique employees to prevent unnecessary re-renders\n  const uniqueEmployees = useMemo(() => \n    [...new Map(employees.map(emp => [emp.id, emp])).values()], \n    [employees]\n  );\n\n  // Memoized data fetching function\n  const fetchData = useCallback(async () => {\n    try {\n      const [tasksResponse, employeesResponse, employeeDepartmentsResponse] = await Promise.all([\n        axios.get('http://localhost:5000/api/tasks'),\n        axios.get('http://localhost:5000/api/employees'),\n        axios.get('http://localhost:5000/api/employee-departments')\n      ]);\n\n      // Process tasks\n      if (Array.isArray(tasksResponse.data)) {\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          ...task,\n          id: task.id || `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          taskName: task.name\n        }));\n        setTasks(tasksWithIds);\n      }\n\n      // Process employees\n      if (Array.isArray(employeesResponse.data)) {\n        setEmployees(employeesResponse.data);\n      }\n\n      // Process employee departments\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      alert('Failed to fetch data. Please try again.');\n    }\n  }, [setTasks, setEmployees]);\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleBulkTasksChange = useCallback((e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  }, []);\n\n  const handleBulkEmployeeDepartmentChange = useCallback((e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    const pairs = value.split('\\n')\n      .filter(pair => pair.trim() !== '')\n      .map(pair => {\n        const [employee, department, email] = pair.split(';').map(item => item.trim());\n        return { employee, department, email };\n      })\n      .filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  }, []);\n\n  const handleTaskSelection = useCallback((e) => {\n    const { value } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const { name, value } = e.target;\n    \n    if (name === 'taskName') {\n      setTask(prev => ({ ...prev, taskName: value }));\n    } else if (name === 'employee') {\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee?.department || '',\n        mail: selectedEmployee?.email || ''\n      }));\n    } else {\n      setTask(prev => ({ ...prev, [name]: value }));\n    }\n  }, [employees]);\n\n  const handleBulkDataSubmission = useCallback(async () => {\n    try {\n      // Employee Department Updates\n      if (parsedEmployeeDepartment.length > 0) {\n        const validPairs = parsedEmployeeDepartment\n          .map(pair => ({\n            employee: pair.employee?.trim() || '',\n            department: pair.department?.trim() || '',\n            email: pair.email?.trim().toLowerCase()\n          }))\n          .filter(pair => pair.employee && pair.department && pair.email);\n\n        if (validPairs.length > 0) {\n          await axios.put(\n            'http://localhost:5000/api/employee-departments',\n            { updates: validPairs },\n            { headers: { 'Content-Type': 'application/json' } }\n          );\n        }\n      }\n\n      // Task Updates\n      if (parsedTasks.length > 0) {\n        // Add validation before creating taskUpdates\n        const uniqueNames = new Set(parsedTasks);\n        if (uniqueNames.size !== parsedTasks.length) {\n          throw new Error('Duplicate task names detected in input');\n        }\n\n        parsedTasks.forEach(taskName => {\n          if (!/^[\\p{L}\\d_-]+$/u.test(taskName)) {\n            throw new Error(`Invalid task name: \"${taskName}\". Must be a single word without spaces/special chars`);\n          }\n        });\n\n        const taskUpdates = parsedTasks.map(taskText => ({\n          name: taskText,\n          employee: '',\n          date: new Date().toISOString().split('T')[0],\n          comments: '',\n          status: 'pending',\n          department: '',\n          email: ''\n        }));\n\n        const response = await axios.post(\n          'http://localhost:5000/api/tasks/bulk',\n          { tasks: taskUpdates },\n          {\n            withCredentials: true,\n            validateStatus: (status) => status === 200 || status === 201\n          }\n        );\n\n        // Handle response with user-friendly messages\n        if (response.status === 201) {\n          const { addedCount, duplicates } = response.data;\n          alert(duplicates > 0 \n            ? `Added ${addedCount} tasks. ${duplicates} duplicates skipped.`\n            : `Successfully added ${addedCount} tasks`\n          );\n        }\n      }\n\n      // Reset form state\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n      \n      // Trigger data refresh\n      fetchData();\n      onDataSaved();\n\n    } catch (error) {\n      console.error('Bulk submission error:', error);\n      alert(error.message || 'Bulk submission failed');\n    }\n  }, [parsedEmployeeDepartment, parsedTasks, fetchData, onDataSaved]);\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      // Find if task already exists (use case-insensitive name matching)\n      const selectedTask = tasks.find(t => \n        t.name.toLowerCase() === task.taskName.toLowerCase()\n      );\n      \n      // Prepare task data\n      const taskData = {\n        name: task.taskName,\n        employee: task.employee,\n        date: task.date,\n        comments: task.comments,\n        status: selectedTask?.status || 'pending',\n        department: task.department,\n        email: task.mail\n      };\n\n      console.log('Submitting task data:', taskData);\n      console.log('Selected task:', selectedTask);\n\n      if (selectedTask) {\n        console.log('Updating existing task:', selectedTask.id);\n        // Update existing task\n        const response = await axios.put(\n          `http://localhost:5000/api/tasks/${selectedTask.id}`,\n          {\n            ...taskData,\n            id: selectedTask.id  // Explicitly include the ID\n          },\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        if (response.status === 200) {\n          console.log('Task updated successfully:', response.data);\n          alert('Task updated successfully!');\n        }\n      } else {\n        // Create new task\n        const response = await axios.post(\n          'http://localhost:5000/api/tasks',\n          taskData,\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        if (response.status === 201) {\n          console.log('Task created successfully:', response.data);\n          alert('Task created successfully!');\n        }\n      }\n\n      // Reset form\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Refresh data\n      await fetchData();\n      \n      // Notify parent component\n      onDataSaved();\n\n    } catch (error) {\n      console.error('Error saving task:', error);\n      alert(`Failed to save task: ${error.response?.data?.error || error.message}`);\n    }\n  };\n\n  const handleCheckTask = (taskId) => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Bulk Inputs Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Bulk Data Input</h2>\n        \n        <div className=\"flex space-x-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkEmployeeDepartment\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Employee-Department-Mail Input (format: employee;department;email)\n            </label>\n            <textarea\n              id=\"bulkEmployeeDepartment\"\n              value={bulkEmployeeDepartment}\n              onChange={handleBulkEmployeeDepartmentChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n            </p>\n          </div>\n        </div>\n\n        {/* Save and Delete Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={parsedTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n          \n          <button\n            type=\"button\"\n            onClick={handleDeleteAllData}\n            className=\"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\"\n          >\n            Delete All Items\n          </button>\n        </div>\n      </div>\n\n      {/* Individual Task Form */}\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Create Task</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Selection Dropdown */}\n          <div>\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Task\n            </label>\n            <select\n              id=\"taskName\"\n              name=\"taskName\"\n              value={task.taskName}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select a task</option>\n              {tasks.map((taskItem, index) => (\n                <option \n                  key={taskItem.id || `new-task-${index}-${taskItem.name}`}\n                  value={taskItem.name}\n                >\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div>\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {uniqueEmployees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div>\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div>\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"email\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n                employees.find(emp => emp.name === task.employee)?.email || \n                ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div>\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Due Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div>\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center pt-4\">\n            <button\n              type=\"submit\"\n              className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            >\n              Update Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(TaskInput); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
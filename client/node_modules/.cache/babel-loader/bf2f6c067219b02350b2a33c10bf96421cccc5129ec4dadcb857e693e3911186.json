{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\belya\\\\Cursor projects\\\\Budget tracker\\\\client\\\\src\\\\components\\\\TaskInput.js\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskInput = props => {\n  var _employees$find, _parsedEmployeeDepart, _employees$find2;\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '',\n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // Destructure props with default values\n  const {\n    tasks = [],\n    employees = [],\n    setTasks,\n    setEmployees,\n    onDataSaved = () => {}\n  } = props;\n\n  // Memoized unique employees to prevent unnecessary re-renders\n  const uniqueEmployees = useMemo(() => [...new Map(employees.map(emp => [emp.id, emp])).values()], [employees]);\n\n  // Memoized data fetching function\n  const fetchData = useCallback(async () => {\n    try {\n      const [tasksResponse, employeesResponse, employeeDepartmentsResponse] = await Promise.all([axios.get('http://localhost:5000/api/tasks', {\n        withCredentials: true\n      }), axios.get('http://localhost:5000/api/employees', {\n        withCredentials: true\n      }), axios.get('http://localhost:5000/api/employee-departments', {\n        withCredentials: true\n      })]);\n\n      // Process tasks\n      if (Array.isArray(tasksResponse.data)) {\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          ...task,\n          id: task.id || `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          taskName: task.name\n        }));\n        setTasks(tasksWithIds);\n      }\n\n      // Process employees\n      if (Array.isArray(employeesResponse.data)) {\n        setEmployees(employeesResponse.data);\n      }\n\n      // Process employee departments\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      alert('Failed to fetch data. Please try again.');\n    }\n  }, [setTasks, setEmployees]);\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleBulkTasksChange = useCallback(e => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  }, []);\n  const handleBulkEmployeeDepartmentChange = useCallback(e => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    const pairs = value.split('\\n').filter(pair => pair.trim() !== '').map(pair => {\n      const [employee, department, email] = pair.split(';').map(item => item.trim());\n      return {\n        employee,\n        department,\n        email\n      };\n    }).filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  }, []);\n  const handleTaskSelection = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  }, []);\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'taskName') {\n      setTask(prev => ({\n        ...prev,\n        taskName: value\n      }));\n    } else if (name === 'employee') {\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.department) || '',\n        mail: (selectedEmployee === null || selectedEmployee === void 0 ? void 0 : selectedEmployee.email) || ''\n      }));\n    } else {\n      setTask(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  }, [employees]);\n  const handleBulkDataSubmission = useCallback(async () => {\n    try {\n      // Check for duplicates in bulk tasks\n      if (bulkTasks.length > 0) {\n        const tasks = bulkTasks.split('\\n').map(task => task.trim()).filter(task => task !== '');\n\n        // Check for duplicates within the input\n        const uniqueTasks = new Set(tasks);\n        if (uniqueTasks.size !== tasks.length) {\n          const duplicates = tasks.filter((task, index) => tasks.indexOf(task) !== index);\n          alert(`Duplicate tasks found in input: ${[...new Set(duplicates)].join(', ')}`);\n          return;\n        }\n\n        // Validate task names\n        const invalidTasks = tasks.filter(taskText => !/^[\\p{L}\\d_-]+$/u.test(taskText));\n        if (invalidTasks.length > 0) {\n          alert(`Invalid task names: ${invalidTasks.join(', ')}. Tasks must be single words without spaces/special chars.`);\n          return;\n        }\n\n        // Fetch existing tasks to check for server-side duplicates\n        const existingTasksResponse = await axios.get('http://localhost:5000/api/tasks', {\n          withCredentials: true\n        });\n        const existingTaskNames = new Set(existingTasksResponse.data.map(task => task.name.toLowerCase()));\n        const duplicatesInServer = tasks.filter(task => existingTaskNames.has(task.toLowerCase()));\n        if (duplicatesInServer.length > 0) {\n          alert(`Tasks already exist: ${duplicatesInServer.join(', ')}`);\n          return;\n        }\n        const taskUpdates = tasks.map(taskText => ({\n          name: taskText,\n          employee: '',\n          date: new Date().toISOString().split('T')[0],\n          comments: '',\n          status: 'pending',\n          department: '',\n          email: ''\n        }));\n        const response = await axios.post('http://localhost:5000/api/tasks/bulk', {\n          tasks: taskUpdates\n        }, {\n          withCredentials: true,\n          validateStatus: status => status === 200 || status === 201\n        });\n\n        // Handle response with user-friendly messages\n        if (response.status === 201) {\n          const {\n            addedCount,\n            duplicates\n          } = response.data;\n          alert(duplicates > 0 ? `Added ${addedCount} tasks. ${duplicates} duplicates skipped.` : `Successfully added ${addedCount} tasks`);\n        }\n      }\n\n      // Employee Department Updates\n      if (parsedEmployeeDepartment.length > 0) {\n        const validPairs = parsedEmployeeDepartment.map(pair => {\n          var _pair$employee, _pair$department, _pair$email;\n          return {\n            employee: ((_pair$employee = pair.employee) === null || _pair$employee === void 0 ? void 0 : _pair$employee.trim()) || '',\n            department: ((_pair$department = pair.department) === null || _pair$department === void 0 ? void 0 : _pair$department.trim()) || '',\n            email: (_pair$email = pair.email) === null || _pair$email === void 0 ? void 0 : _pair$email.trim().toLowerCase()\n          };\n        }).filter(pair => pair.employee && pair.department && pair.email);\n        if (validPairs.length > 0) {\n          await axios.put('http://localhost:5000/api/employee-departments', {\n            updates: validPairs\n          }, {\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        }\n      }\n\n      // Reset form state\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n\n      // Trigger data refresh\n      fetchData();\n      onDataSaved();\n    } catch (error) {\n      console.error('Bulk submission error:', error);\n      alert(error.message || 'Bulk submission failed');\n    }\n  }, [bulkTasks, parsedEmployeeDepartment, fetchData, onDataSaved]);\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Find if task already exists (use case-insensitive name matching)\n      const selectedTask = tasks.find(t => t.name.toLowerCase() === task.taskName.toLowerCase());\n\n      // Prepare task data\n      const taskData = {\n        name: task.taskName,\n        employee: task.employee,\n        date: task.date,\n        comments: task.comments,\n        status: (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) || 'pending',\n        department: task.department,\n        email: task.mail\n      };\n      console.log('Submitting task data:', taskData);\n      console.log('Selected task:', selectedTask);\n      if (selectedTask) {\n        console.log('Updating existing task:', selectedTask.id);\n        // Update existing task\n        const response = await axios.put(`http://localhost:5000/api/tasks/${selectedTask.id}`, {\n          ...taskData,\n          id: selectedTask.id // Explicitly include the ID\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 200) {\n          console.log('Task updated successfully:', response.data);\n          alert('Task updated successfully!');\n        }\n      } else {\n        // Create new task\n        const response = await axios.post('http://localhost:5000/api/tasks', taskData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.status === 201) {\n          console.log('Task created successfully:', response.data);\n          alert('Task created successfully!');\n        }\n      }\n\n      // Reset form\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Refresh data\n      await fetchData();\n\n      // Notify parent component\n      onDataSaved();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error saving task:', error);\n      alert(`Failed to save task: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message}`);\n    }\n  };\n  const handleCheckTask = taskId => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4 bg-[#f5f5f5]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl mx-auto mb-6 bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Bulk Data Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkTasks\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Bulk Tasks Input (one task per line)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkTasks\",\n            value: bulkTasks,\n            onChange: handleBulkTasksChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter multiple tasks, one per line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedTasks.length, \" tasks ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bulkEmployeeDepartment\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Employee-Department-Mail Input (format: employee;department;email)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"bulkEmployeeDepartment\",\n            value: bulkEmployeeDepartment,\n            onChange: handleBulkEmployeeDepartmentChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            rows: \"4\",\n            placeholder: \"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-1\",\n            children: [parsedEmployeeDepartment.length, \" employee-department-mail entries ready to be saved\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center space-x-4 mt-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleBulkDataSubmission,\n          className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n          disabled: bulkTasks.length === 0 && parsedEmployeeDepartment.length === 0,\n          children: \"Save Bulk Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleDeleteAllData,\n          className: \"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\",\n          children: \"Delete All Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto bg-white rounded p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-6 text-center\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"taskName\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"taskName\",\n            name: \"taskName\",\n            value: task.taskName,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select a task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 15\n            }, this), tasks.map((taskItem, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: taskItem.name,\n              children: taskItem.name\n            }, taskItem.id || `new-task-${index}-${taskItem.name}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"employee\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Select Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"employee\",\n            name: \"employee\",\n            value: task.employee,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select an employee\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 15\n            }, this), uniqueEmployees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: employee.name,\n              children: employee.name\n            }, `employee-${employee.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"department\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"department\",\n            name: \"department\",\n            value: ((_employees$find = employees.find(emp => emp.name === task.employee)) === null || _employees$find === void 0 ? void 0 : _employees$find.department) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"mail\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Mail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"mail\",\n            name: \"mail\",\n            value: ((_parsedEmployeeDepart = parsedEmployeeDepartment.find(emp => emp.employee === task.employee)) === null || _parsedEmployeeDepart === void 0 ? void 0 : _parsedEmployeeDepart.email) || ((_employees$find2 = employees.find(emp => emp.name === task.employee)) === null || _employees$find2 === void 0 ? void 0 : _employees$find2.email) || '',\n            readOnly: true,\n            className: \"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"date\",\n            value: task.date,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"comments\",\n            className: \"block text-gray-700 text-sm font-medium mb-2\",\n            children: \"Comments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"comments\",\n            name: \"comments\",\n            value: task.comments,\n            onChange: handleChange,\n            className: \"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\",\n            placeholder: \"Enter any additional comments\",\n            rows: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center pt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\",\n            children: \"Update Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n};\nexport default /*#__PURE__*/React.memo(TaskInput);","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","axios","jsxDEV","_jsxDEV","TaskInput","props","_employees$find","_parsedEmployeeDepart","_employees$find2","task","setTask","taskName","employee","mail","date","comments","bulkTasks","setBulkTasks","parsedTasks","setParsedTasks","bulkEmployeeDepartment","setBulkEmployeeDepartment","parsedEmployeeDepartment","setParsedEmployeeDepartment","tasks","employees","setTasks","setEmployees","onDataSaved","uniqueEmployees","Map","map","emp","id","values","fetchData","tasksResponse","employeesResponse","employeeDepartmentsResponse","Promise","all","get","withCredentials","Array","isArray","data","tasksWithIds","index","Date","now","Math","random","toString","substr","name","error","console","alert","handleBulkTasksChange","e","value","target","split","filter","trim","handleBulkEmployeeDepartmentChange","pairs","pair","department","email","item","handleTaskSelection","prev","handleChange","selectedEmployee","find","handleBulkDataSubmission","length","uniqueTasks","Set","size","duplicates","indexOf","join","invalidTasks","taskText","test","existingTasksResponse","existingTaskNames","toLowerCase","duplicatesInServer","has","taskUpdates","toISOString","status","response","post","validateStatus","addedCount","validPairs","_pair$employee","_pair$department","_pair$email","put","updates","headers","message","handleDeleteAllData","delete","window","location","reload","handleSubmit","preventDefault","selectedTask","t","taskData","log","_error$response","_error$response$data","handleCheckTask","taskId","newChecked","checkedTasks","add","setCheckedTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","rows","placeholder","type","onClick","disabled","onSubmit","required","taskItem","readOnly","memo"],"sources":["C:/Users/belya/Cursor projects/Budget tracker/client/src/components/TaskInput.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport axios from 'axios';\n\nconst TaskInput = (props) => {\n  // State to manage form inputs\n  const [task, setTask] = useState({\n    taskName: '',\n    employee: '',\n    mail: '', \n    date: '',\n    comments: ''\n  });\n\n  // State for bulk tasks\n  const [bulkTasks, setBulkTasks] = useState('');\n  const [parsedTasks, setParsedTasks] = useState([]);\n\n  // State for employee-department input\n  const [bulkEmployeeDepartment, setBulkEmployeeDepartment] = useState('');\n  const [parsedEmployeeDepartment, setParsedEmployeeDepartment] = useState([]);\n\n  // Destructure props with default values\n  const { \n    tasks = [], \n    employees = [], \n    setTasks, \n    setEmployees, \n    onDataSaved = () => {} \n  } = props;\n\n  // Memoized unique employees to prevent unnecessary re-renders\n  const uniqueEmployees = useMemo(() => \n    [...new Map(employees.map(emp => [emp.id, emp])).values()], \n    [employees]\n  );\n\n  // Memoized data fetching function\n  const fetchData = useCallback(async () => {\n    try {\n      const [tasksResponse, employeesResponse, employeeDepartmentsResponse] = await Promise.all([\n        axios.get('http://localhost:5000/api/tasks', { withCredentials: true }),\n        axios.get('http://localhost:5000/api/employees', { withCredentials: true }),\n        axios.get('http://localhost:5000/api/employee-departments', { withCredentials: true })\n      ]);\n\n      // Process tasks\n      if (Array.isArray(tasksResponse.data)) {\n        const tasksWithIds = tasksResponse.data.map((task, index) => ({\n          ...task,\n          id: task.id || `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          taskName: task.name\n        }));\n        setTasks(tasksWithIds);\n      }\n\n      // Process employees\n      if (Array.isArray(employeesResponse.data)) {\n        setEmployees(employeesResponse.data);\n      }\n\n      // Process employee departments\n      if (Array.isArray(employeeDepartmentsResponse.data)) {\n        setParsedEmployeeDepartment(employeeDepartmentsResponse.data);\n      } else {\n        setParsedEmployeeDepartment([]);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      alert('Failed to fetch data. Please try again.');\n    }\n  }, [setTasks, setEmployees]);\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Memoized handlers to prevent unnecessary re-renders\n  const handleBulkTasksChange = useCallback((e) => {\n    const value = e.target.value;\n    setBulkTasks(value);\n    const tasks = value.split('\\n').filter(task => task.trim() !== '');\n    setParsedTasks(tasks);\n  }, []);\n\n  const handleBulkEmployeeDepartmentChange = useCallback((e) => {\n    const value = e.target.value;\n    setBulkEmployeeDepartment(value);\n    const pairs = value.split('\\n')\n      .filter(pair => pair.trim() !== '')\n      .map(pair => {\n        const [employee, department, email] = pair.split(';').map(item => item.trim());\n        return { employee, department, email };\n      })\n      .filter(pair => pair.employee && pair.department && pair.email);\n    setParsedEmployeeDepartment(pairs);\n  }, []);\n\n  const handleTaskSelection = useCallback((e) => {\n    const { value } = e.target;\n    setTask(prev => ({\n      ...prev,\n      taskName: value\n    }));\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const { name, value } = e.target;\n    \n    if (name === 'taskName') {\n      setTask(prev => ({ ...prev, taskName: value }));\n    } else if (name === 'employee') {\n      const selectedEmployee = employees.find(emp => emp.name === value);\n      setTask(prev => ({\n        ...prev,\n        employee: value,\n        department: selectedEmployee?.department || '',\n        mail: selectedEmployee?.email || ''\n      }));\n    } else {\n      setTask(prev => ({ ...prev, [name]: value }));\n    }\n  }, [employees]);\n\n  const handleBulkDataSubmission = useCallback(async () => {\n    try {\n      // Check for duplicates in bulk tasks\n      if (bulkTasks.length > 0) {\n        const tasks = bulkTasks.split('\\n').map(task => task.trim()).filter(task => task !== '');\n        \n        // Check for duplicates within the input\n        const uniqueTasks = new Set(tasks);\n        if (uniqueTasks.size !== tasks.length) {\n          const duplicates = tasks.filter((task, index) => \n            tasks.indexOf(task) !== index\n          );\n          alert(`Duplicate tasks found in input: ${[...new Set(duplicates)].join(', ')}`);\n          return;\n        }\n\n        // Validate task names\n        const invalidTasks = tasks.filter(taskText => \n          !/^[\\p{L}\\d_-]+$/u.test(taskText)\n        );\n\n        if (invalidTasks.length > 0) {\n          alert(`Invalid task names: ${invalidTasks.join(', ')}. Tasks must be single words without spaces/special chars.`);\n          return;\n        }\n\n        // Fetch existing tasks to check for server-side duplicates\n        const existingTasksResponse = await axios.get('http://localhost:5000/api/tasks', { withCredentials: true });\n        const existingTaskNames = new Set(\n          existingTasksResponse.data.map(task => task.name.toLowerCase())\n        );\n\n        const duplicatesInServer = tasks.filter(task => \n          existingTaskNames.has(task.toLowerCase())\n        );\n\n        if (duplicatesInServer.length > 0) {\n          alert(`Tasks already exist: ${duplicatesInServer.join(', ')}`);\n          return;\n        }\n\n        const taskUpdates = tasks.map(taskText => ({\n          name: taskText,\n          employee: '',\n          date: new Date().toISOString().split('T')[0],\n          comments: '',\n          status: 'pending',\n          department: '',\n          email: ''\n        }));\n\n        const response = await axios.post(\n          'http://localhost:5000/api/tasks/bulk',\n          { tasks: taskUpdates },\n          {\n            withCredentials: true,\n            validateStatus: (status) => status === 200 || status === 201\n          }\n        );\n\n        // Handle response with user-friendly messages\n        if (response.status === 201) {\n          const { addedCount, duplicates } = response.data;\n          alert(duplicates > 0 \n            ? `Added ${addedCount} tasks. ${duplicates} duplicates skipped.`\n            : `Successfully added ${addedCount} tasks`\n          );\n        }\n      }\n\n      // Employee Department Updates\n      if (parsedEmployeeDepartment.length > 0) {\n        const validPairs = parsedEmployeeDepartment\n          .map(pair => ({\n            employee: pair.employee?.trim() || '',\n            department: pair.department?.trim() || '',\n            email: pair.email?.trim().toLowerCase()\n          }))\n          .filter(pair => pair.employee && pair.department && pair.email);\n\n        if (validPairs.length > 0) {\n          await axios.put(\n            'http://localhost:5000/api/employee-departments',\n            { updates: validPairs },\n            { headers: { 'Content-Type': 'application/json' } }\n          );\n        }\n      }\n\n      // Reset form state\n      setBulkTasks('');\n      setBulkEmployeeDepartment('');\n      setParsedTasks([]);\n      setParsedEmployeeDepartment([]);\n      \n      // Trigger data refresh\n      fetchData();\n      onDataSaved();\n\n    } catch (error) {\n      console.error('Bulk submission error:', error);\n      alert(error.message || 'Bulk submission failed');\n    }\n  }, [bulkTasks, parsedEmployeeDepartment, fetchData, onDataSaved]);\n\n  // Handle delete all data\n  const handleDeleteAllData = async () => {\n    try {\n      const response = await axios.delete('http://localhost:5000/api/tasks/all');\n      if (response.status === 200) {\n        alert('All data has been successfully deleted');\n        // Reset any local state if needed\n        setParsedTasks([]);\n        setParsedEmployeeDepartment([]);\n        setBulkTasks('');\n        setBulkEmployeeDepartment('');\n        setTask({\n          taskName: '',\n          employee: '',\n          department: '',\n          mail: '',\n          date: '',\n          comments: ''\n        });\n\n        // Refresh the page\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Error deleting data:', error);\n      alert('Failed to delete data. Please try again.');\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    try {\n      // Find if task already exists (use case-insensitive name matching)\n      const selectedTask = tasks.find(t => \n        t.name.toLowerCase() === task.taskName.toLowerCase()\n      );\n      \n      // Prepare task data\n      const taskData = {\n        name: task.taskName,\n        employee: task.employee,\n        date: task.date,\n        comments: task.comments,\n        status: selectedTask?.status || 'pending',\n        department: task.department,\n        email: task.mail\n      };\n\n      console.log('Submitting task data:', taskData);\n      console.log('Selected task:', selectedTask);\n\n      if (selectedTask) {\n        console.log('Updating existing task:', selectedTask.id);\n        // Update existing task\n        const response = await axios.put(\n          `http://localhost:5000/api/tasks/${selectedTask.id}`,\n          {\n            ...taskData,\n            id: selectedTask.id  // Explicitly include the ID\n          },\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        if (response.status === 200) {\n          console.log('Task updated successfully:', response.data);\n          alert('Task updated successfully!');\n        }\n      } else {\n        // Create new task\n        const response = await axios.post(\n          'http://localhost:5000/api/tasks',\n          taskData,\n          { headers: { 'Content-Type': 'application/json' } }\n        );\n\n        if (response.status === 201) {\n          console.log('Task created successfully:', response.data);\n          alert('Task created successfully!');\n        }\n      }\n\n      // Reset form\n      setTask({\n        taskName: '',\n        employee: '',\n        department: '',\n        mail: '',\n        date: '',\n        comments: ''\n      });\n\n      // Refresh data\n      await fetchData();\n      \n      // Notify parent component\n      onDataSaved();\n\n    } catch (error) {\n      console.error('Error saving task:', error);\n      alert(`Failed to save task: ${error.response?.data?.error || error.message}`);\n    }\n  };\n\n  const handleCheckTask = (taskId) => {\n    const newChecked = new Set(checkedTasks);\n    if (newChecked.has(taskId)) {\n      newChecked.delete(taskId);\n    } else {\n      newChecked.add(taskId);\n    }\n    setCheckedTasks(newChecked);\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 bg-[#f5f5f5]\">\n      {/* Bulk Inputs Section */}\n      <div className=\"max-w-7xl mx-auto mb-6 bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Bulk Data Input</h2>\n        \n        <div className=\"flex space-x-6\">\n          {/* Bulk Tasks Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkTasks\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Bulk Tasks Input (one task per line)\n            </label>\n            <textarea\n              id=\"bulkTasks\"\n              value={bulkTasks}\n              onChange={handleBulkTasksChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter multiple tasks, one per line\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedTasks.length} tasks ready to be saved\n            </p>\n          </div>\n\n          {/* Employee-Department Input */}\n          <div className=\"w-1/2\">\n            <label \n              htmlFor=\"bulkEmployeeDepartment\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Employee-Department-Mail Input (format: employee;department;email)\n            </label>\n            <textarea\n              id=\"bulkEmployeeDepartment\"\n              value={bulkEmployeeDepartment}\n              onChange={handleBulkEmployeeDepartmentChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              rows=\"4\"\n              placeholder=\"Enter employee, department and email, one per line (e.g., John Doe;Sales;john.doe@example.com)\"\n            />\n            <p className=\"text-sm text-gray-500 mt-1\">\n              {parsedEmployeeDepartment.length} employee-department-mail entries ready to be saved\n            </p>\n          </div>\n        </div>\n\n        {/* Save and Delete Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-6\">\n          <button\n            type=\"button\"\n            onClick={handleBulkDataSubmission}\n            className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            disabled={bulkTasks.length === 0 && parsedEmployeeDepartment.length === 0}\n          >\n            Save Bulk Data\n          </button>\n          \n          <button\n            type=\"button\"\n            onClick={handleDeleteAllData}\n            className=\"w-48 bg-[#ff4d4f] hover:bg-[#ff7875] text-white font-medium py-2 px-6 rounded\"\n          >\n            Delete All Items\n          </button>\n        </div>\n      </div>\n\n      {/* Individual Task Form */}\n      <div className=\"max-w-2xl mx-auto bg-white rounded p-6\">\n        <h2 className=\"text-xl font-semibold mb-6 text-center\">Create Task</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Task Selection Dropdown */}\n          <div>\n            <label \n              htmlFor=\"taskName\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Task\n            </label>\n            <select\n              id=\"taskName\"\n              name=\"taskName\"\n              value={task.taskName}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select a task</option>\n              {tasks.map((taskItem, index) => (\n                <option \n                  key={taskItem.id || `new-task-${index}-${taskItem.name}`}\n                  value={taskItem.name}\n                >\n                  {taskItem.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Employee Dropdown */}\n          <div>\n            <label \n              htmlFor=\"employee\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Select Employee\n            </label>\n            <select\n              id=\"employee\"\n              name=\"employee\"\n              value={task.employee}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            >\n              <option value=\"\">Select an employee</option>\n              {uniqueEmployees.map((employee) => (\n                <option \n                  key={`employee-${employee.id}`}\n                  value={employee.name}\n                >\n                  {employee.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Department Display */}\n          <div>\n            <label \n              htmlFor=\"department\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Department\n            </label>\n            <input\n              type=\"text\"\n              id=\"department\"\n              name=\"department\"\n              value={\n                employees.find(emp => emp.name === task.employee)?.department || ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Mail Display */}\n          <div>\n            <label \n              htmlFor=\"mail\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Mail\n            </label>\n            <input\n              type=\"email\"\n              id=\"mail\"\n              name=\"mail\"\n              value={\n                parsedEmployeeDepartment.find(emp => emp.employee === task.employee)?.email || \n                employees.find(emp => emp.name === task.employee)?.email || \n                ''\n              }\n              readOnly\n              className=\"w-full border border-gray-300 rounded p-2 bg-gray-50\"\n            />\n          </div>\n\n          {/* Date Input */}\n          <div>\n            <label \n              htmlFor=\"date\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Due Date\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              value={task.date}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              required\n            />\n          </div>\n\n          {/* Comments Input */}\n          <div>\n            <label \n              htmlFor=\"comments\" \n              className=\"block text-gray-700 text-sm font-medium mb-2\"\n            >\n              Comments\n            </label>\n            <textarea\n              id=\"comments\"\n              name=\"comments\"\n              value={task.comments}\n              onChange={handleChange}\n              className=\"w-full border border-gray-300 rounded p-2 focus:outline-none focus:border-gray-400\"\n              placeholder=\"Enter any additional comments\"\n              rows=\"4\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center pt-4\">\n            <button\n              type=\"submit\"\n              className=\"w-48 bg-black hover:bg-gray-800 text-white font-medium py-2 px-6 rounded\"\n            >\n              Update Task\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(TaskInput); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}